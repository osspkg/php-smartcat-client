<?php
/**
 * DocumentExportApi
 * PHP version 7.4
 *
 * @category Class
 * @package  SmartCat
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Smartcat API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SmartCat\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use SmartCat\ApiException;
use SmartCat\Configuration;
use SmartCat\HeaderSelector;
use SmartCat\ObjectSerializer;

/**
 * DocumentExportApi Class Doc Comment
 *
 * @category Class
 * @package  SmartCat
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class DocumentExportApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'apiIntegrationV1DocumentExportPost' => [
            'application/json',
        ],
        'apiIntegrationV1DocumentExportTaskIdGet' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation apiIntegrationV1DocumentExportPost
     *
     * Request the documents export
     *
     * @param  string[] $documentIds Target language IDs (the syntax is documentId_languageId), where documentId_languageId is a document ID  and languageId is a target language ID (required)
     * @param  SegmentExportMode $mode Segment export mode:  Current - The current translation, the segment status notwithstanding (what is shown in the editor)  Confirmed - Confirmed segments at the specific stage, as defined by the StageNumber parameter. If the stage is not specified, export all segments confirmed at any stage (this behavior is similar to exporting files using the Smartcat interface)  Complete - Only completed segments, that is the segments that have passed all the stages and were confirmed at the last one (optional)
     * @param  ExportDocumentRequestType $type Export document type, by default Smartcat.AppIntegrations.Contracts.ExportDocumentRequestType.Target (optional)
     * @param  string $stageNumber Workflow stage number when downloading an intermediate result (optional)
     * @param  ExportingDocumentFormat $exportingDocumentFormat Exporting file format for export without using source file (optional)
     * @param  string $structuringDelimiter Delimiter for structuring keys when exporting without using the source file (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1DocumentExportPost'] to see the possible values for this operation
     *
     * @throws \SmartCat\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SmartCat\Model\ExportDocumentTaskModel
     */
    public function apiIntegrationV1DocumentExportPost($documentIds, $mode = null, $type = null, $stageNumber = null, $exportingDocumentFormat = null, $structuringDelimiter = null, string $contentType = self::contentTypes['apiIntegrationV1DocumentExportPost'][0])
    {
        list($response) = $this->apiIntegrationV1DocumentExportPostWithHttpInfo($documentIds, $mode, $type, $stageNumber, $exportingDocumentFormat, $structuringDelimiter, $contentType);
        return $response;
    }

    /**
     * Operation apiIntegrationV1DocumentExportPostWithHttpInfo
     *
     * Request the documents export
     *
     * @param  string[] $documentIds Target language IDs (the syntax is documentId_languageId), where documentId_languageId is a document ID  and languageId is a target language ID (required)
     * @param  SegmentExportMode $mode Segment export mode:  Current - The current translation, the segment status notwithstanding (what is shown in the editor)  Confirmed - Confirmed segments at the specific stage, as defined by the StageNumber parameter. If the stage is not specified, export all segments confirmed at any stage (this behavior is similar to exporting files using the Smartcat interface)  Complete - Only completed segments, that is the segments that have passed all the stages and were confirmed at the last one (optional)
     * @param  ExportDocumentRequestType $type Export document type, by default Smartcat.AppIntegrations.Contracts.ExportDocumentRequestType.Target (optional)
     * @param  string $stageNumber Workflow stage number when downloading an intermediate result (optional)
     * @param  ExportingDocumentFormat $exportingDocumentFormat Exporting file format for export without using source file (optional)
     * @param  string $structuringDelimiter Delimiter for structuring keys when exporting without using the source file (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1DocumentExportPost'] to see the possible values for this operation
     *
     * @throws \SmartCat\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SmartCat\Model\ExportDocumentTaskModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiIntegrationV1DocumentExportPostWithHttpInfo($documentIds, $mode = null, $type = null, $stageNumber = null, $exportingDocumentFormat = null, $structuringDelimiter = null, string $contentType = self::contentTypes['apiIntegrationV1DocumentExportPost'][0])
    {
        $request = $this->apiIntegrationV1DocumentExportPostRequest($documentIds, $mode, $type, $stageNumber, $exportingDocumentFormat, $structuringDelimiter, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\SmartCat\Model\ExportDocumentTaskModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SmartCat\Model\ExportDocumentTaskModel' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SmartCat\Model\ExportDocumentTaskModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\SmartCat\Model\ExportDocumentTaskModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SmartCat\Model\ExportDocumentTaskModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiIntegrationV1DocumentExportPostAsync
     *
     * Request the documents export
     *
     * @param  string[] $documentIds Target language IDs (the syntax is documentId_languageId), where documentId_languageId is a document ID  and languageId is a target language ID (required)
     * @param  SegmentExportMode $mode Segment export mode:  Current - The current translation, the segment status notwithstanding (what is shown in the editor)  Confirmed - Confirmed segments at the specific stage, as defined by the StageNumber parameter. If the stage is not specified, export all segments confirmed at any stage (this behavior is similar to exporting files using the Smartcat interface)  Complete - Only completed segments, that is the segments that have passed all the stages and were confirmed at the last one (optional)
     * @param  ExportDocumentRequestType $type Export document type, by default Smartcat.AppIntegrations.Contracts.ExportDocumentRequestType.Target (optional)
     * @param  string $stageNumber Workflow stage number when downloading an intermediate result (optional)
     * @param  ExportingDocumentFormat $exportingDocumentFormat Exporting file format for export without using source file (optional)
     * @param  string $structuringDelimiter Delimiter for structuring keys when exporting without using the source file (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1DocumentExportPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiIntegrationV1DocumentExportPostAsync($documentIds, $mode = null, $type = null, $stageNumber = null, $exportingDocumentFormat = null, $structuringDelimiter = null, string $contentType = self::contentTypes['apiIntegrationV1DocumentExportPost'][0])
    {
        return $this->apiIntegrationV1DocumentExportPostAsyncWithHttpInfo($documentIds, $mode, $type, $stageNumber, $exportingDocumentFormat, $structuringDelimiter, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiIntegrationV1DocumentExportPostAsyncWithHttpInfo
     *
     * Request the documents export
     *
     * @param  string[] $documentIds Target language IDs (the syntax is documentId_languageId), where documentId_languageId is a document ID  and languageId is a target language ID (required)
     * @param  SegmentExportMode $mode Segment export mode:  Current - The current translation, the segment status notwithstanding (what is shown in the editor)  Confirmed - Confirmed segments at the specific stage, as defined by the StageNumber parameter. If the stage is not specified, export all segments confirmed at any stage (this behavior is similar to exporting files using the Smartcat interface)  Complete - Only completed segments, that is the segments that have passed all the stages and were confirmed at the last one (optional)
     * @param  ExportDocumentRequestType $type Export document type, by default Smartcat.AppIntegrations.Contracts.ExportDocumentRequestType.Target (optional)
     * @param  string $stageNumber Workflow stage number when downloading an intermediate result (optional)
     * @param  ExportingDocumentFormat $exportingDocumentFormat Exporting file format for export without using source file (optional)
     * @param  string $structuringDelimiter Delimiter for structuring keys when exporting without using the source file (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1DocumentExportPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiIntegrationV1DocumentExportPostAsyncWithHttpInfo($documentIds, $mode = null, $type = null, $stageNumber = null, $exportingDocumentFormat = null, $structuringDelimiter = null, string $contentType = self::contentTypes['apiIntegrationV1DocumentExportPost'][0])
    {
        $returnType = '\SmartCat\Model\ExportDocumentTaskModel';
        $request = $this->apiIntegrationV1DocumentExportPostRequest($documentIds, $mode, $type, $stageNumber, $exportingDocumentFormat, $structuringDelimiter, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiIntegrationV1DocumentExportPost'
     *
     * @param  string[] $documentIds Target language IDs (the syntax is documentId_languageId), where documentId_languageId is a document ID  and languageId is a target language ID (required)
     * @param  SegmentExportMode $mode Segment export mode:  Current - The current translation, the segment status notwithstanding (what is shown in the editor)  Confirmed - Confirmed segments at the specific stage, as defined by the StageNumber parameter. If the stage is not specified, export all segments confirmed at any stage (this behavior is similar to exporting files using the Smartcat interface)  Complete - Only completed segments, that is the segments that have passed all the stages and were confirmed at the last one (optional)
     * @param  ExportDocumentRequestType $type Export document type, by default Smartcat.AppIntegrations.Contracts.ExportDocumentRequestType.Target (optional)
     * @param  string $stageNumber Workflow stage number when downloading an intermediate result (optional)
     * @param  ExportingDocumentFormat $exportingDocumentFormat Exporting file format for export without using source file (optional)
     * @param  string $structuringDelimiter Delimiter for structuring keys when exporting without using the source file (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1DocumentExportPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiIntegrationV1DocumentExportPostRequest($documentIds, $mode = null, $type = null, $stageNumber = null, $exportingDocumentFormat = null, $structuringDelimiter = null, string $contentType = self::contentTypes['apiIntegrationV1DocumentExportPost'][0])
    {

        // verify the required parameter 'documentIds' is set
        if ($documentIds === null || (is_array($documentIds) && count($documentIds) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $documentIds when calling apiIntegrationV1DocumentExportPost'
            );
        }







        $resourcePath = '/api/integration/v1/document/export';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $documentIds,
            'documentIds', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $mode,
            'mode', // param base name
            'SegmentExportMode', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $type,
            'type', // param base name
            'ExportDocumentRequestType', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $stageNumber,
            'stageNumber', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $exportingDocumentFormat,
            'exportingDocumentFormat', // param base name
            'ExportingDocumentFormat', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $structuringDelimiter,
            'structuringDelimiter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiIntegrationV1DocumentExportTaskIdGet
     *
     * Download the export results
     *
     * @param  string $taskId Export task ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1DocumentExportTaskIdGet'] to see the possible values for this operation
     *
     * @throws \SmartCat\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiIntegrationV1DocumentExportTaskIdGet($taskId, string $contentType = self::contentTypes['apiIntegrationV1DocumentExportTaskIdGet'][0])
    {
        $this->apiIntegrationV1DocumentExportTaskIdGetWithHttpInfo($taskId, $contentType);
    }

    /**
     * Operation apiIntegrationV1DocumentExportTaskIdGetWithHttpInfo
     *
     * Download the export results
     *
     * @param  string $taskId Export task ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1DocumentExportTaskIdGet'] to see the possible values for this operation
     *
     * @throws \SmartCat\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiIntegrationV1DocumentExportTaskIdGetWithHttpInfo($taskId, string $contentType = self::contentTypes['apiIntegrationV1DocumentExportTaskIdGet'][0])
    {
        $request = $this->apiIntegrationV1DocumentExportTaskIdGetRequest($taskId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiIntegrationV1DocumentExportTaskIdGetAsync
     *
     * Download the export results
     *
     * @param  string $taskId Export task ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1DocumentExportTaskIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiIntegrationV1DocumentExportTaskIdGetAsync($taskId, string $contentType = self::contentTypes['apiIntegrationV1DocumentExportTaskIdGet'][0])
    {
        return $this->apiIntegrationV1DocumentExportTaskIdGetAsyncWithHttpInfo($taskId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiIntegrationV1DocumentExportTaskIdGetAsyncWithHttpInfo
     *
     * Download the export results
     *
     * @param  string $taskId Export task ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1DocumentExportTaskIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiIntegrationV1DocumentExportTaskIdGetAsyncWithHttpInfo($taskId, string $contentType = self::contentTypes['apiIntegrationV1DocumentExportTaskIdGet'][0])
    {
        $returnType = '';
        $request = $this->apiIntegrationV1DocumentExportTaskIdGetRequest($taskId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiIntegrationV1DocumentExportTaskIdGet'
     *
     * @param  string $taskId Export task ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1DocumentExportTaskIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiIntegrationV1DocumentExportTaskIdGetRequest($taskId, string $contentType = self::contentTypes['apiIntegrationV1DocumentExportTaskIdGet'][0])
    {

        // verify the required parameter 'taskId' is set
        if ($taskId === null || (is_array($taskId) && count($taskId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $taskId when calling apiIntegrationV1DocumentExportTaskIdGet'
            );
        }


        $resourcePath = '/api/integration/v1/document/export/{taskId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($taskId !== null) {
            $resourcePath = str_replace(
                '{' . 'taskId' . '}',
                ObjectSerializer::toPathValue($taskId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
