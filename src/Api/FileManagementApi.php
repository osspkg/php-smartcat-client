<?php
/**
 * FileManagementApi
 * PHP version 7.4
 *
 * @category Class
 * @package  SmartCat
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Smartcat API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SmartCat\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use SmartCat\ApiException;
use SmartCat\Configuration;
use SmartCat\HeaderSelector;
use SmartCat\ObjectSerializer;

/**
 * FileManagementApi Class Doc Comment
 *
 * @category Class
 * @package  SmartCat
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class FileManagementApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'apiIntegrationV1FileManagementFileInfoListPrefixGet' => [
            'application/json',
        ],
        'apiIntegrationV1FileManagementFileInfoPathGet' => [
            'application/json',
        ],
        'apiIntegrationV1FileManagementFilePathDelete' => [
            'application/json',
        ],
        'apiIntegrationV1FileManagementFilePathGet' => [
            'application/json',
        ],
        'apiIntegrationV1FileManagementFilePathPut' => [
            'multipart/form-data',
        ],
        'apiIntegrationV1FileManagementFilesPathPut' => [
            'multipart/form-data',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation apiIntegrationV1FileManagementFileInfoListPrefixGet
     *
     * Get list of files whose path starts with given prefix
     *
     * @param  string $prefix Prefix for searching files (required)
     * @param  int $offset Amount of skipped files in pagination (optional, default to 0)
     * @param  int $limit Maximum number of returned files (optional, default to 500)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1FileManagementFileInfoListPrefixGet'] to see the possible values for this operation
     *
     * @throws \SmartCat\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SmartCat\Model\FileInfoModel[]
     */
    public function apiIntegrationV1FileManagementFileInfoListPrefixGet($prefix, $offset = 0, $limit = 500, string $contentType = self::contentTypes['apiIntegrationV1FileManagementFileInfoListPrefixGet'][0])
    {
        list($response) = $this->apiIntegrationV1FileManagementFileInfoListPrefixGetWithHttpInfo($prefix, $offset, $limit, $contentType);
        return $response;
    }

    /**
     * Operation apiIntegrationV1FileManagementFileInfoListPrefixGetWithHttpInfo
     *
     * Get list of files whose path starts with given prefix
     *
     * @param  string $prefix Prefix for searching files (required)
     * @param  int $offset Amount of skipped files in pagination (optional, default to 0)
     * @param  int $limit Maximum number of returned files (optional, default to 500)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1FileManagementFileInfoListPrefixGet'] to see the possible values for this operation
     *
     * @throws \SmartCat\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SmartCat\Model\FileInfoModel[], HTTP status code, HTTP response headers (array of strings)
     */
    public function apiIntegrationV1FileManagementFileInfoListPrefixGetWithHttpInfo($prefix, $offset = 0, $limit = 500, string $contentType = self::contentTypes['apiIntegrationV1FileManagementFileInfoListPrefixGet'][0])
    {
        $request = $this->apiIntegrationV1FileManagementFileInfoListPrefixGetRequest($prefix, $offset, $limit, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\SmartCat\Model\FileInfoModel[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SmartCat\Model\FileInfoModel[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SmartCat\Model\FileInfoModel[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\SmartCat\Model\FileInfoModel[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SmartCat\Model\FileInfoModel[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiIntegrationV1FileManagementFileInfoListPrefixGetAsync
     *
     * Get list of files whose path starts with given prefix
     *
     * @param  string $prefix Prefix for searching files (required)
     * @param  int $offset Amount of skipped files in pagination (optional, default to 0)
     * @param  int $limit Maximum number of returned files (optional, default to 500)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1FileManagementFileInfoListPrefixGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiIntegrationV1FileManagementFileInfoListPrefixGetAsync($prefix, $offset = 0, $limit = 500, string $contentType = self::contentTypes['apiIntegrationV1FileManagementFileInfoListPrefixGet'][0])
    {
        return $this->apiIntegrationV1FileManagementFileInfoListPrefixGetAsyncWithHttpInfo($prefix, $offset, $limit, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiIntegrationV1FileManagementFileInfoListPrefixGetAsyncWithHttpInfo
     *
     * Get list of files whose path starts with given prefix
     *
     * @param  string $prefix Prefix for searching files (required)
     * @param  int $offset Amount of skipped files in pagination (optional, default to 0)
     * @param  int $limit Maximum number of returned files (optional, default to 500)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1FileManagementFileInfoListPrefixGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiIntegrationV1FileManagementFileInfoListPrefixGetAsyncWithHttpInfo($prefix, $offset = 0, $limit = 500, string $contentType = self::contentTypes['apiIntegrationV1FileManagementFileInfoListPrefixGet'][0])
    {
        $returnType = '\SmartCat\Model\FileInfoModel[]';
        $request = $this->apiIntegrationV1FileManagementFileInfoListPrefixGetRequest($prefix, $offset, $limit, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiIntegrationV1FileManagementFileInfoListPrefixGet'
     *
     * @param  string $prefix Prefix for searching files (required)
     * @param  int $offset Amount of skipped files in pagination (optional, default to 0)
     * @param  int $limit Maximum number of returned files (optional, default to 500)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1FileManagementFileInfoListPrefixGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiIntegrationV1FileManagementFileInfoListPrefixGetRequest($prefix, $offset = 0, $limit = 500, string $contentType = self::contentTypes['apiIntegrationV1FileManagementFileInfoListPrefixGet'][0])
    {

        // verify the required parameter 'prefix' is set
        if ($prefix === null || (is_array($prefix) && count($prefix) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $prefix when calling apiIntegrationV1FileManagementFileInfoListPrefixGet'
            );
        }

        if ($offset !== null && $offset > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$offset" when calling FileManagementApi.apiIntegrationV1FileManagementFileInfoListPrefixGet, must be smaller than or equal to 2147483647.');
        }
        if ($offset !== null && $offset < 0) {
            throw new \InvalidArgumentException('invalid value for "$offset" when calling FileManagementApi.apiIntegrationV1FileManagementFileInfoListPrefixGet, must be bigger than or equal to 0.');
        }
        
        if ($limit !== null && $limit > 500) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling FileManagementApi.apiIntegrationV1FileManagementFileInfoListPrefixGet, must be smaller than or equal to 500.');
        }
        if ($limit !== null && $limit < 1) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling FileManagementApi.apiIntegrationV1FileManagementFileInfoListPrefixGet, must be bigger than or equal to 1.');
        }
        

        $resourcePath = '/api/integration/v1/file-management/file-info-list/{prefix}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($prefix !== null) {
            $resourcePath = str_replace(
                '{' . 'prefix' . '}',
                ObjectSerializer::toPathValue($prefix),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiIntegrationV1FileManagementFileInfoPathGet
     *
     * Get single file info by path
     *
     * @param  string $path Path of file (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1FileManagementFileInfoPathGet'] to see the possible values for this operation
     *
     * @throws \SmartCat\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SmartCat\Model\FileInfoModel
     */
    public function apiIntegrationV1FileManagementFileInfoPathGet($path, string $contentType = self::contentTypes['apiIntegrationV1FileManagementFileInfoPathGet'][0])
    {
        list($response) = $this->apiIntegrationV1FileManagementFileInfoPathGetWithHttpInfo($path, $contentType);
        return $response;
    }

    /**
     * Operation apiIntegrationV1FileManagementFileInfoPathGetWithHttpInfo
     *
     * Get single file info by path
     *
     * @param  string $path Path of file (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1FileManagementFileInfoPathGet'] to see the possible values for this operation
     *
     * @throws \SmartCat\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SmartCat\Model\FileInfoModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiIntegrationV1FileManagementFileInfoPathGetWithHttpInfo($path, string $contentType = self::contentTypes['apiIntegrationV1FileManagementFileInfoPathGet'][0])
    {
        $request = $this->apiIntegrationV1FileManagementFileInfoPathGetRequest($path, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\SmartCat\Model\FileInfoModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SmartCat\Model\FileInfoModel' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SmartCat\Model\FileInfoModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\SmartCat\Model\FileInfoModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SmartCat\Model\FileInfoModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiIntegrationV1FileManagementFileInfoPathGetAsync
     *
     * Get single file info by path
     *
     * @param  string $path Path of file (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1FileManagementFileInfoPathGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiIntegrationV1FileManagementFileInfoPathGetAsync($path, string $contentType = self::contentTypes['apiIntegrationV1FileManagementFileInfoPathGet'][0])
    {
        return $this->apiIntegrationV1FileManagementFileInfoPathGetAsyncWithHttpInfo($path, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiIntegrationV1FileManagementFileInfoPathGetAsyncWithHttpInfo
     *
     * Get single file info by path
     *
     * @param  string $path Path of file (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1FileManagementFileInfoPathGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiIntegrationV1FileManagementFileInfoPathGetAsyncWithHttpInfo($path, string $contentType = self::contentTypes['apiIntegrationV1FileManagementFileInfoPathGet'][0])
    {
        $returnType = '\SmartCat\Model\FileInfoModel';
        $request = $this->apiIntegrationV1FileManagementFileInfoPathGetRequest($path, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiIntegrationV1FileManagementFileInfoPathGet'
     *
     * @param  string $path Path of file (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1FileManagementFileInfoPathGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiIntegrationV1FileManagementFileInfoPathGetRequest($path, string $contentType = self::contentTypes['apiIntegrationV1FileManagementFileInfoPathGet'][0])
    {

        // verify the required parameter 'path' is set
        if ($path === null || (is_array($path) && count($path) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $path when calling apiIntegrationV1FileManagementFileInfoPathGet'
            );
        }


        $resourcePath = '/api/integration/v1/file-management/file-info/{path}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($path !== null) {
            $resourcePath = str_replace(
                '{' . 'path' . '}',
                ObjectSerializer::toPathValue($path),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiIntegrationV1FileManagementFilePathDelete
     *
     * Delete a file by path
     *
     * @param  string $path Path of file (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1FileManagementFilePathDelete'] to see the possible values for this operation
     *
     * @throws \SmartCat\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiIntegrationV1FileManagementFilePathDelete($path, string $contentType = self::contentTypes['apiIntegrationV1FileManagementFilePathDelete'][0])
    {
        $this->apiIntegrationV1FileManagementFilePathDeleteWithHttpInfo($path, $contentType);
    }

    /**
     * Operation apiIntegrationV1FileManagementFilePathDeleteWithHttpInfo
     *
     * Delete a file by path
     *
     * @param  string $path Path of file (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1FileManagementFilePathDelete'] to see the possible values for this operation
     *
     * @throws \SmartCat\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiIntegrationV1FileManagementFilePathDeleteWithHttpInfo($path, string $contentType = self::contentTypes['apiIntegrationV1FileManagementFilePathDelete'][0])
    {
        $request = $this->apiIntegrationV1FileManagementFilePathDeleteRequest($path, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiIntegrationV1FileManagementFilePathDeleteAsync
     *
     * Delete a file by path
     *
     * @param  string $path Path of file (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1FileManagementFilePathDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiIntegrationV1FileManagementFilePathDeleteAsync($path, string $contentType = self::contentTypes['apiIntegrationV1FileManagementFilePathDelete'][0])
    {
        return $this->apiIntegrationV1FileManagementFilePathDeleteAsyncWithHttpInfo($path, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiIntegrationV1FileManagementFilePathDeleteAsyncWithHttpInfo
     *
     * Delete a file by path
     *
     * @param  string $path Path of file (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1FileManagementFilePathDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiIntegrationV1FileManagementFilePathDeleteAsyncWithHttpInfo($path, string $contentType = self::contentTypes['apiIntegrationV1FileManagementFilePathDelete'][0])
    {
        $returnType = '';
        $request = $this->apiIntegrationV1FileManagementFilePathDeleteRequest($path, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiIntegrationV1FileManagementFilePathDelete'
     *
     * @param  string $path Path of file (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1FileManagementFilePathDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiIntegrationV1FileManagementFilePathDeleteRequest($path, string $contentType = self::contentTypes['apiIntegrationV1FileManagementFilePathDelete'][0])
    {

        // verify the required parameter 'path' is set
        if ($path === null || (is_array($path) && count($path) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $path when calling apiIntegrationV1FileManagementFilePathDelete'
            );
        }


        $resourcePath = '/api/integration/v1/file-management/file/{path}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($path !== null) {
            $resourcePath = str_replace(
                '{' . 'path' . '}',
                ObjectSerializer::toPathValue($path),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiIntegrationV1FileManagementFilePathGet
     *
     * Download a file by path
     *
     * @param  string $path Path of file (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1FileManagementFilePathGet'] to see the possible values for this operation
     *
     * @throws \SmartCat\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiIntegrationV1FileManagementFilePathGet($path, string $contentType = self::contentTypes['apiIntegrationV1FileManagementFilePathGet'][0])
    {
        $this->apiIntegrationV1FileManagementFilePathGetWithHttpInfo($path, $contentType);
    }

    /**
     * Operation apiIntegrationV1FileManagementFilePathGetWithHttpInfo
     *
     * Download a file by path
     *
     * @param  string $path Path of file (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1FileManagementFilePathGet'] to see the possible values for this operation
     *
     * @throws \SmartCat\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiIntegrationV1FileManagementFilePathGetWithHttpInfo($path, string $contentType = self::contentTypes['apiIntegrationV1FileManagementFilePathGet'][0])
    {
        $request = $this->apiIntegrationV1FileManagementFilePathGetRequest($path, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiIntegrationV1FileManagementFilePathGetAsync
     *
     * Download a file by path
     *
     * @param  string $path Path of file (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1FileManagementFilePathGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiIntegrationV1FileManagementFilePathGetAsync($path, string $contentType = self::contentTypes['apiIntegrationV1FileManagementFilePathGet'][0])
    {
        return $this->apiIntegrationV1FileManagementFilePathGetAsyncWithHttpInfo($path, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiIntegrationV1FileManagementFilePathGetAsyncWithHttpInfo
     *
     * Download a file by path
     *
     * @param  string $path Path of file (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1FileManagementFilePathGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiIntegrationV1FileManagementFilePathGetAsyncWithHttpInfo($path, string $contentType = self::contentTypes['apiIntegrationV1FileManagementFilePathGet'][0])
    {
        $returnType = '';
        $request = $this->apiIntegrationV1FileManagementFilePathGetRequest($path, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiIntegrationV1FileManagementFilePathGet'
     *
     * @param  string $path Path of file (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1FileManagementFilePathGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiIntegrationV1FileManagementFilePathGetRequest($path, string $contentType = self::contentTypes['apiIntegrationV1FileManagementFilePathGet'][0])
    {

        // verify the required parameter 'path' is set
        if ($path === null || (is_array($path) && count($path) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $path when calling apiIntegrationV1FileManagementFilePathGet'
            );
        }


        $resourcePath = '/api/integration/v1/file-management/file/{path}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($path !== null) {
            $resourcePath = str_replace(
                '{' . 'path' . '}',
                ObjectSerializer::toPathValue($path),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiIntegrationV1FileManagementFilePathPut
     *
     * Upload file to a specified path in storage
     *
     * @param  \SplFileObject $file file (required)
     * @param  string $path Path of file (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1FileManagementFilePathPut'] to see the possible values for this operation
     *
     * @throws \SmartCat\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SmartCat\Model\FileInfoModel
     */
    public function apiIntegrationV1FileManagementFilePathPut($file, $path, string $contentType = self::contentTypes['apiIntegrationV1FileManagementFilePathPut'][0])
    {
        list($response) = $this->apiIntegrationV1FileManagementFilePathPutWithHttpInfo($file, $path, $contentType);
        return $response;
    }

    /**
     * Operation apiIntegrationV1FileManagementFilePathPutWithHttpInfo
     *
     * Upload file to a specified path in storage
     *
     * @param  \SplFileObject $file (required)
     * @param  string $path Path of file (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1FileManagementFilePathPut'] to see the possible values for this operation
     *
     * @throws \SmartCat\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SmartCat\Model\FileInfoModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiIntegrationV1FileManagementFilePathPutWithHttpInfo($file, $path, string $contentType = self::contentTypes['apiIntegrationV1FileManagementFilePathPut'][0])
    {
        $request = $this->apiIntegrationV1FileManagementFilePathPutRequest($file, $path, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\SmartCat\Model\FileInfoModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SmartCat\Model\FileInfoModel' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SmartCat\Model\FileInfoModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\SmartCat\Model\FileInfoModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SmartCat\Model\FileInfoModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiIntegrationV1FileManagementFilePathPutAsync
     *
     * Upload file to a specified path in storage
     *
     * @param  \SplFileObject $file (required)
     * @param  string $path Path of file (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1FileManagementFilePathPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiIntegrationV1FileManagementFilePathPutAsync($file, $path, string $contentType = self::contentTypes['apiIntegrationV1FileManagementFilePathPut'][0])
    {
        return $this->apiIntegrationV1FileManagementFilePathPutAsyncWithHttpInfo($file, $path, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiIntegrationV1FileManagementFilePathPutAsyncWithHttpInfo
     *
     * Upload file to a specified path in storage
     *
     * @param  \SplFileObject $file (required)
     * @param  string $path Path of file (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1FileManagementFilePathPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiIntegrationV1FileManagementFilePathPutAsyncWithHttpInfo($file, $path, string $contentType = self::contentTypes['apiIntegrationV1FileManagementFilePathPut'][0])
    {
        $returnType = '\SmartCat\Model\FileInfoModel';
        $request = $this->apiIntegrationV1FileManagementFilePathPutRequest($file, $path, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiIntegrationV1FileManagementFilePathPut'
     *
     * @param  \SplFileObject $file (required)
     * @param  string $path Path of file (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1FileManagementFilePathPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiIntegrationV1FileManagementFilePathPutRequest($file, $path, string $contentType = self::contentTypes['apiIntegrationV1FileManagementFilePathPut'][0])
    {

        // verify the required parameter 'file' is set
        if ($file === null || (is_array($file) && count($file) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $file when calling apiIntegrationV1FileManagementFilePathPut'
            );
        }

        // verify the required parameter 'path' is set
        if ($path === null || (is_array($path) && count($path) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $path when calling apiIntegrationV1FileManagementFilePathPut'
            );
        }


        $resourcePath = '/api/integration/v1/file-management/file/{path}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($path !== null) {
            $resourcePath = str_replace(
                '{' . 'path' . '}',
                ObjectSerializer::toPathValue($path),
                $resourcePath
            );
        }

        // form params
        if ($file !== null) {
            $multipart = true;
            $formParams['file'] = [];
            $paramFiles = is_array($file) ? $file : [$file];
            foreach ($paramFiles as $paramFile) {
                $formParams['file'][] = \GuzzleHttp\Psr7\Utils::tryFopen(
                    ObjectSerializer::toFormValue($paramFile),
                    'rb'
                );
            }
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiIntegrationV1FileManagementFilesPathPut
     *
     * Upload multiple files to a specified path in storage
     *
     * @param  \SplFileObject[] $files files (required)
     * @param  string $path Prefix for uploaded files (required)
     * @param  bool $unzip Extract files from uploaded zip file(-s) instead of saving zip as-is (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1FileManagementFilesPathPut'] to see the possible values for this operation
     *
     * @throws \SmartCat\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SmartCat\Model\FileInfoModel[]
     */
    public function apiIntegrationV1FileManagementFilesPathPut($files, $path, $unzip = false, string $contentType = self::contentTypes['apiIntegrationV1FileManagementFilesPathPut'][0])
    {
        list($response) = $this->apiIntegrationV1FileManagementFilesPathPutWithHttpInfo($files, $path, $unzip, $contentType);
        return $response;
    }

    /**
     * Operation apiIntegrationV1FileManagementFilesPathPutWithHttpInfo
     *
     * Upload multiple files to a specified path in storage
     *
     * @param  \SplFileObject[] $files (required)
     * @param  string $path Prefix for uploaded files (required)
     * @param  bool $unzip Extract files from uploaded zip file(-s) instead of saving zip as-is (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1FileManagementFilesPathPut'] to see the possible values for this operation
     *
     * @throws \SmartCat\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SmartCat\Model\FileInfoModel[], HTTP status code, HTTP response headers (array of strings)
     */
    public function apiIntegrationV1FileManagementFilesPathPutWithHttpInfo($files, $path, $unzip = false, string $contentType = self::contentTypes['apiIntegrationV1FileManagementFilesPathPut'][0])
    {
        $request = $this->apiIntegrationV1FileManagementFilesPathPutRequest($files, $path, $unzip, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\SmartCat\Model\FileInfoModel[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SmartCat\Model\FileInfoModel[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SmartCat\Model\FileInfoModel[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\SmartCat\Model\FileInfoModel[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SmartCat\Model\FileInfoModel[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiIntegrationV1FileManagementFilesPathPutAsync
     *
     * Upload multiple files to a specified path in storage
     *
     * @param  \SplFileObject[] $files (required)
     * @param  string $path Prefix for uploaded files (required)
     * @param  bool $unzip Extract files from uploaded zip file(-s) instead of saving zip as-is (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1FileManagementFilesPathPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiIntegrationV1FileManagementFilesPathPutAsync($files, $path, $unzip = false, string $contentType = self::contentTypes['apiIntegrationV1FileManagementFilesPathPut'][0])
    {
        return $this->apiIntegrationV1FileManagementFilesPathPutAsyncWithHttpInfo($files, $path, $unzip, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiIntegrationV1FileManagementFilesPathPutAsyncWithHttpInfo
     *
     * Upload multiple files to a specified path in storage
     *
     * @param  \SplFileObject[] $files (required)
     * @param  string $path Prefix for uploaded files (required)
     * @param  bool $unzip Extract files from uploaded zip file(-s) instead of saving zip as-is (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1FileManagementFilesPathPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiIntegrationV1FileManagementFilesPathPutAsyncWithHttpInfo($files, $path, $unzip = false, string $contentType = self::contentTypes['apiIntegrationV1FileManagementFilesPathPut'][0])
    {
        $returnType = '\SmartCat\Model\FileInfoModel[]';
        $request = $this->apiIntegrationV1FileManagementFilesPathPutRequest($files, $path, $unzip, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiIntegrationV1FileManagementFilesPathPut'
     *
     * @param  \SplFileObject[] $files (required)
     * @param  string $path Prefix for uploaded files (required)
     * @param  bool $unzip Extract files from uploaded zip file(-s) instead of saving zip as-is (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1FileManagementFilesPathPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiIntegrationV1FileManagementFilesPathPutRequest($files, $path, $unzip = false, string $contentType = self::contentTypes['apiIntegrationV1FileManagementFilesPathPut'][0])
    {

        // verify the required parameter 'files' is set
        if ($files === null || (is_array($files) && count($files) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $files when calling apiIntegrationV1FileManagementFilesPathPut'
            );
        }

        // verify the required parameter 'path' is set
        if ($path === null || (is_array($path) && count($path) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $path when calling apiIntegrationV1FileManagementFilesPathPut'
            );
        }



        $resourcePath = '/api/integration/v1/file-management/files/{path}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $unzip,
            'unzip', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($path !== null) {
            $resourcePath = str_replace(
                '{' . 'path' . '}',
                ObjectSerializer::toPathValue($path),
                $resourcePath
            );
        }

        // form params
        if ($files !== null) {
            $multipart = true;
            $formParams['files'] = [];
            $paramFiles = is_array($files) ? $files : [$files];
            foreach ($paramFiles as $paramFile) {
                $formParams['files'][] = \GuzzleHttp\Psr7\Utils::tryFopen(
                    ObjectSerializer::toFormValue($paramFile),
                    'rb'
                );
            }
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
