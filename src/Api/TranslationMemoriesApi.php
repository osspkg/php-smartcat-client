<?php
/**
 * TranslationMemoriesApi
 * PHP version 7.4
 *
 * @category Class
 * @package  SmartCat
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Smartcat API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SmartCat\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use SmartCat\ApiException;
use SmartCat\Configuration;
use SmartCat\HeaderSelector;
use SmartCat\ObjectSerializer;

/**
 * TranslationMemoriesApi Class Doc Comment
 *
 * @category Class
 * @package  SmartCat
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class TranslationMemoriesApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'apiIntegrationV1TranslationmemoryGet' => [
            'application/json',
        ],
        'apiIntegrationV1TranslationmemoryMatchesPost' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'apiIntegrationV1TranslationmemoryPost' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'apiIntegrationV1TranslationmemoryTaskGet' => [
            'application/json',
        ],
        'apiIntegrationV1TranslationmemoryTaskTaskIdDelete' => [
            'application/json',
        ],
        'apiIntegrationV1TranslationmemoryTmIdDelete' => [
            'application/json',
        ],
        'apiIntegrationV1TranslationmemoryTmIdFileGet' => [
            'application/json',
        ],
        'apiIntegrationV1TranslationmemoryTmIdGet' => [
            'application/json',
        ],
        'apiIntegrationV1TranslationmemoryTmIdPost' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'apiIntegrationV1TranslationmemoryTmIdTargetsPut' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation apiIntegrationV1TranslationmemoryGet
     *
     * Fetch the available TMs filtered per account
     *
     * @param  string $lastProcessedId The latest ID fetched by the previous query (required)
     * @param  int $batchSize Required size of the returned batch (required)
     * @param  string $sourceLanguage Source language (optional) (optional)
     * @param  string $targetLanguage Target language (optional) (optional)
     * @param  string $clientId Client ID (optional) (optional)
     * @param  string $searchName TM partial name (optional) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1TranslationmemoryGet'] to see the possible values for this operation
     *
     * @throws \SmartCat\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SmartCat\Model\TranslationMemoryModel[]
     */
    public function apiIntegrationV1TranslationmemoryGet($lastProcessedId, $batchSize, $sourceLanguage = null, $targetLanguage = null, $clientId = null, $searchName = null, string $contentType = self::contentTypes['apiIntegrationV1TranslationmemoryGet'][0])
    {
        list($response) = $this->apiIntegrationV1TranslationmemoryGetWithHttpInfo($lastProcessedId, $batchSize, $sourceLanguage, $targetLanguage, $clientId, $searchName, $contentType);
        return $response;
    }

    /**
     * Operation apiIntegrationV1TranslationmemoryGetWithHttpInfo
     *
     * Fetch the available TMs filtered per account
     *
     * @param  string $lastProcessedId The latest ID fetched by the previous query (required)
     * @param  int $batchSize Required size of the returned batch (required)
     * @param  string $sourceLanguage Source language (optional) (optional)
     * @param  string $targetLanguage Target language (optional) (optional)
     * @param  string $clientId Client ID (optional) (optional)
     * @param  string $searchName TM partial name (optional) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1TranslationmemoryGet'] to see the possible values for this operation
     *
     * @throws \SmartCat\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SmartCat\Model\TranslationMemoryModel[], HTTP status code, HTTP response headers (array of strings)
     */
    public function apiIntegrationV1TranslationmemoryGetWithHttpInfo($lastProcessedId, $batchSize, $sourceLanguage = null, $targetLanguage = null, $clientId = null, $searchName = null, string $contentType = self::contentTypes['apiIntegrationV1TranslationmemoryGet'][0])
    {
        $request = $this->apiIntegrationV1TranslationmemoryGetRequest($lastProcessedId, $batchSize, $sourceLanguage, $targetLanguage, $clientId, $searchName, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\SmartCat\Model\TranslationMemoryModel[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SmartCat\Model\TranslationMemoryModel[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SmartCat\Model\TranslationMemoryModel[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\SmartCat\Model\TranslationMemoryModel[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SmartCat\Model\TranslationMemoryModel[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiIntegrationV1TranslationmemoryGetAsync
     *
     * Fetch the available TMs filtered per account
     *
     * @param  string $lastProcessedId The latest ID fetched by the previous query (required)
     * @param  int $batchSize Required size of the returned batch (required)
     * @param  string $sourceLanguage Source language (optional) (optional)
     * @param  string $targetLanguage Target language (optional) (optional)
     * @param  string $clientId Client ID (optional) (optional)
     * @param  string $searchName TM partial name (optional) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1TranslationmemoryGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiIntegrationV1TranslationmemoryGetAsync($lastProcessedId, $batchSize, $sourceLanguage = null, $targetLanguage = null, $clientId = null, $searchName = null, string $contentType = self::contentTypes['apiIntegrationV1TranslationmemoryGet'][0])
    {
        return $this->apiIntegrationV1TranslationmemoryGetAsyncWithHttpInfo($lastProcessedId, $batchSize, $sourceLanguage, $targetLanguage, $clientId, $searchName, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiIntegrationV1TranslationmemoryGetAsyncWithHttpInfo
     *
     * Fetch the available TMs filtered per account
     *
     * @param  string $lastProcessedId The latest ID fetched by the previous query (required)
     * @param  int $batchSize Required size of the returned batch (required)
     * @param  string $sourceLanguage Source language (optional) (optional)
     * @param  string $targetLanguage Target language (optional) (optional)
     * @param  string $clientId Client ID (optional) (optional)
     * @param  string $searchName TM partial name (optional) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1TranslationmemoryGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiIntegrationV1TranslationmemoryGetAsyncWithHttpInfo($lastProcessedId, $batchSize, $sourceLanguage = null, $targetLanguage = null, $clientId = null, $searchName = null, string $contentType = self::contentTypes['apiIntegrationV1TranslationmemoryGet'][0])
    {
        $returnType = '\SmartCat\Model\TranslationMemoryModel[]';
        $request = $this->apiIntegrationV1TranslationmemoryGetRequest($lastProcessedId, $batchSize, $sourceLanguage, $targetLanguage, $clientId, $searchName, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiIntegrationV1TranslationmemoryGet'
     *
     * @param  string $lastProcessedId The latest ID fetched by the previous query (required)
     * @param  int $batchSize Required size of the returned batch (required)
     * @param  string $sourceLanguage Source language (optional) (optional)
     * @param  string $targetLanguage Target language (optional) (optional)
     * @param  string $clientId Client ID (optional) (optional)
     * @param  string $searchName TM partial name (optional) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1TranslationmemoryGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiIntegrationV1TranslationmemoryGetRequest($lastProcessedId, $batchSize, $sourceLanguage = null, $targetLanguage = null, $clientId = null, $searchName = null, string $contentType = self::contentTypes['apiIntegrationV1TranslationmemoryGet'][0])
    {

        // verify the required parameter 'lastProcessedId' is set
        if ($lastProcessedId === null || (is_array($lastProcessedId) && count($lastProcessedId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $lastProcessedId when calling apiIntegrationV1TranslationmemoryGet'
            );
        }

        // verify the required parameter 'batchSize' is set
        if ($batchSize === null || (is_array($batchSize) && count($batchSize) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $batchSize when calling apiIntegrationV1TranslationmemoryGet'
            );
        }






        $resourcePath = '/api/integration/v1/translationmemory';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $lastProcessedId,
            'lastProcessedId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $batchSize,
            'batchSize', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sourceLanguage,
            'sourceLanguage', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $targetLanguage,
            'targetLanguage', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $clientId,
            'clientId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $searchName,
            'searchName', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiIntegrationV1TranslationmemoryMatchesPost
     *
     * Fetch matches from the specified TM
     *
     * @param  \SmartCat\Model\TMMatchesRequest $tMMatchesRequest TM match segments request (required)
     * @param  string $tmId ID of the TM for the match search (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1TranslationmemoryMatchesPost'] to see the possible values for this operation
     *
     * @throws \SmartCat\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SmartCat\Model\SegmentWithMatchesModel
     */
    public function apiIntegrationV1TranslationmemoryMatchesPost($tMMatchesRequest, $tmId, string $contentType = self::contentTypes['apiIntegrationV1TranslationmemoryMatchesPost'][0])
    {
        list($response) = $this->apiIntegrationV1TranslationmemoryMatchesPostWithHttpInfo($tMMatchesRequest, $tmId, $contentType);
        return $response;
    }

    /**
     * Operation apiIntegrationV1TranslationmemoryMatchesPostWithHttpInfo
     *
     * Fetch matches from the specified TM
     *
     * @param  \SmartCat\Model\TMMatchesRequest $tMMatchesRequest TM match segments request (required)
     * @param  string $tmId ID of the TM for the match search (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1TranslationmemoryMatchesPost'] to see the possible values for this operation
     *
     * @throws \SmartCat\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SmartCat\Model\SegmentWithMatchesModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiIntegrationV1TranslationmemoryMatchesPostWithHttpInfo($tMMatchesRequest, $tmId, string $contentType = self::contentTypes['apiIntegrationV1TranslationmemoryMatchesPost'][0])
    {
        $request = $this->apiIntegrationV1TranslationmemoryMatchesPostRequest($tMMatchesRequest, $tmId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\SmartCat\Model\SegmentWithMatchesModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SmartCat\Model\SegmentWithMatchesModel' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SmartCat\Model\SegmentWithMatchesModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\SmartCat\Model\SegmentWithMatchesModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SmartCat\Model\SegmentWithMatchesModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiIntegrationV1TranslationmemoryMatchesPostAsync
     *
     * Fetch matches from the specified TM
     *
     * @param  \SmartCat\Model\TMMatchesRequest $tMMatchesRequest TM match segments request (required)
     * @param  string $tmId ID of the TM for the match search (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1TranslationmemoryMatchesPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiIntegrationV1TranslationmemoryMatchesPostAsync($tMMatchesRequest, $tmId, string $contentType = self::contentTypes['apiIntegrationV1TranslationmemoryMatchesPost'][0])
    {
        return $this->apiIntegrationV1TranslationmemoryMatchesPostAsyncWithHttpInfo($tMMatchesRequest, $tmId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiIntegrationV1TranslationmemoryMatchesPostAsyncWithHttpInfo
     *
     * Fetch matches from the specified TM
     *
     * @param  \SmartCat\Model\TMMatchesRequest $tMMatchesRequest TM match segments request (required)
     * @param  string $tmId ID of the TM for the match search (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1TranslationmemoryMatchesPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiIntegrationV1TranslationmemoryMatchesPostAsyncWithHttpInfo($tMMatchesRequest, $tmId, string $contentType = self::contentTypes['apiIntegrationV1TranslationmemoryMatchesPost'][0])
    {
        $returnType = '\SmartCat\Model\SegmentWithMatchesModel';
        $request = $this->apiIntegrationV1TranslationmemoryMatchesPostRequest($tMMatchesRequest, $tmId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiIntegrationV1TranslationmemoryMatchesPost'
     *
     * @param  \SmartCat\Model\TMMatchesRequest $tMMatchesRequest TM match segments request (required)
     * @param  string $tmId ID of the TM for the match search (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1TranslationmemoryMatchesPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiIntegrationV1TranslationmemoryMatchesPostRequest($tMMatchesRequest, $tmId, string $contentType = self::contentTypes['apiIntegrationV1TranslationmemoryMatchesPost'][0])
    {

        // verify the required parameter 'tMMatchesRequest' is set
        if ($tMMatchesRequest === null || (is_array($tMMatchesRequest) && count($tMMatchesRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tMMatchesRequest when calling apiIntegrationV1TranslationmemoryMatchesPost'
            );
        }

        // verify the required parameter 'tmId' is set
        if ($tmId === null || (is_array($tmId) && count($tmId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tmId when calling apiIntegrationV1TranslationmemoryMatchesPost'
            );
        }


        $resourcePath = '/api/integration/v1/translationmemory/matches';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tmId,
            'tmId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($tMMatchesRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($tMMatchesRequest));
            } else {
                $httpBody = $tMMatchesRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiIntegrationV1TranslationmemoryPost
     *
     * Create an empty TM
     *
     * @param  \SmartCat\Model\CreateTranslationMemoryModel $createTranslationMemoryModel TM creation model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1TranslationmemoryPost'] to see the possible values for this operation
     *
     * @throws \SmartCat\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiIntegrationV1TranslationmemoryPost($createTranslationMemoryModel, string $contentType = self::contentTypes['apiIntegrationV1TranslationmemoryPost'][0])
    {
        $this->apiIntegrationV1TranslationmemoryPostWithHttpInfo($createTranslationMemoryModel, $contentType);
    }

    /**
     * Operation apiIntegrationV1TranslationmemoryPostWithHttpInfo
     *
     * Create an empty TM
     *
     * @param  \SmartCat\Model\CreateTranslationMemoryModel $createTranslationMemoryModel TM creation model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1TranslationmemoryPost'] to see the possible values for this operation
     *
     * @throws \SmartCat\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiIntegrationV1TranslationmemoryPostWithHttpInfo($createTranslationMemoryModel, string $contentType = self::contentTypes['apiIntegrationV1TranslationmemoryPost'][0])
    {
        $request = $this->apiIntegrationV1TranslationmemoryPostRequest($createTranslationMemoryModel, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiIntegrationV1TranslationmemoryPostAsync
     *
     * Create an empty TM
     *
     * @param  \SmartCat\Model\CreateTranslationMemoryModel $createTranslationMemoryModel TM creation model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1TranslationmemoryPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiIntegrationV1TranslationmemoryPostAsync($createTranslationMemoryModel, string $contentType = self::contentTypes['apiIntegrationV1TranslationmemoryPost'][0])
    {
        return $this->apiIntegrationV1TranslationmemoryPostAsyncWithHttpInfo($createTranslationMemoryModel, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiIntegrationV1TranslationmemoryPostAsyncWithHttpInfo
     *
     * Create an empty TM
     *
     * @param  \SmartCat\Model\CreateTranslationMemoryModel $createTranslationMemoryModel TM creation model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1TranslationmemoryPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiIntegrationV1TranslationmemoryPostAsyncWithHttpInfo($createTranslationMemoryModel, string $contentType = self::contentTypes['apiIntegrationV1TranslationmemoryPost'][0])
    {
        $returnType = '';
        $request = $this->apiIntegrationV1TranslationmemoryPostRequest($createTranslationMemoryModel, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiIntegrationV1TranslationmemoryPost'
     *
     * @param  \SmartCat\Model\CreateTranslationMemoryModel $createTranslationMemoryModel TM creation model (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1TranslationmemoryPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiIntegrationV1TranslationmemoryPostRequest($createTranslationMemoryModel, string $contentType = self::contentTypes['apiIntegrationV1TranslationmemoryPost'][0])
    {

        // verify the required parameter 'createTranslationMemoryModel' is set
        if ($createTranslationMemoryModel === null || (is_array($createTranslationMemoryModel) && count($createTranslationMemoryModel) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $createTranslationMemoryModel when calling apiIntegrationV1TranslationmemoryPost'
            );
        }


        $resourcePath = '/api/integration/v1/translationmemory';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($createTranslationMemoryModel)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($createTranslationMemoryModel));
            } else {
                $httpBody = $createTranslationMemoryModel;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiIntegrationV1TranslationmemoryTaskGet
     *
     * Fetch a collection of TMX file import tasks
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1TranslationmemoryTaskGet'] to see the possible values for this operation
     *
     * @throws \SmartCat\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SmartCat\Model\TMImportTaskModel[]
     */
    public function apiIntegrationV1TranslationmemoryTaskGet(string $contentType = self::contentTypes['apiIntegrationV1TranslationmemoryTaskGet'][0])
    {
        list($response) = $this->apiIntegrationV1TranslationmemoryTaskGetWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation apiIntegrationV1TranslationmemoryTaskGetWithHttpInfo
     *
     * Fetch a collection of TMX file import tasks
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1TranslationmemoryTaskGet'] to see the possible values for this operation
     *
     * @throws \SmartCat\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SmartCat\Model\TMImportTaskModel[], HTTP status code, HTTP response headers (array of strings)
     */
    public function apiIntegrationV1TranslationmemoryTaskGetWithHttpInfo(string $contentType = self::contentTypes['apiIntegrationV1TranslationmemoryTaskGet'][0])
    {
        $request = $this->apiIntegrationV1TranslationmemoryTaskGetRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\SmartCat\Model\TMImportTaskModel[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SmartCat\Model\TMImportTaskModel[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SmartCat\Model\TMImportTaskModel[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\SmartCat\Model\TMImportTaskModel[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SmartCat\Model\TMImportTaskModel[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiIntegrationV1TranslationmemoryTaskGetAsync
     *
     * Fetch a collection of TMX file import tasks
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1TranslationmemoryTaskGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiIntegrationV1TranslationmemoryTaskGetAsync(string $contentType = self::contentTypes['apiIntegrationV1TranslationmemoryTaskGet'][0])
    {
        return $this->apiIntegrationV1TranslationmemoryTaskGetAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiIntegrationV1TranslationmemoryTaskGetAsyncWithHttpInfo
     *
     * Fetch a collection of TMX file import tasks
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1TranslationmemoryTaskGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiIntegrationV1TranslationmemoryTaskGetAsyncWithHttpInfo(string $contentType = self::contentTypes['apiIntegrationV1TranslationmemoryTaskGet'][0])
    {
        $returnType = '\SmartCat\Model\TMImportTaskModel[]';
        $request = $this->apiIntegrationV1TranslationmemoryTaskGetRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiIntegrationV1TranslationmemoryTaskGet'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1TranslationmemoryTaskGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiIntegrationV1TranslationmemoryTaskGetRequest(string $contentType = self::contentTypes['apiIntegrationV1TranslationmemoryTaskGet'][0])
    {


        $resourcePath = '/api/integration/v1/translationmemory/task';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiIntegrationV1TranslationmemoryTaskTaskIdDelete
     *
     * Removes the specified import task
     *
     * @param  string $taskId ID of a task to be imported to the TM (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1TranslationmemoryTaskTaskIdDelete'] to see the possible values for this operation
     *
     * @throws \SmartCat\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiIntegrationV1TranslationmemoryTaskTaskIdDelete($taskId, string $contentType = self::contentTypes['apiIntegrationV1TranslationmemoryTaskTaskIdDelete'][0])
    {
        $this->apiIntegrationV1TranslationmemoryTaskTaskIdDeleteWithHttpInfo($taskId, $contentType);
    }

    /**
     * Operation apiIntegrationV1TranslationmemoryTaskTaskIdDeleteWithHttpInfo
     *
     * Removes the specified import task
     *
     * @param  string $taskId ID of a task to be imported to the TM (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1TranslationmemoryTaskTaskIdDelete'] to see the possible values for this operation
     *
     * @throws \SmartCat\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiIntegrationV1TranslationmemoryTaskTaskIdDeleteWithHttpInfo($taskId, string $contentType = self::contentTypes['apiIntegrationV1TranslationmemoryTaskTaskIdDelete'][0])
    {
        $request = $this->apiIntegrationV1TranslationmemoryTaskTaskIdDeleteRequest($taskId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiIntegrationV1TranslationmemoryTaskTaskIdDeleteAsync
     *
     * Removes the specified import task
     *
     * @param  string $taskId ID of a task to be imported to the TM (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1TranslationmemoryTaskTaskIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiIntegrationV1TranslationmemoryTaskTaskIdDeleteAsync($taskId, string $contentType = self::contentTypes['apiIntegrationV1TranslationmemoryTaskTaskIdDelete'][0])
    {
        return $this->apiIntegrationV1TranslationmemoryTaskTaskIdDeleteAsyncWithHttpInfo($taskId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiIntegrationV1TranslationmemoryTaskTaskIdDeleteAsyncWithHttpInfo
     *
     * Removes the specified import task
     *
     * @param  string $taskId ID of a task to be imported to the TM (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1TranslationmemoryTaskTaskIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiIntegrationV1TranslationmemoryTaskTaskIdDeleteAsyncWithHttpInfo($taskId, string $contentType = self::contentTypes['apiIntegrationV1TranslationmemoryTaskTaskIdDelete'][0])
    {
        $returnType = '';
        $request = $this->apiIntegrationV1TranslationmemoryTaskTaskIdDeleteRequest($taskId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiIntegrationV1TranslationmemoryTaskTaskIdDelete'
     *
     * @param  string $taskId ID of a task to be imported to the TM (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1TranslationmemoryTaskTaskIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiIntegrationV1TranslationmemoryTaskTaskIdDeleteRequest($taskId, string $contentType = self::contentTypes['apiIntegrationV1TranslationmemoryTaskTaskIdDelete'][0])
    {

        // verify the required parameter 'taskId' is set
        if ($taskId === null || (is_array($taskId) && count($taskId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $taskId when calling apiIntegrationV1TranslationmemoryTaskTaskIdDelete'
            );
        }


        $resourcePath = '/api/integration/v1/translationmemory/task/{taskId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($taskId !== null) {
            $resourcePath = str_replace(
                '{' . 'taskId' . '}',
                ObjectSerializer::toPathValue($taskId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiIntegrationV1TranslationmemoryTmIdDelete
     *
     * Delete a TM
     *
     * @param  string $tmId TM ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1TranslationmemoryTmIdDelete'] to see the possible values for this operation
     *
     * @throws \SmartCat\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiIntegrationV1TranslationmemoryTmIdDelete($tmId, string $contentType = self::contentTypes['apiIntegrationV1TranslationmemoryTmIdDelete'][0])
    {
        $this->apiIntegrationV1TranslationmemoryTmIdDeleteWithHttpInfo($tmId, $contentType);
    }

    /**
     * Operation apiIntegrationV1TranslationmemoryTmIdDeleteWithHttpInfo
     *
     * Delete a TM
     *
     * @param  string $tmId TM ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1TranslationmemoryTmIdDelete'] to see the possible values for this operation
     *
     * @throws \SmartCat\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiIntegrationV1TranslationmemoryTmIdDeleteWithHttpInfo($tmId, string $contentType = self::contentTypes['apiIntegrationV1TranslationmemoryTmIdDelete'][0])
    {
        $request = $this->apiIntegrationV1TranslationmemoryTmIdDeleteRequest($tmId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiIntegrationV1TranslationmemoryTmIdDeleteAsync
     *
     * Delete a TM
     *
     * @param  string $tmId TM ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1TranslationmemoryTmIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiIntegrationV1TranslationmemoryTmIdDeleteAsync($tmId, string $contentType = self::contentTypes['apiIntegrationV1TranslationmemoryTmIdDelete'][0])
    {
        return $this->apiIntegrationV1TranslationmemoryTmIdDeleteAsyncWithHttpInfo($tmId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiIntegrationV1TranslationmemoryTmIdDeleteAsyncWithHttpInfo
     *
     * Delete a TM
     *
     * @param  string $tmId TM ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1TranslationmemoryTmIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiIntegrationV1TranslationmemoryTmIdDeleteAsyncWithHttpInfo($tmId, string $contentType = self::contentTypes['apiIntegrationV1TranslationmemoryTmIdDelete'][0])
    {
        $returnType = '';
        $request = $this->apiIntegrationV1TranslationmemoryTmIdDeleteRequest($tmId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiIntegrationV1TranslationmemoryTmIdDelete'
     *
     * @param  string $tmId TM ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1TranslationmemoryTmIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiIntegrationV1TranslationmemoryTmIdDeleteRequest($tmId, string $contentType = self::contentTypes['apiIntegrationV1TranslationmemoryTmIdDelete'][0])
    {

        // verify the required parameter 'tmId' is set
        if ($tmId === null || (is_array($tmId) && count($tmId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tmId when calling apiIntegrationV1TranslationmemoryTmIdDelete'
            );
        }


        $resourcePath = '/api/integration/v1/translationmemory/{tmId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($tmId !== null) {
            $resourcePath = str_replace(
                '{' . 'tmId' . '}',
                ObjectSerializer::toPathValue($tmId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiIntegrationV1TranslationmemoryTmIdFileGet
     *
     * Export TMX files from the TM database
     *
     * @param  string $tmId TM ID (required)
     * @param  TMExportMode $exportMode Export mode (required)
     * @param  bool $withTags Specifies whether to include tags into export results (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1TranslationmemoryTmIdFileGet'] to see the possible values for this operation
     *
     * @throws \SmartCat\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiIntegrationV1TranslationmemoryTmIdFileGet($tmId, $exportMode, $withTags, string $contentType = self::contentTypes['apiIntegrationV1TranslationmemoryTmIdFileGet'][0])
    {
        $this->apiIntegrationV1TranslationmemoryTmIdFileGetWithHttpInfo($tmId, $exportMode, $withTags, $contentType);
    }

    /**
     * Operation apiIntegrationV1TranslationmemoryTmIdFileGetWithHttpInfo
     *
     * Export TMX files from the TM database
     *
     * @param  string $tmId TM ID (required)
     * @param  TMExportMode $exportMode Export mode (required)
     * @param  bool $withTags Specifies whether to include tags into export results (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1TranslationmemoryTmIdFileGet'] to see the possible values for this operation
     *
     * @throws \SmartCat\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiIntegrationV1TranslationmemoryTmIdFileGetWithHttpInfo($tmId, $exportMode, $withTags, string $contentType = self::contentTypes['apiIntegrationV1TranslationmemoryTmIdFileGet'][0])
    {
        $request = $this->apiIntegrationV1TranslationmemoryTmIdFileGetRequest($tmId, $exportMode, $withTags, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiIntegrationV1TranslationmemoryTmIdFileGetAsync
     *
     * Export TMX files from the TM database
     *
     * @param  string $tmId TM ID (required)
     * @param  TMExportMode $exportMode Export mode (required)
     * @param  bool $withTags Specifies whether to include tags into export results (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1TranslationmemoryTmIdFileGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiIntegrationV1TranslationmemoryTmIdFileGetAsync($tmId, $exportMode, $withTags, string $contentType = self::contentTypes['apiIntegrationV1TranslationmemoryTmIdFileGet'][0])
    {
        return $this->apiIntegrationV1TranslationmemoryTmIdFileGetAsyncWithHttpInfo($tmId, $exportMode, $withTags, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiIntegrationV1TranslationmemoryTmIdFileGetAsyncWithHttpInfo
     *
     * Export TMX files from the TM database
     *
     * @param  string $tmId TM ID (required)
     * @param  TMExportMode $exportMode Export mode (required)
     * @param  bool $withTags Specifies whether to include tags into export results (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1TranslationmemoryTmIdFileGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiIntegrationV1TranslationmemoryTmIdFileGetAsyncWithHttpInfo($tmId, $exportMode, $withTags, string $contentType = self::contentTypes['apiIntegrationV1TranslationmemoryTmIdFileGet'][0])
    {
        $returnType = '';
        $request = $this->apiIntegrationV1TranslationmemoryTmIdFileGetRequest($tmId, $exportMode, $withTags, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiIntegrationV1TranslationmemoryTmIdFileGet'
     *
     * @param  string $tmId TM ID (required)
     * @param  TMExportMode $exportMode Export mode (required)
     * @param  bool $withTags Specifies whether to include tags into export results (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1TranslationmemoryTmIdFileGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiIntegrationV1TranslationmemoryTmIdFileGetRequest($tmId, $exportMode, $withTags, string $contentType = self::contentTypes['apiIntegrationV1TranslationmemoryTmIdFileGet'][0])
    {

        // verify the required parameter 'tmId' is set
        if ($tmId === null || (is_array($tmId) && count($tmId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tmId when calling apiIntegrationV1TranslationmemoryTmIdFileGet'
            );
        }

        // verify the required parameter 'exportMode' is set
        if ($exportMode === null || (is_array($exportMode) && count($exportMode) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $exportMode when calling apiIntegrationV1TranslationmemoryTmIdFileGet'
            );
        }

        // verify the required parameter 'withTags' is set
        if ($withTags === null || (is_array($withTags) && count($withTags) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $withTags when calling apiIntegrationV1TranslationmemoryTmIdFileGet'
            );
        }


        $resourcePath = '/api/integration/v1/translationmemory/{tmId}/file';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $exportMode,
            'exportMode', // param base name
            'TMExportMode', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $withTags,
            'withTags', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);


        // path params
        if ($tmId !== null) {
            $resourcePath = str_replace(
                '{' . 'tmId' . '}',
                ObjectSerializer::toPathValue($tmId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiIntegrationV1TranslationmemoryTmIdGet
     *
     * Fetch information about the TM
     *
     * @param  string $tmId TM ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1TranslationmemoryTmIdGet'] to see the possible values for this operation
     *
     * @throws \SmartCat\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SmartCat\Model\TranslationMemoryModel
     */
    public function apiIntegrationV1TranslationmemoryTmIdGet($tmId, string $contentType = self::contentTypes['apiIntegrationV1TranslationmemoryTmIdGet'][0])
    {
        list($response) = $this->apiIntegrationV1TranslationmemoryTmIdGetWithHttpInfo($tmId, $contentType);
        return $response;
    }

    /**
     * Operation apiIntegrationV1TranslationmemoryTmIdGetWithHttpInfo
     *
     * Fetch information about the TM
     *
     * @param  string $tmId TM ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1TranslationmemoryTmIdGet'] to see the possible values for this operation
     *
     * @throws \SmartCat\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SmartCat\Model\TranslationMemoryModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiIntegrationV1TranslationmemoryTmIdGetWithHttpInfo($tmId, string $contentType = self::contentTypes['apiIntegrationV1TranslationmemoryTmIdGet'][0])
    {
        $request = $this->apiIntegrationV1TranslationmemoryTmIdGetRequest($tmId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\SmartCat\Model\TranslationMemoryModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SmartCat\Model\TranslationMemoryModel' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SmartCat\Model\TranslationMemoryModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\SmartCat\Model\TranslationMemoryModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SmartCat\Model\TranslationMemoryModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiIntegrationV1TranslationmemoryTmIdGetAsync
     *
     * Fetch information about the TM
     *
     * @param  string $tmId TM ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1TranslationmemoryTmIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiIntegrationV1TranslationmemoryTmIdGetAsync($tmId, string $contentType = self::contentTypes['apiIntegrationV1TranslationmemoryTmIdGet'][0])
    {
        return $this->apiIntegrationV1TranslationmemoryTmIdGetAsyncWithHttpInfo($tmId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiIntegrationV1TranslationmemoryTmIdGetAsyncWithHttpInfo
     *
     * Fetch information about the TM
     *
     * @param  string $tmId TM ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1TranslationmemoryTmIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiIntegrationV1TranslationmemoryTmIdGetAsyncWithHttpInfo($tmId, string $contentType = self::contentTypes['apiIntegrationV1TranslationmemoryTmIdGet'][0])
    {
        $returnType = '\SmartCat\Model\TranslationMemoryModel';
        $request = $this->apiIntegrationV1TranslationmemoryTmIdGetRequest($tmId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiIntegrationV1TranslationmemoryTmIdGet'
     *
     * @param  string $tmId TM ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1TranslationmemoryTmIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiIntegrationV1TranslationmemoryTmIdGetRequest($tmId, string $contentType = self::contentTypes['apiIntegrationV1TranslationmemoryTmIdGet'][0])
    {

        // verify the required parameter 'tmId' is set
        if ($tmId === null || (is_array($tmId) && count($tmId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tmId when calling apiIntegrationV1TranslationmemoryTmIdGet'
            );
        }


        $resourcePath = '/api/integration/v1/translationmemory/{tmId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($tmId !== null) {
            $resourcePath = str_replace(
                '{' . 'tmId' . '}',
                ObjectSerializer::toPathValue($tmId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiIntegrationV1TranslationmemoryTmIdPost
     *
     * Import TMX files to a TM
     *
     * @param  \SmartCat\Model\UploadedFile $uploadedFile TMX file to be uploaded (required)
     * @param  string $tmId TM ID (required)
     * @param  bool $replaceAllContent Complete replacement of the TM contents is required (required)
     * @param  IntegrationApiTMTranslationAssuranceLevel $assuranceLevel Translation assurance level. Calculated based on the document editing stage at which the TM unit was saved. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1TranslationmemoryTmIdPost'] to see the possible values for this operation
     *
     * @throws \SmartCat\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiIntegrationV1TranslationmemoryTmIdPost($uploadedFile, $tmId, $replaceAllContent, $assuranceLevel = null, string $contentType = self::contentTypes['apiIntegrationV1TranslationmemoryTmIdPost'][0])
    {
        $this->apiIntegrationV1TranslationmemoryTmIdPostWithHttpInfo($uploadedFile, $tmId, $replaceAllContent, $assuranceLevel, $contentType);
    }

    /**
     * Operation apiIntegrationV1TranslationmemoryTmIdPostWithHttpInfo
     *
     * Import TMX files to a TM
     *
     * @param  \SmartCat\Model\UploadedFile $uploadedFile TMX file to be uploaded (required)
     * @param  string $tmId TM ID (required)
     * @param  bool $replaceAllContent Complete replacement of the TM contents is required (required)
     * @param  IntegrationApiTMTranslationAssuranceLevel $assuranceLevel Translation assurance level. Calculated based on the document editing stage at which the TM unit was saved. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1TranslationmemoryTmIdPost'] to see the possible values for this operation
     *
     * @throws \SmartCat\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiIntegrationV1TranslationmemoryTmIdPostWithHttpInfo($uploadedFile, $tmId, $replaceAllContent, $assuranceLevel = null, string $contentType = self::contentTypes['apiIntegrationV1TranslationmemoryTmIdPost'][0])
    {
        $request = $this->apiIntegrationV1TranslationmemoryTmIdPostRequest($uploadedFile, $tmId, $replaceAllContent, $assuranceLevel, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiIntegrationV1TranslationmemoryTmIdPostAsync
     *
     * Import TMX files to a TM
     *
     * @param  \SmartCat\Model\UploadedFile $uploadedFile TMX file to be uploaded (required)
     * @param  string $tmId TM ID (required)
     * @param  bool $replaceAllContent Complete replacement of the TM contents is required (required)
     * @param  IntegrationApiTMTranslationAssuranceLevel $assuranceLevel Translation assurance level. Calculated based on the document editing stage at which the TM unit was saved. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1TranslationmemoryTmIdPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiIntegrationV1TranslationmemoryTmIdPostAsync($uploadedFile, $tmId, $replaceAllContent, $assuranceLevel = null, string $contentType = self::contentTypes['apiIntegrationV1TranslationmemoryTmIdPost'][0])
    {
        return $this->apiIntegrationV1TranslationmemoryTmIdPostAsyncWithHttpInfo($uploadedFile, $tmId, $replaceAllContent, $assuranceLevel, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiIntegrationV1TranslationmemoryTmIdPostAsyncWithHttpInfo
     *
     * Import TMX files to a TM
     *
     * @param  \SmartCat\Model\UploadedFile $uploadedFile TMX file to be uploaded (required)
     * @param  string $tmId TM ID (required)
     * @param  bool $replaceAllContent Complete replacement of the TM contents is required (required)
     * @param  IntegrationApiTMTranslationAssuranceLevel $assuranceLevel Translation assurance level. Calculated based on the document editing stage at which the TM unit was saved. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1TranslationmemoryTmIdPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiIntegrationV1TranslationmemoryTmIdPostAsyncWithHttpInfo($uploadedFile, $tmId, $replaceAllContent, $assuranceLevel = null, string $contentType = self::contentTypes['apiIntegrationV1TranslationmemoryTmIdPost'][0])
    {
        $returnType = '';
        $request = $this->apiIntegrationV1TranslationmemoryTmIdPostRequest($uploadedFile, $tmId, $replaceAllContent, $assuranceLevel, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiIntegrationV1TranslationmemoryTmIdPost'
     *
     * @param  \SmartCat\Model\UploadedFile $uploadedFile TMX file to be uploaded (required)
     * @param  string $tmId TM ID (required)
     * @param  bool $replaceAllContent Complete replacement of the TM contents is required (required)
     * @param  IntegrationApiTMTranslationAssuranceLevel $assuranceLevel Translation assurance level. Calculated based on the document editing stage at which the TM unit was saved. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1TranslationmemoryTmIdPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiIntegrationV1TranslationmemoryTmIdPostRequest($uploadedFile, $tmId, $replaceAllContent, $assuranceLevel = null, string $contentType = self::contentTypes['apiIntegrationV1TranslationmemoryTmIdPost'][0])
    {

        // verify the required parameter 'uploadedFile' is set
        if ($uploadedFile === null || (is_array($uploadedFile) && count($uploadedFile) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $uploadedFile when calling apiIntegrationV1TranslationmemoryTmIdPost'
            );
        }

        // verify the required parameter 'tmId' is set
        if ($tmId === null || (is_array($tmId) && count($tmId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tmId when calling apiIntegrationV1TranslationmemoryTmIdPost'
            );
        }

        // verify the required parameter 'replaceAllContent' is set
        if ($replaceAllContent === null || (is_array($replaceAllContent) && count($replaceAllContent) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $replaceAllContent when calling apiIntegrationV1TranslationmemoryTmIdPost'
            );
        }



        $resourcePath = '/api/integration/v1/translationmemory/{tmId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $replaceAllContent,
            'replaceAllContent', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $assuranceLevel,
            'assuranceLevel', // param base name
            'IntegrationApiTMTranslationAssuranceLevel', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($tmId !== null) {
            $resourcePath = str_replace(
                '{' . 'tmId' . '}',
                ObjectSerializer::toPathValue($tmId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($uploadedFile)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($uploadedFile));
            } else {
                $httpBody = $uploadedFile;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiIntegrationV1TranslationmemoryTmIdTargetsPut
     *
     * Add an array of target languages to a TM
     *
     * @param  string[] $requestBody Array of the required target languages (required)
     * @param  string $tmId TM ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1TranslationmemoryTmIdTargetsPut'] to see the possible values for this operation
     *
     * @throws \SmartCat\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiIntegrationV1TranslationmemoryTmIdTargetsPut($requestBody, $tmId, string $contentType = self::contentTypes['apiIntegrationV1TranslationmemoryTmIdTargetsPut'][0])
    {
        $this->apiIntegrationV1TranslationmemoryTmIdTargetsPutWithHttpInfo($requestBody, $tmId, $contentType);
    }

    /**
     * Operation apiIntegrationV1TranslationmemoryTmIdTargetsPutWithHttpInfo
     *
     * Add an array of target languages to a TM
     *
     * @param  string[] $requestBody Array of the required target languages (required)
     * @param  string $tmId TM ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1TranslationmemoryTmIdTargetsPut'] to see the possible values for this operation
     *
     * @throws \SmartCat\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiIntegrationV1TranslationmemoryTmIdTargetsPutWithHttpInfo($requestBody, $tmId, string $contentType = self::contentTypes['apiIntegrationV1TranslationmemoryTmIdTargetsPut'][0])
    {
        $request = $this->apiIntegrationV1TranslationmemoryTmIdTargetsPutRequest($requestBody, $tmId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiIntegrationV1TranslationmemoryTmIdTargetsPutAsync
     *
     * Add an array of target languages to a TM
     *
     * @param  string[] $requestBody Array of the required target languages (required)
     * @param  string $tmId TM ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1TranslationmemoryTmIdTargetsPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiIntegrationV1TranslationmemoryTmIdTargetsPutAsync($requestBody, $tmId, string $contentType = self::contentTypes['apiIntegrationV1TranslationmemoryTmIdTargetsPut'][0])
    {
        return $this->apiIntegrationV1TranslationmemoryTmIdTargetsPutAsyncWithHttpInfo($requestBody, $tmId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiIntegrationV1TranslationmemoryTmIdTargetsPutAsyncWithHttpInfo
     *
     * Add an array of target languages to a TM
     *
     * @param  string[] $requestBody Array of the required target languages (required)
     * @param  string $tmId TM ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1TranslationmemoryTmIdTargetsPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiIntegrationV1TranslationmemoryTmIdTargetsPutAsyncWithHttpInfo($requestBody, $tmId, string $contentType = self::contentTypes['apiIntegrationV1TranslationmemoryTmIdTargetsPut'][0])
    {
        $returnType = '';
        $request = $this->apiIntegrationV1TranslationmemoryTmIdTargetsPutRequest($requestBody, $tmId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiIntegrationV1TranslationmemoryTmIdTargetsPut'
     *
     * @param  string[] $requestBody Array of the required target languages (required)
     * @param  string $tmId TM ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1TranslationmemoryTmIdTargetsPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiIntegrationV1TranslationmemoryTmIdTargetsPutRequest($requestBody, $tmId, string $contentType = self::contentTypes['apiIntegrationV1TranslationmemoryTmIdTargetsPut'][0])
    {

        // verify the required parameter 'requestBody' is set
        if ($requestBody === null || (is_array($requestBody) && count($requestBody) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $requestBody when calling apiIntegrationV1TranslationmemoryTmIdTargetsPut'
            );
        }

        // verify the required parameter 'tmId' is set
        if ($tmId === null || (is_array($tmId) && count($tmId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tmId when calling apiIntegrationV1TranslationmemoryTmIdTargetsPut'
            );
        }


        $resourcePath = '/api/integration/v1/translationmemory/{tmId}/targets';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($tmId !== null) {
            $resourcePath = str_replace(
                '{' . 'tmId' . '}',
                ObjectSerializer::toPathValue($tmId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($requestBody)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($requestBody));
            } else {
                $httpBody = $requestBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
