<?php
/**
 * ProjectTaskApi
 * PHP version 7.4
 *
 * @category Class
 * @package  SmartCat
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Smartcat API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SmartCat\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use SmartCat\ApiException;
use SmartCat\Configuration;
use SmartCat\HeaderSelector;
use SmartCat\ObjectSerializer;

/**
 * ProjectTaskApi Class Doc Comment
 *
 * @category Class
 * @package  SmartCat
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ProjectTaskApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'apiIntegrationV1ProjectTaskProjectIdListGet' => [
            'application/json',
        ],
        'apiIntegrationV1ProjectTaskProjectIdProjectTaskIdDeadlinePut' => [
            'application/json',
        ],
        'apiIntegrationV1ProjectTaskProjectIdProjectTaskIdGet' => [
            'application/json',
        ],
        'apiIntegrationV1ProjectTaskProjectIdProjectTaskIdIndividualAssignmentDelete' => [
            'application/json',
        ],
        'apiIntegrationV1ProjectTaskProjectIdProjectTaskIdIndividualAssignmentPut' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'apiIntegrationV1ProjectTaskProjectIdProjectTaskIdMergePost' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'apiIntegrationV1ProjectTaskProjectIdProjectTaskIdPayablesGet' => [
            'application/json',
        ],
        'apiIntegrationV1ProjectTaskProjectIdProjectTaskIdScopeGet' => [
            'application/json',
        ],
        'apiIntegrationV1ProjectTaskProjectIdProjectTaskIdSetInvitationStrategyTypePut' => [
            'application/json',
        ],
        'apiIntegrationV1ProjectTaskProjectIdProjectTaskIdSplitByPartsPartsCountPost' => [
            'application/json',
        ],
        'apiIntegrationV1ProjectTaskProjectIdProjectTaskIdSplitPost' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'apiIntegrationV1ProjectTaskProjectIdProjectTaskIdVendorAssignmentDelete' => [
            'application/json',
        ],
        'apiIntegrationV1ProjectTaskProjectIdProjectTaskIdVendorAssignmentPut' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation apiIntegrationV1ProjectTaskProjectIdListGet
     *
     * Get a list of project tasks
     *
     * @param  string $projectId Project ID (required)
     * @param  Currency $currency Code of the currency used to recalculate supplier rates and the cost of work  AbbyyLS.Web.Currency (required)
     * @param  int $skip Number of skipped items (optional, default to 0)
     * @param  int $limit Maximum number of tasks in the response (no more than 20) (optional, default to 20)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1ProjectTaskProjectIdListGet'] to see the possible values for this operation
     *
     * @throws \SmartCat\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SmartCat\Model\ProjectTaskModel[]
     */
    public function apiIntegrationV1ProjectTaskProjectIdListGet($projectId, $currency, $skip = 0, $limit = 20, string $contentType = self::contentTypes['apiIntegrationV1ProjectTaskProjectIdListGet'][0])
    {
        list($response) = $this->apiIntegrationV1ProjectTaskProjectIdListGetWithHttpInfo($projectId, $currency, $skip, $limit, $contentType);
        return $response;
    }

    /**
     * Operation apiIntegrationV1ProjectTaskProjectIdListGetWithHttpInfo
     *
     * Get a list of project tasks
     *
     * @param  string $projectId Project ID (required)
     * @param  Currency $currency Code of the currency used to recalculate supplier rates and the cost of work  AbbyyLS.Web.Currency (required)
     * @param  int $skip Number of skipped items (optional, default to 0)
     * @param  int $limit Maximum number of tasks in the response (no more than 20) (optional, default to 20)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1ProjectTaskProjectIdListGet'] to see the possible values for this operation
     *
     * @throws \SmartCat\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SmartCat\Model\ProjectTaskModel[], HTTP status code, HTTP response headers (array of strings)
     */
    public function apiIntegrationV1ProjectTaskProjectIdListGetWithHttpInfo($projectId, $currency, $skip = 0, $limit = 20, string $contentType = self::contentTypes['apiIntegrationV1ProjectTaskProjectIdListGet'][0])
    {
        $request = $this->apiIntegrationV1ProjectTaskProjectIdListGetRequest($projectId, $currency, $skip, $limit, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\SmartCat\Model\ProjectTaskModel[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SmartCat\Model\ProjectTaskModel[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SmartCat\Model\ProjectTaskModel[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\SmartCat\Model\ProjectTaskModel[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SmartCat\Model\ProjectTaskModel[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiIntegrationV1ProjectTaskProjectIdListGetAsync
     *
     * Get a list of project tasks
     *
     * @param  string $projectId Project ID (required)
     * @param  Currency $currency Code of the currency used to recalculate supplier rates and the cost of work  AbbyyLS.Web.Currency (required)
     * @param  int $skip Number of skipped items (optional, default to 0)
     * @param  int $limit Maximum number of tasks in the response (no more than 20) (optional, default to 20)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1ProjectTaskProjectIdListGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiIntegrationV1ProjectTaskProjectIdListGetAsync($projectId, $currency, $skip = 0, $limit = 20, string $contentType = self::contentTypes['apiIntegrationV1ProjectTaskProjectIdListGet'][0])
    {
        return $this->apiIntegrationV1ProjectTaskProjectIdListGetAsyncWithHttpInfo($projectId, $currency, $skip, $limit, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiIntegrationV1ProjectTaskProjectIdListGetAsyncWithHttpInfo
     *
     * Get a list of project tasks
     *
     * @param  string $projectId Project ID (required)
     * @param  Currency $currency Code of the currency used to recalculate supplier rates and the cost of work  AbbyyLS.Web.Currency (required)
     * @param  int $skip Number of skipped items (optional, default to 0)
     * @param  int $limit Maximum number of tasks in the response (no more than 20) (optional, default to 20)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1ProjectTaskProjectIdListGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiIntegrationV1ProjectTaskProjectIdListGetAsyncWithHttpInfo($projectId, $currency, $skip = 0, $limit = 20, string $contentType = self::contentTypes['apiIntegrationV1ProjectTaskProjectIdListGet'][0])
    {
        $returnType = '\SmartCat\Model\ProjectTaskModel[]';
        $request = $this->apiIntegrationV1ProjectTaskProjectIdListGetRequest($projectId, $currency, $skip, $limit, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiIntegrationV1ProjectTaskProjectIdListGet'
     *
     * @param  string $projectId Project ID (required)
     * @param  Currency $currency Code of the currency used to recalculate supplier rates and the cost of work  AbbyyLS.Web.Currency (required)
     * @param  int $skip Number of skipped items (optional, default to 0)
     * @param  int $limit Maximum number of tasks in the response (no more than 20) (optional, default to 20)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1ProjectTaskProjectIdListGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiIntegrationV1ProjectTaskProjectIdListGetRequest($projectId, $currency, $skip = 0, $limit = 20, string $contentType = self::contentTypes['apiIntegrationV1ProjectTaskProjectIdListGet'][0])
    {

        // verify the required parameter 'projectId' is set
        if ($projectId === null || (is_array($projectId) && count($projectId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $projectId when calling apiIntegrationV1ProjectTaskProjectIdListGet'
            );
        }

        // verify the required parameter 'currency' is set
        if ($currency === null || (is_array($currency) && count($currency) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $currency when calling apiIntegrationV1ProjectTaskProjectIdListGet'
            );
        }




        $resourcePath = '/api/integration/v1/projectTask/{projectId}/list';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $currency,
            'currency', // param base name
            'Currency', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $skip,
            'skip', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($projectId !== null) {
            $resourcePath = str_replace(
                '{' . 'projectId' . '}',
                ObjectSerializer::toPathValue($projectId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiIntegrationV1ProjectTaskProjectIdProjectTaskIdDeadlinePut
     *
     * Set a deadline for the task
     *
     * @param  string $projectId Project ID (required)
     * @param  string $projectTaskId Task ID (required)
     * @param  \DateTime $deadline Task deadline (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1ProjectTaskProjectIdProjectTaskIdDeadlinePut'] to see the possible values for this operation
     *
     * @throws \SmartCat\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return bool
     */
    public function apiIntegrationV1ProjectTaskProjectIdProjectTaskIdDeadlinePut($projectId, $projectTaskId, $deadline = null, string $contentType = self::contentTypes['apiIntegrationV1ProjectTaskProjectIdProjectTaskIdDeadlinePut'][0])
    {
        list($response) = $this->apiIntegrationV1ProjectTaskProjectIdProjectTaskIdDeadlinePutWithHttpInfo($projectId, $projectTaskId, $deadline, $contentType);
        return $response;
    }

    /**
     * Operation apiIntegrationV1ProjectTaskProjectIdProjectTaskIdDeadlinePutWithHttpInfo
     *
     * Set a deadline for the task
     *
     * @param  string $projectId Project ID (required)
     * @param  string $projectTaskId Task ID (required)
     * @param  \DateTime $deadline Task deadline (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1ProjectTaskProjectIdProjectTaskIdDeadlinePut'] to see the possible values for this operation
     *
     * @throws \SmartCat\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of bool, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiIntegrationV1ProjectTaskProjectIdProjectTaskIdDeadlinePutWithHttpInfo($projectId, $projectTaskId, $deadline = null, string $contentType = self::contentTypes['apiIntegrationV1ProjectTaskProjectIdProjectTaskIdDeadlinePut'][0])
    {
        $request = $this->apiIntegrationV1ProjectTaskProjectIdProjectTaskIdDeadlinePutRequest($projectId, $projectTaskId, $deadline, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('bool' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('bool' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'bool', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'bool';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'bool',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiIntegrationV1ProjectTaskProjectIdProjectTaskIdDeadlinePutAsync
     *
     * Set a deadline for the task
     *
     * @param  string $projectId Project ID (required)
     * @param  string $projectTaskId Task ID (required)
     * @param  \DateTime $deadline Task deadline (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1ProjectTaskProjectIdProjectTaskIdDeadlinePut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiIntegrationV1ProjectTaskProjectIdProjectTaskIdDeadlinePutAsync($projectId, $projectTaskId, $deadline = null, string $contentType = self::contentTypes['apiIntegrationV1ProjectTaskProjectIdProjectTaskIdDeadlinePut'][0])
    {
        return $this->apiIntegrationV1ProjectTaskProjectIdProjectTaskIdDeadlinePutAsyncWithHttpInfo($projectId, $projectTaskId, $deadline, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiIntegrationV1ProjectTaskProjectIdProjectTaskIdDeadlinePutAsyncWithHttpInfo
     *
     * Set a deadline for the task
     *
     * @param  string $projectId Project ID (required)
     * @param  string $projectTaskId Task ID (required)
     * @param  \DateTime $deadline Task deadline (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1ProjectTaskProjectIdProjectTaskIdDeadlinePut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiIntegrationV1ProjectTaskProjectIdProjectTaskIdDeadlinePutAsyncWithHttpInfo($projectId, $projectTaskId, $deadline = null, string $contentType = self::contentTypes['apiIntegrationV1ProjectTaskProjectIdProjectTaskIdDeadlinePut'][0])
    {
        $returnType = 'bool';
        $request = $this->apiIntegrationV1ProjectTaskProjectIdProjectTaskIdDeadlinePutRequest($projectId, $projectTaskId, $deadline, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiIntegrationV1ProjectTaskProjectIdProjectTaskIdDeadlinePut'
     *
     * @param  string $projectId Project ID (required)
     * @param  string $projectTaskId Task ID (required)
     * @param  \DateTime $deadline Task deadline (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1ProjectTaskProjectIdProjectTaskIdDeadlinePut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiIntegrationV1ProjectTaskProjectIdProjectTaskIdDeadlinePutRequest($projectId, $projectTaskId, $deadline = null, string $contentType = self::contentTypes['apiIntegrationV1ProjectTaskProjectIdProjectTaskIdDeadlinePut'][0])
    {

        // verify the required parameter 'projectId' is set
        if ($projectId === null || (is_array($projectId) && count($projectId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $projectId when calling apiIntegrationV1ProjectTaskProjectIdProjectTaskIdDeadlinePut'
            );
        }

        // verify the required parameter 'projectTaskId' is set
        if ($projectTaskId === null || (is_array($projectTaskId) && count($projectTaskId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $projectTaskId when calling apiIntegrationV1ProjectTaskProjectIdProjectTaskIdDeadlinePut'
            );
        }



        $resourcePath = '/api/integration/v1/projectTask/{projectId}/{projectTaskId}/deadline';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $deadline,
            'deadline', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($projectId !== null) {
            $resourcePath = str_replace(
                '{' . 'projectId' . '}',
                ObjectSerializer::toPathValue($projectId),
                $resourcePath
            );
        }
        // path params
        if ($projectTaskId !== null) {
            $resourcePath = str_replace(
                '{' . 'projectTaskId' . '}',
                ObjectSerializer::toPathValue($projectTaskId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiIntegrationV1ProjectTaskProjectIdProjectTaskIdGet
     *
     * Get information regarding task projectTaskId for project projectId
     *
     * @param  string $projectId Project ID (required)
     * @param  string $projectTaskId Task ID (required)
     * @param  Currency $currency Code of the currency used to recalculate supplier rates and the cost of work AbbyyLS.Web.Currency (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1ProjectTaskProjectIdProjectTaskIdGet'] to see the possible values for this operation
     *
     * @throws \SmartCat\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SmartCat\Model\ProjectTaskModel
     */
    public function apiIntegrationV1ProjectTaskProjectIdProjectTaskIdGet($projectId, $projectTaskId, $currency, string $contentType = self::contentTypes['apiIntegrationV1ProjectTaskProjectIdProjectTaskIdGet'][0])
    {
        list($response) = $this->apiIntegrationV1ProjectTaskProjectIdProjectTaskIdGetWithHttpInfo($projectId, $projectTaskId, $currency, $contentType);
        return $response;
    }

    /**
     * Operation apiIntegrationV1ProjectTaskProjectIdProjectTaskIdGetWithHttpInfo
     *
     * Get information regarding task projectTaskId for project projectId
     *
     * @param  string $projectId Project ID (required)
     * @param  string $projectTaskId Task ID (required)
     * @param  Currency $currency Code of the currency used to recalculate supplier rates and the cost of work AbbyyLS.Web.Currency (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1ProjectTaskProjectIdProjectTaskIdGet'] to see the possible values for this operation
     *
     * @throws \SmartCat\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SmartCat\Model\ProjectTaskModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiIntegrationV1ProjectTaskProjectIdProjectTaskIdGetWithHttpInfo($projectId, $projectTaskId, $currency, string $contentType = self::contentTypes['apiIntegrationV1ProjectTaskProjectIdProjectTaskIdGet'][0])
    {
        $request = $this->apiIntegrationV1ProjectTaskProjectIdProjectTaskIdGetRequest($projectId, $projectTaskId, $currency, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\SmartCat\Model\ProjectTaskModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SmartCat\Model\ProjectTaskModel' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SmartCat\Model\ProjectTaskModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\SmartCat\Model\ProjectTaskModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SmartCat\Model\ProjectTaskModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiIntegrationV1ProjectTaskProjectIdProjectTaskIdGetAsync
     *
     * Get information regarding task projectTaskId for project projectId
     *
     * @param  string $projectId Project ID (required)
     * @param  string $projectTaskId Task ID (required)
     * @param  Currency $currency Code of the currency used to recalculate supplier rates and the cost of work AbbyyLS.Web.Currency (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1ProjectTaskProjectIdProjectTaskIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiIntegrationV1ProjectTaskProjectIdProjectTaskIdGetAsync($projectId, $projectTaskId, $currency, string $contentType = self::contentTypes['apiIntegrationV1ProjectTaskProjectIdProjectTaskIdGet'][0])
    {
        return $this->apiIntegrationV1ProjectTaskProjectIdProjectTaskIdGetAsyncWithHttpInfo($projectId, $projectTaskId, $currency, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiIntegrationV1ProjectTaskProjectIdProjectTaskIdGetAsyncWithHttpInfo
     *
     * Get information regarding task projectTaskId for project projectId
     *
     * @param  string $projectId Project ID (required)
     * @param  string $projectTaskId Task ID (required)
     * @param  Currency $currency Code of the currency used to recalculate supplier rates and the cost of work AbbyyLS.Web.Currency (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1ProjectTaskProjectIdProjectTaskIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiIntegrationV1ProjectTaskProjectIdProjectTaskIdGetAsyncWithHttpInfo($projectId, $projectTaskId, $currency, string $contentType = self::contentTypes['apiIntegrationV1ProjectTaskProjectIdProjectTaskIdGet'][0])
    {
        $returnType = '\SmartCat\Model\ProjectTaskModel';
        $request = $this->apiIntegrationV1ProjectTaskProjectIdProjectTaskIdGetRequest($projectId, $projectTaskId, $currency, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiIntegrationV1ProjectTaskProjectIdProjectTaskIdGet'
     *
     * @param  string $projectId Project ID (required)
     * @param  string $projectTaskId Task ID (required)
     * @param  Currency $currency Code of the currency used to recalculate supplier rates and the cost of work AbbyyLS.Web.Currency (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1ProjectTaskProjectIdProjectTaskIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiIntegrationV1ProjectTaskProjectIdProjectTaskIdGetRequest($projectId, $projectTaskId, $currency, string $contentType = self::contentTypes['apiIntegrationV1ProjectTaskProjectIdProjectTaskIdGet'][0])
    {

        // verify the required parameter 'projectId' is set
        if ($projectId === null || (is_array($projectId) && count($projectId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $projectId when calling apiIntegrationV1ProjectTaskProjectIdProjectTaskIdGet'
            );
        }

        // verify the required parameter 'projectTaskId' is set
        if ($projectTaskId === null || (is_array($projectTaskId) && count($projectTaskId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $projectTaskId when calling apiIntegrationV1ProjectTaskProjectIdProjectTaskIdGet'
            );
        }

        // verify the required parameter 'currency' is set
        if ($currency === null || (is_array($currency) && count($currency) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $currency when calling apiIntegrationV1ProjectTaskProjectIdProjectTaskIdGet'
            );
        }


        $resourcePath = '/api/integration/v1/projectTask/{projectId}/{projectTaskId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $currency,
            'currency', // param base name
            'Currency', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);


        // path params
        if ($projectId !== null) {
            $resourcePath = str_replace(
                '{' . 'projectId' . '}',
                ObjectSerializer::toPathValue($projectId),
                $resourcePath
            );
        }
        // path params
        if ($projectTaskId !== null) {
            $resourcePath = str_replace(
                '{' . 'projectTaskId' . '}',
                ObjectSerializer::toPathValue($projectTaskId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiIntegrationV1ProjectTaskProjectIdProjectTaskIdIndividualAssignmentDelete
     *
     * Delete individual assignment
     *
     * @param  string $projectId Project ID (required)
     * @param  string $projectTaskId Task ID (required)
     * @param  string $userId ID of the user whose assignment is to be removed (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1ProjectTaskProjectIdProjectTaskIdIndividualAssignmentDelete'] to see the possible values for this operation
     *
     * @throws \SmartCat\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return bool
     */
    public function apiIntegrationV1ProjectTaskProjectIdProjectTaskIdIndividualAssignmentDelete($projectId, $projectTaskId, $userId, string $contentType = self::contentTypes['apiIntegrationV1ProjectTaskProjectIdProjectTaskIdIndividualAssignmentDelete'][0])
    {
        list($response) = $this->apiIntegrationV1ProjectTaskProjectIdProjectTaskIdIndividualAssignmentDeleteWithHttpInfo($projectId, $projectTaskId, $userId, $contentType);
        return $response;
    }

    /**
     * Operation apiIntegrationV1ProjectTaskProjectIdProjectTaskIdIndividualAssignmentDeleteWithHttpInfo
     *
     * Delete individual assignment
     *
     * @param  string $projectId Project ID (required)
     * @param  string $projectTaskId Task ID (required)
     * @param  string $userId ID of the user whose assignment is to be removed (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1ProjectTaskProjectIdProjectTaskIdIndividualAssignmentDelete'] to see the possible values for this operation
     *
     * @throws \SmartCat\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of bool, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiIntegrationV1ProjectTaskProjectIdProjectTaskIdIndividualAssignmentDeleteWithHttpInfo($projectId, $projectTaskId, $userId, string $contentType = self::contentTypes['apiIntegrationV1ProjectTaskProjectIdProjectTaskIdIndividualAssignmentDelete'][0])
    {
        $request = $this->apiIntegrationV1ProjectTaskProjectIdProjectTaskIdIndividualAssignmentDeleteRequest($projectId, $projectTaskId, $userId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('bool' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('bool' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'bool', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'bool';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'bool',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiIntegrationV1ProjectTaskProjectIdProjectTaskIdIndividualAssignmentDeleteAsync
     *
     * Delete individual assignment
     *
     * @param  string $projectId Project ID (required)
     * @param  string $projectTaskId Task ID (required)
     * @param  string $userId ID of the user whose assignment is to be removed (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1ProjectTaskProjectIdProjectTaskIdIndividualAssignmentDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiIntegrationV1ProjectTaskProjectIdProjectTaskIdIndividualAssignmentDeleteAsync($projectId, $projectTaskId, $userId, string $contentType = self::contentTypes['apiIntegrationV1ProjectTaskProjectIdProjectTaskIdIndividualAssignmentDelete'][0])
    {
        return $this->apiIntegrationV1ProjectTaskProjectIdProjectTaskIdIndividualAssignmentDeleteAsyncWithHttpInfo($projectId, $projectTaskId, $userId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiIntegrationV1ProjectTaskProjectIdProjectTaskIdIndividualAssignmentDeleteAsyncWithHttpInfo
     *
     * Delete individual assignment
     *
     * @param  string $projectId Project ID (required)
     * @param  string $projectTaskId Task ID (required)
     * @param  string $userId ID of the user whose assignment is to be removed (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1ProjectTaskProjectIdProjectTaskIdIndividualAssignmentDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiIntegrationV1ProjectTaskProjectIdProjectTaskIdIndividualAssignmentDeleteAsyncWithHttpInfo($projectId, $projectTaskId, $userId, string $contentType = self::contentTypes['apiIntegrationV1ProjectTaskProjectIdProjectTaskIdIndividualAssignmentDelete'][0])
    {
        $returnType = 'bool';
        $request = $this->apiIntegrationV1ProjectTaskProjectIdProjectTaskIdIndividualAssignmentDeleteRequest($projectId, $projectTaskId, $userId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiIntegrationV1ProjectTaskProjectIdProjectTaskIdIndividualAssignmentDelete'
     *
     * @param  string $projectId Project ID (required)
     * @param  string $projectTaskId Task ID (required)
     * @param  string $userId ID of the user whose assignment is to be removed (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1ProjectTaskProjectIdProjectTaskIdIndividualAssignmentDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiIntegrationV1ProjectTaskProjectIdProjectTaskIdIndividualAssignmentDeleteRequest($projectId, $projectTaskId, $userId, string $contentType = self::contentTypes['apiIntegrationV1ProjectTaskProjectIdProjectTaskIdIndividualAssignmentDelete'][0])
    {

        // verify the required parameter 'projectId' is set
        if ($projectId === null || (is_array($projectId) && count($projectId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $projectId when calling apiIntegrationV1ProjectTaskProjectIdProjectTaskIdIndividualAssignmentDelete'
            );
        }

        // verify the required parameter 'projectTaskId' is set
        if ($projectTaskId === null || (is_array($projectTaskId) && count($projectTaskId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $projectTaskId when calling apiIntegrationV1ProjectTaskProjectIdProjectTaskIdIndividualAssignmentDelete'
            );
        }

        // verify the required parameter 'userId' is set
        if ($userId === null || (is_array($userId) && count($userId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $userId when calling apiIntegrationV1ProjectTaskProjectIdProjectTaskIdIndividualAssignmentDelete'
            );
        }


        $resourcePath = '/api/integration/v1/projectTask/{projectId}/{projectTaskId}/individual-assignment';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $userId,
            'userId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);


        // path params
        if ($projectId !== null) {
            $resourcePath = str_replace(
                '{' . 'projectId' . '}',
                ObjectSerializer::toPathValue($projectId),
                $resourcePath
            );
        }
        // path params
        if ($projectTaskId !== null) {
            $resourcePath = str_replace(
                '{' . 'projectTaskId' . '}',
                ObjectSerializer::toPathValue($projectTaskId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiIntegrationV1ProjectTaskProjectIdProjectTaskIdIndividualAssignmentPut
     *
     * Assign individual suppliers to perform task projectTaskId
     *
     * @param  \SmartCat\Model\IndividualAssignmentRequestModel $individualAssignmentRequestModel Request for assignment of individual suppliers (required)
     * @param  string $projectId Project ID (required)
     * @param  string $projectTaskId Task ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1ProjectTaskProjectIdProjectTaskIdIndividualAssignmentPut'] to see the possible values for this operation
     *
     * @throws \SmartCat\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return bool
     */
    public function apiIntegrationV1ProjectTaskProjectIdProjectTaskIdIndividualAssignmentPut($individualAssignmentRequestModel, $projectId, $projectTaskId, string $contentType = self::contentTypes['apiIntegrationV1ProjectTaskProjectIdProjectTaskIdIndividualAssignmentPut'][0])
    {
        list($response) = $this->apiIntegrationV1ProjectTaskProjectIdProjectTaskIdIndividualAssignmentPutWithHttpInfo($individualAssignmentRequestModel, $projectId, $projectTaskId, $contentType);
        return $response;
    }

    /**
     * Operation apiIntegrationV1ProjectTaskProjectIdProjectTaskIdIndividualAssignmentPutWithHttpInfo
     *
     * Assign individual suppliers to perform task projectTaskId
     *
     * @param  \SmartCat\Model\IndividualAssignmentRequestModel $individualAssignmentRequestModel Request for assignment of individual suppliers (required)
     * @param  string $projectId Project ID (required)
     * @param  string $projectTaskId Task ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1ProjectTaskProjectIdProjectTaskIdIndividualAssignmentPut'] to see the possible values for this operation
     *
     * @throws \SmartCat\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of bool, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiIntegrationV1ProjectTaskProjectIdProjectTaskIdIndividualAssignmentPutWithHttpInfo($individualAssignmentRequestModel, $projectId, $projectTaskId, string $contentType = self::contentTypes['apiIntegrationV1ProjectTaskProjectIdProjectTaskIdIndividualAssignmentPut'][0])
    {
        $request = $this->apiIntegrationV1ProjectTaskProjectIdProjectTaskIdIndividualAssignmentPutRequest($individualAssignmentRequestModel, $projectId, $projectTaskId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('bool' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('bool' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'bool', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'bool';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'bool',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiIntegrationV1ProjectTaskProjectIdProjectTaskIdIndividualAssignmentPutAsync
     *
     * Assign individual suppliers to perform task projectTaskId
     *
     * @param  \SmartCat\Model\IndividualAssignmentRequestModel $individualAssignmentRequestModel Request for assignment of individual suppliers (required)
     * @param  string $projectId Project ID (required)
     * @param  string $projectTaskId Task ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1ProjectTaskProjectIdProjectTaskIdIndividualAssignmentPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiIntegrationV1ProjectTaskProjectIdProjectTaskIdIndividualAssignmentPutAsync($individualAssignmentRequestModel, $projectId, $projectTaskId, string $contentType = self::contentTypes['apiIntegrationV1ProjectTaskProjectIdProjectTaskIdIndividualAssignmentPut'][0])
    {
        return $this->apiIntegrationV1ProjectTaskProjectIdProjectTaskIdIndividualAssignmentPutAsyncWithHttpInfo($individualAssignmentRequestModel, $projectId, $projectTaskId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiIntegrationV1ProjectTaskProjectIdProjectTaskIdIndividualAssignmentPutAsyncWithHttpInfo
     *
     * Assign individual suppliers to perform task projectTaskId
     *
     * @param  \SmartCat\Model\IndividualAssignmentRequestModel $individualAssignmentRequestModel Request for assignment of individual suppliers (required)
     * @param  string $projectId Project ID (required)
     * @param  string $projectTaskId Task ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1ProjectTaskProjectIdProjectTaskIdIndividualAssignmentPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiIntegrationV1ProjectTaskProjectIdProjectTaskIdIndividualAssignmentPutAsyncWithHttpInfo($individualAssignmentRequestModel, $projectId, $projectTaskId, string $contentType = self::contentTypes['apiIntegrationV1ProjectTaskProjectIdProjectTaskIdIndividualAssignmentPut'][0])
    {
        $returnType = 'bool';
        $request = $this->apiIntegrationV1ProjectTaskProjectIdProjectTaskIdIndividualAssignmentPutRequest($individualAssignmentRequestModel, $projectId, $projectTaskId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiIntegrationV1ProjectTaskProjectIdProjectTaskIdIndividualAssignmentPut'
     *
     * @param  \SmartCat\Model\IndividualAssignmentRequestModel $individualAssignmentRequestModel Request for assignment of individual suppliers (required)
     * @param  string $projectId Project ID (required)
     * @param  string $projectTaskId Task ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1ProjectTaskProjectIdProjectTaskIdIndividualAssignmentPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiIntegrationV1ProjectTaskProjectIdProjectTaskIdIndividualAssignmentPutRequest($individualAssignmentRequestModel, $projectId, $projectTaskId, string $contentType = self::contentTypes['apiIntegrationV1ProjectTaskProjectIdProjectTaskIdIndividualAssignmentPut'][0])
    {

        // verify the required parameter 'individualAssignmentRequestModel' is set
        if ($individualAssignmentRequestModel === null || (is_array($individualAssignmentRequestModel) && count($individualAssignmentRequestModel) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $individualAssignmentRequestModel when calling apiIntegrationV1ProjectTaskProjectIdProjectTaskIdIndividualAssignmentPut'
            );
        }

        // verify the required parameter 'projectId' is set
        if ($projectId === null || (is_array($projectId) && count($projectId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $projectId when calling apiIntegrationV1ProjectTaskProjectIdProjectTaskIdIndividualAssignmentPut'
            );
        }

        // verify the required parameter 'projectTaskId' is set
        if ($projectTaskId === null || (is_array($projectTaskId) && count($projectTaskId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $projectTaskId when calling apiIntegrationV1ProjectTaskProjectIdProjectTaskIdIndividualAssignmentPut'
            );
        }


        $resourcePath = '/api/integration/v1/projectTask/{projectId}/{projectTaskId}/individual-assignment';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($projectId !== null) {
            $resourcePath = str_replace(
                '{' . 'projectId' . '}',
                ObjectSerializer::toPathValue($projectId),
                $resourcePath
            );
        }
        // path params
        if ($projectTaskId !== null) {
            $resourcePath = str_replace(
                '{' . 'projectTaskId' . '}',
                ObjectSerializer::toPathValue($projectTaskId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($individualAssignmentRequestModel)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($individualAssignmentRequestModel));
            } else {
                $httpBody = $individualAssignmentRequestModel;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiIntegrationV1ProjectTaskProjectIdProjectTaskIdMergePost
     *
     * Merge task projectTaskId with tasks request  All merged tasks must belong to the same stage Smartcat.AppIntegrations.Contracts.ProjectTask.ProjectTaskModel.StageId,  have the same target language Smartcat.AppIntegrations.Contracts.ProjectTask.ProjectTaskModel.TargetLanguage and have no agencies/companies assigned to the task  During the merge process, existing supplier assignments will be removed. Tasks will be merged and become inaccessible.  As a result of the operation, a new task is created, which includes all the scope of work from the merged tasks.
     *
     * @param  string $projectId Project ID (required)
     * @param  string $projectTaskId Task ID (required)
     * @param  \SmartCat\Model\ProjectTaskMergeRequest $projectTaskMergeRequest Data required to merge tasks (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1ProjectTaskProjectIdProjectTaskIdMergePost'] to see the possible values for this operation
     *
     * @throws \SmartCat\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SmartCat\Model\MergeProjectTasksResponse
     */
    public function apiIntegrationV1ProjectTaskProjectIdProjectTaskIdMergePost($projectId, $projectTaskId, $projectTaskMergeRequest = null, string $contentType = self::contentTypes['apiIntegrationV1ProjectTaskProjectIdProjectTaskIdMergePost'][0])
    {
        list($response) = $this->apiIntegrationV1ProjectTaskProjectIdProjectTaskIdMergePostWithHttpInfo($projectId, $projectTaskId, $projectTaskMergeRequest, $contentType);
        return $response;
    }

    /**
     * Operation apiIntegrationV1ProjectTaskProjectIdProjectTaskIdMergePostWithHttpInfo
     *
     * Merge task projectTaskId with tasks request  All merged tasks must belong to the same stage Smartcat.AppIntegrations.Contracts.ProjectTask.ProjectTaskModel.StageId,  have the same target language Smartcat.AppIntegrations.Contracts.ProjectTask.ProjectTaskModel.TargetLanguage and have no agencies/companies assigned to the task  During the merge process, existing supplier assignments will be removed. Tasks will be merged and become inaccessible.  As a result of the operation, a new task is created, which includes all the scope of work from the merged tasks.
     *
     * @param  string $projectId Project ID (required)
     * @param  string $projectTaskId Task ID (required)
     * @param  \SmartCat\Model\ProjectTaskMergeRequest $projectTaskMergeRequest Data required to merge tasks (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1ProjectTaskProjectIdProjectTaskIdMergePost'] to see the possible values for this operation
     *
     * @throws \SmartCat\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SmartCat\Model\MergeProjectTasksResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiIntegrationV1ProjectTaskProjectIdProjectTaskIdMergePostWithHttpInfo($projectId, $projectTaskId, $projectTaskMergeRequest = null, string $contentType = self::contentTypes['apiIntegrationV1ProjectTaskProjectIdProjectTaskIdMergePost'][0])
    {
        $request = $this->apiIntegrationV1ProjectTaskProjectIdProjectTaskIdMergePostRequest($projectId, $projectTaskId, $projectTaskMergeRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\SmartCat\Model\MergeProjectTasksResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SmartCat\Model\MergeProjectTasksResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SmartCat\Model\MergeProjectTasksResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\SmartCat\Model\MergeProjectTasksResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SmartCat\Model\MergeProjectTasksResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiIntegrationV1ProjectTaskProjectIdProjectTaskIdMergePostAsync
     *
     * Merge task projectTaskId with tasks request  All merged tasks must belong to the same stage Smartcat.AppIntegrations.Contracts.ProjectTask.ProjectTaskModel.StageId,  have the same target language Smartcat.AppIntegrations.Contracts.ProjectTask.ProjectTaskModel.TargetLanguage and have no agencies/companies assigned to the task  During the merge process, existing supplier assignments will be removed. Tasks will be merged and become inaccessible.  As a result of the operation, a new task is created, which includes all the scope of work from the merged tasks.
     *
     * @param  string $projectId Project ID (required)
     * @param  string $projectTaskId Task ID (required)
     * @param  \SmartCat\Model\ProjectTaskMergeRequest $projectTaskMergeRequest Data required to merge tasks (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1ProjectTaskProjectIdProjectTaskIdMergePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiIntegrationV1ProjectTaskProjectIdProjectTaskIdMergePostAsync($projectId, $projectTaskId, $projectTaskMergeRequest = null, string $contentType = self::contentTypes['apiIntegrationV1ProjectTaskProjectIdProjectTaskIdMergePost'][0])
    {
        return $this->apiIntegrationV1ProjectTaskProjectIdProjectTaskIdMergePostAsyncWithHttpInfo($projectId, $projectTaskId, $projectTaskMergeRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiIntegrationV1ProjectTaskProjectIdProjectTaskIdMergePostAsyncWithHttpInfo
     *
     * Merge task projectTaskId with tasks request  All merged tasks must belong to the same stage Smartcat.AppIntegrations.Contracts.ProjectTask.ProjectTaskModel.StageId,  have the same target language Smartcat.AppIntegrations.Contracts.ProjectTask.ProjectTaskModel.TargetLanguage and have no agencies/companies assigned to the task  During the merge process, existing supplier assignments will be removed. Tasks will be merged and become inaccessible.  As a result of the operation, a new task is created, which includes all the scope of work from the merged tasks.
     *
     * @param  string $projectId Project ID (required)
     * @param  string $projectTaskId Task ID (required)
     * @param  \SmartCat\Model\ProjectTaskMergeRequest $projectTaskMergeRequest Data required to merge tasks (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1ProjectTaskProjectIdProjectTaskIdMergePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiIntegrationV1ProjectTaskProjectIdProjectTaskIdMergePostAsyncWithHttpInfo($projectId, $projectTaskId, $projectTaskMergeRequest = null, string $contentType = self::contentTypes['apiIntegrationV1ProjectTaskProjectIdProjectTaskIdMergePost'][0])
    {
        $returnType = '\SmartCat\Model\MergeProjectTasksResponse';
        $request = $this->apiIntegrationV1ProjectTaskProjectIdProjectTaskIdMergePostRequest($projectId, $projectTaskId, $projectTaskMergeRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiIntegrationV1ProjectTaskProjectIdProjectTaskIdMergePost'
     *
     * @param  string $projectId Project ID (required)
     * @param  string $projectTaskId Task ID (required)
     * @param  \SmartCat\Model\ProjectTaskMergeRequest $projectTaskMergeRequest Data required to merge tasks (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1ProjectTaskProjectIdProjectTaskIdMergePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiIntegrationV1ProjectTaskProjectIdProjectTaskIdMergePostRequest($projectId, $projectTaskId, $projectTaskMergeRequest = null, string $contentType = self::contentTypes['apiIntegrationV1ProjectTaskProjectIdProjectTaskIdMergePost'][0])
    {

        // verify the required parameter 'projectId' is set
        if ($projectId === null || (is_array($projectId) && count($projectId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $projectId when calling apiIntegrationV1ProjectTaskProjectIdProjectTaskIdMergePost'
            );
        }

        // verify the required parameter 'projectTaskId' is set
        if ($projectTaskId === null || (is_array($projectTaskId) && count($projectTaskId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $projectTaskId when calling apiIntegrationV1ProjectTaskProjectIdProjectTaskIdMergePost'
            );
        }



        $resourcePath = '/api/integration/v1/projectTask/{projectId}/{projectTaskId}/merge';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($projectId !== null) {
            $resourcePath = str_replace(
                '{' . 'projectId' . '}',
                ObjectSerializer::toPathValue($projectId),
                $resourcePath
            );
        }
        // path params
        if ($projectTaskId !== null) {
            $resourcePath = str_replace(
                '{' . 'projectTaskId' . '}',
                ObjectSerializer::toPathValue($projectTaskId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($projectTaskMergeRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($projectTaskMergeRequest));
            } else {
                $httpBody = $projectTaskMergeRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiIntegrationV1ProjectTaskProjectIdProjectTaskIdPayablesGet
     *
     * Get information about payments to suppliers for the work on task projectTaskId
     *
     * @param  string $projectId Project ID (required)
     * @param  string $projectTaskId Task ID (required)
     * @param  Currency $currency Code of the currency used to calculate the cost of work (required)
     * @param  int $skip Number of skipped items (optional, default to 0)
     * @param  int $limit Maximum number of elements in the response (no more than 100) (optional, default to 100)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1ProjectTaskProjectIdProjectTaskIdPayablesGet'] to see the possible values for this operation
     *
     * @throws \SmartCat\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SmartCat\Model\ProjectTaskJobModel[]
     */
    public function apiIntegrationV1ProjectTaskProjectIdProjectTaskIdPayablesGet($projectId, $projectTaskId, $currency, $skip = 0, $limit = 100, string $contentType = self::contentTypes['apiIntegrationV1ProjectTaskProjectIdProjectTaskIdPayablesGet'][0])
    {
        list($response) = $this->apiIntegrationV1ProjectTaskProjectIdProjectTaskIdPayablesGetWithHttpInfo($projectId, $projectTaskId, $currency, $skip, $limit, $contentType);
        return $response;
    }

    /**
     * Operation apiIntegrationV1ProjectTaskProjectIdProjectTaskIdPayablesGetWithHttpInfo
     *
     * Get information about payments to suppliers for the work on task projectTaskId
     *
     * @param  string $projectId Project ID (required)
     * @param  string $projectTaskId Task ID (required)
     * @param  Currency $currency Code of the currency used to calculate the cost of work (required)
     * @param  int $skip Number of skipped items (optional, default to 0)
     * @param  int $limit Maximum number of elements in the response (no more than 100) (optional, default to 100)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1ProjectTaskProjectIdProjectTaskIdPayablesGet'] to see the possible values for this operation
     *
     * @throws \SmartCat\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SmartCat\Model\ProjectTaskJobModel[], HTTP status code, HTTP response headers (array of strings)
     */
    public function apiIntegrationV1ProjectTaskProjectIdProjectTaskIdPayablesGetWithHttpInfo($projectId, $projectTaskId, $currency, $skip = 0, $limit = 100, string $contentType = self::contentTypes['apiIntegrationV1ProjectTaskProjectIdProjectTaskIdPayablesGet'][0])
    {
        $request = $this->apiIntegrationV1ProjectTaskProjectIdProjectTaskIdPayablesGetRequest($projectId, $projectTaskId, $currency, $skip, $limit, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\SmartCat\Model\ProjectTaskJobModel[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SmartCat\Model\ProjectTaskJobModel[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SmartCat\Model\ProjectTaskJobModel[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\SmartCat\Model\ProjectTaskJobModel[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SmartCat\Model\ProjectTaskJobModel[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiIntegrationV1ProjectTaskProjectIdProjectTaskIdPayablesGetAsync
     *
     * Get information about payments to suppliers for the work on task projectTaskId
     *
     * @param  string $projectId Project ID (required)
     * @param  string $projectTaskId Task ID (required)
     * @param  Currency $currency Code of the currency used to calculate the cost of work (required)
     * @param  int $skip Number of skipped items (optional, default to 0)
     * @param  int $limit Maximum number of elements in the response (no more than 100) (optional, default to 100)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1ProjectTaskProjectIdProjectTaskIdPayablesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiIntegrationV1ProjectTaskProjectIdProjectTaskIdPayablesGetAsync($projectId, $projectTaskId, $currency, $skip = 0, $limit = 100, string $contentType = self::contentTypes['apiIntegrationV1ProjectTaskProjectIdProjectTaskIdPayablesGet'][0])
    {
        return $this->apiIntegrationV1ProjectTaskProjectIdProjectTaskIdPayablesGetAsyncWithHttpInfo($projectId, $projectTaskId, $currency, $skip, $limit, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiIntegrationV1ProjectTaskProjectIdProjectTaskIdPayablesGetAsyncWithHttpInfo
     *
     * Get information about payments to suppliers for the work on task projectTaskId
     *
     * @param  string $projectId Project ID (required)
     * @param  string $projectTaskId Task ID (required)
     * @param  Currency $currency Code of the currency used to calculate the cost of work (required)
     * @param  int $skip Number of skipped items (optional, default to 0)
     * @param  int $limit Maximum number of elements in the response (no more than 100) (optional, default to 100)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1ProjectTaskProjectIdProjectTaskIdPayablesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiIntegrationV1ProjectTaskProjectIdProjectTaskIdPayablesGetAsyncWithHttpInfo($projectId, $projectTaskId, $currency, $skip = 0, $limit = 100, string $contentType = self::contentTypes['apiIntegrationV1ProjectTaskProjectIdProjectTaskIdPayablesGet'][0])
    {
        $returnType = '\SmartCat\Model\ProjectTaskJobModel[]';
        $request = $this->apiIntegrationV1ProjectTaskProjectIdProjectTaskIdPayablesGetRequest($projectId, $projectTaskId, $currency, $skip, $limit, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiIntegrationV1ProjectTaskProjectIdProjectTaskIdPayablesGet'
     *
     * @param  string $projectId Project ID (required)
     * @param  string $projectTaskId Task ID (required)
     * @param  Currency $currency Code of the currency used to calculate the cost of work (required)
     * @param  int $skip Number of skipped items (optional, default to 0)
     * @param  int $limit Maximum number of elements in the response (no more than 100) (optional, default to 100)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1ProjectTaskProjectIdProjectTaskIdPayablesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiIntegrationV1ProjectTaskProjectIdProjectTaskIdPayablesGetRequest($projectId, $projectTaskId, $currency, $skip = 0, $limit = 100, string $contentType = self::contentTypes['apiIntegrationV1ProjectTaskProjectIdProjectTaskIdPayablesGet'][0])
    {

        // verify the required parameter 'projectId' is set
        if ($projectId === null || (is_array($projectId) && count($projectId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $projectId when calling apiIntegrationV1ProjectTaskProjectIdProjectTaskIdPayablesGet'
            );
        }

        // verify the required parameter 'projectTaskId' is set
        if ($projectTaskId === null || (is_array($projectTaskId) && count($projectTaskId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $projectTaskId when calling apiIntegrationV1ProjectTaskProjectIdProjectTaskIdPayablesGet'
            );
        }

        // verify the required parameter 'currency' is set
        if ($currency === null || (is_array($currency) && count($currency) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $currency when calling apiIntegrationV1ProjectTaskProjectIdProjectTaskIdPayablesGet'
            );
        }




        $resourcePath = '/api/integration/v1/projectTask/{projectId}/{projectTaskId}/payables';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $currency,
            'currency', // param base name
            'Currency', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $skip,
            'skip', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($projectId !== null) {
            $resourcePath = str_replace(
                '{' . 'projectId' . '}',
                ObjectSerializer::toPathValue($projectId),
                $resourcePath
            );
        }
        // path params
        if ($projectTaskId !== null) {
            $resourcePath = str_replace(
                '{' . 'projectTaskId' . '}',
                ObjectSerializer::toPathValue($projectTaskId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiIntegrationV1ProjectTaskProjectIdProjectTaskIdScopeGet
     *
     * Get information about the scope of work, regarding task  projectTaskId for project projectId
     *
     * @param  string $projectId Project ID (required)
     * @param  string $projectTaskId Task ID (required)
     * @param  Currency $currency Code of the currency used to calculate the cost of work (required)
     * @param  int $skip Number of skipped items (optional, default to 0)
     * @param  int $limit Maximum number of elements in the response (no more than 100) (optional, default to 100)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1ProjectTaskProjectIdProjectTaskIdScopeGet'] to see the possible values for this operation
     *
     * @throws \SmartCat\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SmartCat\Model\ProjectTaskScopeModel[]
     */
    public function apiIntegrationV1ProjectTaskProjectIdProjectTaskIdScopeGet($projectId, $projectTaskId, $currency, $skip = 0, $limit = 100, string $contentType = self::contentTypes['apiIntegrationV1ProjectTaskProjectIdProjectTaskIdScopeGet'][0])
    {
        list($response) = $this->apiIntegrationV1ProjectTaskProjectIdProjectTaskIdScopeGetWithHttpInfo($projectId, $projectTaskId, $currency, $skip, $limit, $contentType);
        return $response;
    }

    /**
     * Operation apiIntegrationV1ProjectTaskProjectIdProjectTaskIdScopeGetWithHttpInfo
     *
     * Get information about the scope of work, regarding task  projectTaskId for project projectId
     *
     * @param  string $projectId Project ID (required)
     * @param  string $projectTaskId Task ID (required)
     * @param  Currency $currency Code of the currency used to calculate the cost of work (required)
     * @param  int $skip Number of skipped items (optional, default to 0)
     * @param  int $limit Maximum number of elements in the response (no more than 100) (optional, default to 100)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1ProjectTaskProjectIdProjectTaskIdScopeGet'] to see the possible values for this operation
     *
     * @throws \SmartCat\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SmartCat\Model\ProjectTaskScopeModel[], HTTP status code, HTTP response headers (array of strings)
     */
    public function apiIntegrationV1ProjectTaskProjectIdProjectTaskIdScopeGetWithHttpInfo($projectId, $projectTaskId, $currency, $skip = 0, $limit = 100, string $contentType = self::contentTypes['apiIntegrationV1ProjectTaskProjectIdProjectTaskIdScopeGet'][0])
    {
        $request = $this->apiIntegrationV1ProjectTaskProjectIdProjectTaskIdScopeGetRequest($projectId, $projectTaskId, $currency, $skip, $limit, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\SmartCat\Model\ProjectTaskScopeModel[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SmartCat\Model\ProjectTaskScopeModel[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SmartCat\Model\ProjectTaskScopeModel[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\SmartCat\Model\ProjectTaskScopeModel[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SmartCat\Model\ProjectTaskScopeModel[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiIntegrationV1ProjectTaskProjectIdProjectTaskIdScopeGetAsync
     *
     * Get information about the scope of work, regarding task  projectTaskId for project projectId
     *
     * @param  string $projectId Project ID (required)
     * @param  string $projectTaskId Task ID (required)
     * @param  Currency $currency Code of the currency used to calculate the cost of work (required)
     * @param  int $skip Number of skipped items (optional, default to 0)
     * @param  int $limit Maximum number of elements in the response (no more than 100) (optional, default to 100)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1ProjectTaskProjectIdProjectTaskIdScopeGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiIntegrationV1ProjectTaskProjectIdProjectTaskIdScopeGetAsync($projectId, $projectTaskId, $currency, $skip = 0, $limit = 100, string $contentType = self::contentTypes['apiIntegrationV1ProjectTaskProjectIdProjectTaskIdScopeGet'][0])
    {
        return $this->apiIntegrationV1ProjectTaskProjectIdProjectTaskIdScopeGetAsyncWithHttpInfo($projectId, $projectTaskId, $currency, $skip, $limit, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiIntegrationV1ProjectTaskProjectIdProjectTaskIdScopeGetAsyncWithHttpInfo
     *
     * Get information about the scope of work, regarding task  projectTaskId for project projectId
     *
     * @param  string $projectId Project ID (required)
     * @param  string $projectTaskId Task ID (required)
     * @param  Currency $currency Code of the currency used to calculate the cost of work (required)
     * @param  int $skip Number of skipped items (optional, default to 0)
     * @param  int $limit Maximum number of elements in the response (no more than 100) (optional, default to 100)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1ProjectTaskProjectIdProjectTaskIdScopeGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiIntegrationV1ProjectTaskProjectIdProjectTaskIdScopeGetAsyncWithHttpInfo($projectId, $projectTaskId, $currency, $skip = 0, $limit = 100, string $contentType = self::contentTypes['apiIntegrationV1ProjectTaskProjectIdProjectTaskIdScopeGet'][0])
    {
        $returnType = '\SmartCat\Model\ProjectTaskScopeModel[]';
        $request = $this->apiIntegrationV1ProjectTaskProjectIdProjectTaskIdScopeGetRequest($projectId, $projectTaskId, $currency, $skip, $limit, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiIntegrationV1ProjectTaskProjectIdProjectTaskIdScopeGet'
     *
     * @param  string $projectId Project ID (required)
     * @param  string $projectTaskId Task ID (required)
     * @param  Currency $currency Code of the currency used to calculate the cost of work (required)
     * @param  int $skip Number of skipped items (optional, default to 0)
     * @param  int $limit Maximum number of elements in the response (no more than 100) (optional, default to 100)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1ProjectTaskProjectIdProjectTaskIdScopeGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiIntegrationV1ProjectTaskProjectIdProjectTaskIdScopeGetRequest($projectId, $projectTaskId, $currency, $skip = 0, $limit = 100, string $contentType = self::contentTypes['apiIntegrationV1ProjectTaskProjectIdProjectTaskIdScopeGet'][0])
    {

        // verify the required parameter 'projectId' is set
        if ($projectId === null || (is_array($projectId) && count($projectId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $projectId when calling apiIntegrationV1ProjectTaskProjectIdProjectTaskIdScopeGet'
            );
        }

        // verify the required parameter 'projectTaskId' is set
        if ($projectTaskId === null || (is_array($projectTaskId) && count($projectTaskId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $projectTaskId when calling apiIntegrationV1ProjectTaskProjectIdProjectTaskIdScopeGet'
            );
        }

        // verify the required parameter 'currency' is set
        if ($currency === null || (is_array($currency) && count($currency) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $currency when calling apiIntegrationV1ProjectTaskProjectIdProjectTaskIdScopeGet'
            );
        }




        $resourcePath = '/api/integration/v1/projectTask/{projectId}/{projectTaskId}/scope';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $currency,
            'currency', // param base name
            'Currency', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $skip,
            'skip', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($projectId !== null) {
            $resourcePath = str_replace(
                '{' . 'projectId' . '}',
                ObjectSerializer::toPathValue($projectId),
                $resourcePath
            );
        }
        // path params
        if ($projectTaskId !== null) {
            $resourcePath = str_replace(
                '{' . 'projectTaskId' . '}',
                ObjectSerializer::toPathValue($projectTaskId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiIntegrationV1ProjectTaskProjectIdProjectTaskIdSetInvitationStrategyTypePut
     *
     * Set the mode of access to perform the work for those who accepted the invitation
     *
     * @param  string $projectId Project ID (required)
     * @param  string $projectTaskId Task ID (required)
     * @param  ProjectTaskIndividualInvitationStrategyType $invitationStrategyType Mode of access to the work for those who accepted the invitation (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1ProjectTaskProjectIdProjectTaskIdSetInvitationStrategyTypePut'] to see the possible values for this operation
     *
     * @throws \SmartCat\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return bool
     */
    public function apiIntegrationV1ProjectTaskProjectIdProjectTaskIdSetInvitationStrategyTypePut($projectId, $projectTaskId, $invitationStrategyType, string $contentType = self::contentTypes['apiIntegrationV1ProjectTaskProjectIdProjectTaskIdSetInvitationStrategyTypePut'][0])
    {
        list($response) = $this->apiIntegrationV1ProjectTaskProjectIdProjectTaskIdSetInvitationStrategyTypePutWithHttpInfo($projectId, $projectTaskId, $invitationStrategyType, $contentType);
        return $response;
    }

    /**
     * Operation apiIntegrationV1ProjectTaskProjectIdProjectTaskIdSetInvitationStrategyTypePutWithHttpInfo
     *
     * Set the mode of access to perform the work for those who accepted the invitation
     *
     * @param  string $projectId Project ID (required)
     * @param  string $projectTaskId Task ID (required)
     * @param  ProjectTaskIndividualInvitationStrategyType $invitationStrategyType Mode of access to the work for those who accepted the invitation (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1ProjectTaskProjectIdProjectTaskIdSetInvitationStrategyTypePut'] to see the possible values for this operation
     *
     * @throws \SmartCat\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of bool, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiIntegrationV1ProjectTaskProjectIdProjectTaskIdSetInvitationStrategyTypePutWithHttpInfo($projectId, $projectTaskId, $invitationStrategyType, string $contentType = self::contentTypes['apiIntegrationV1ProjectTaskProjectIdProjectTaskIdSetInvitationStrategyTypePut'][0])
    {
        $request = $this->apiIntegrationV1ProjectTaskProjectIdProjectTaskIdSetInvitationStrategyTypePutRequest($projectId, $projectTaskId, $invitationStrategyType, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('bool' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('bool' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'bool', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'bool';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'bool',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiIntegrationV1ProjectTaskProjectIdProjectTaskIdSetInvitationStrategyTypePutAsync
     *
     * Set the mode of access to perform the work for those who accepted the invitation
     *
     * @param  string $projectId Project ID (required)
     * @param  string $projectTaskId Task ID (required)
     * @param  ProjectTaskIndividualInvitationStrategyType $invitationStrategyType Mode of access to the work for those who accepted the invitation (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1ProjectTaskProjectIdProjectTaskIdSetInvitationStrategyTypePut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiIntegrationV1ProjectTaskProjectIdProjectTaskIdSetInvitationStrategyTypePutAsync($projectId, $projectTaskId, $invitationStrategyType, string $contentType = self::contentTypes['apiIntegrationV1ProjectTaskProjectIdProjectTaskIdSetInvitationStrategyTypePut'][0])
    {
        return $this->apiIntegrationV1ProjectTaskProjectIdProjectTaskIdSetInvitationStrategyTypePutAsyncWithHttpInfo($projectId, $projectTaskId, $invitationStrategyType, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiIntegrationV1ProjectTaskProjectIdProjectTaskIdSetInvitationStrategyTypePutAsyncWithHttpInfo
     *
     * Set the mode of access to perform the work for those who accepted the invitation
     *
     * @param  string $projectId Project ID (required)
     * @param  string $projectTaskId Task ID (required)
     * @param  ProjectTaskIndividualInvitationStrategyType $invitationStrategyType Mode of access to the work for those who accepted the invitation (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1ProjectTaskProjectIdProjectTaskIdSetInvitationStrategyTypePut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiIntegrationV1ProjectTaskProjectIdProjectTaskIdSetInvitationStrategyTypePutAsyncWithHttpInfo($projectId, $projectTaskId, $invitationStrategyType, string $contentType = self::contentTypes['apiIntegrationV1ProjectTaskProjectIdProjectTaskIdSetInvitationStrategyTypePut'][0])
    {
        $returnType = 'bool';
        $request = $this->apiIntegrationV1ProjectTaskProjectIdProjectTaskIdSetInvitationStrategyTypePutRequest($projectId, $projectTaskId, $invitationStrategyType, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiIntegrationV1ProjectTaskProjectIdProjectTaskIdSetInvitationStrategyTypePut'
     *
     * @param  string $projectId Project ID (required)
     * @param  string $projectTaskId Task ID (required)
     * @param  ProjectTaskIndividualInvitationStrategyType $invitationStrategyType Mode of access to the work for those who accepted the invitation (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1ProjectTaskProjectIdProjectTaskIdSetInvitationStrategyTypePut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiIntegrationV1ProjectTaskProjectIdProjectTaskIdSetInvitationStrategyTypePutRequest($projectId, $projectTaskId, $invitationStrategyType, string $contentType = self::contentTypes['apiIntegrationV1ProjectTaskProjectIdProjectTaskIdSetInvitationStrategyTypePut'][0])
    {

        // verify the required parameter 'projectId' is set
        if ($projectId === null || (is_array($projectId) && count($projectId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $projectId when calling apiIntegrationV1ProjectTaskProjectIdProjectTaskIdSetInvitationStrategyTypePut'
            );
        }

        // verify the required parameter 'projectTaskId' is set
        if ($projectTaskId === null || (is_array($projectTaskId) && count($projectTaskId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $projectTaskId when calling apiIntegrationV1ProjectTaskProjectIdProjectTaskIdSetInvitationStrategyTypePut'
            );
        }

        // verify the required parameter 'invitationStrategyType' is set
        if ($invitationStrategyType === null || (is_array($invitationStrategyType) && count($invitationStrategyType) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invitationStrategyType when calling apiIntegrationV1ProjectTaskProjectIdProjectTaskIdSetInvitationStrategyTypePut'
            );
        }


        $resourcePath = '/api/integration/v1/projectTask/{projectId}/{projectTaskId}/set-invitation-strategy-type';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $invitationStrategyType,
            'invitationStrategyType', // param base name
            'ProjectTaskIndividualInvitationStrategyType', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);


        // path params
        if ($projectId !== null) {
            $resourcePath = str_replace(
                '{' . 'projectId' . '}',
                ObjectSerializer::toPathValue($projectId),
                $resourcePath
            );
        }
        // path params
        if ($projectTaskId !== null) {
            $resourcePath = str_replace(
                '{' . 'projectTaskId' . '}',
                ObjectSerializer::toPathValue($projectTaskId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiIntegrationV1ProjectTaskProjectIdProjectTaskIdSplitByPartsPartsCountPost
     *
     * Split task into partsCount parts
     *
     * @param  string $projectId Project ID (required)
     * @param  string $projectTaskId Task ID (required)
     * @param  int $partsCount Number of parts to divide the task into (required)
     * @param  bool $preserveAssignments Specifies whether assignments should be moved from the parent task (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1ProjectTaskProjectIdProjectTaskIdSplitByPartsPartsCountPost'] to see the possible values for this operation
     *
     * @throws \SmartCat\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SmartCat\Model\SplitProjectTaskByPartsResponse
     */
    public function apiIntegrationV1ProjectTaskProjectIdProjectTaskIdSplitByPartsPartsCountPost($projectId, $projectTaskId, $partsCount, $preserveAssignments = false, string $contentType = self::contentTypes['apiIntegrationV1ProjectTaskProjectIdProjectTaskIdSplitByPartsPartsCountPost'][0])
    {
        list($response) = $this->apiIntegrationV1ProjectTaskProjectIdProjectTaskIdSplitByPartsPartsCountPostWithHttpInfo($projectId, $projectTaskId, $partsCount, $preserveAssignments, $contentType);
        return $response;
    }

    /**
     * Operation apiIntegrationV1ProjectTaskProjectIdProjectTaskIdSplitByPartsPartsCountPostWithHttpInfo
     *
     * Split task into partsCount parts
     *
     * @param  string $projectId Project ID (required)
     * @param  string $projectTaskId Task ID (required)
     * @param  int $partsCount Number of parts to divide the task into (required)
     * @param  bool $preserveAssignments Specifies whether assignments should be moved from the parent task (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1ProjectTaskProjectIdProjectTaskIdSplitByPartsPartsCountPost'] to see the possible values for this operation
     *
     * @throws \SmartCat\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SmartCat\Model\SplitProjectTaskByPartsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiIntegrationV1ProjectTaskProjectIdProjectTaskIdSplitByPartsPartsCountPostWithHttpInfo($projectId, $projectTaskId, $partsCount, $preserveAssignments = false, string $contentType = self::contentTypes['apiIntegrationV1ProjectTaskProjectIdProjectTaskIdSplitByPartsPartsCountPost'][0])
    {
        $request = $this->apiIntegrationV1ProjectTaskProjectIdProjectTaskIdSplitByPartsPartsCountPostRequest($projectId, $projectTaskId, $partsCount, $preserveAssignments, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\SmartCat\Model\SplitProjectTaskByPartsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SmartCat\Model\SplitProjectTaskByPartsResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SmartCat\Model\SplitProjectTaskByPartsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\SmartCat\Model\SplitProjectTaskByPartsResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SmartCat\Model\SplitProjectTaskByPartsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiIntegrationV1ProjectTaskProjectIdProjectTaskIdSplitByPartsPartsCountPostAsync
     *
     * Split task into partsCount parts
     *
     * @param  string $projectId Project ID (required)
     * @param  string $projectTaskId Task ID (required)
     * @param  int $partsCount Number of parts to divide the task into (required)
     * @param  bool $preserveAssignments Specifies whether assignments should be moved from the parent task (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1ProjectTaskProjectIdProjectTaskIdSplitByPartsPartsCountPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiIntegrationV1ProjectTaskProjectIdProjectTaskIdSplitByPartsPartsCountPostAsync($projectId, $projectTaskId, $partsCount, $preserveAssignments = false, string $contentType = self::contentTypes['apiIntegrationV1ProjectTaskProjectIdProjectTaskIdSplitByPartsPartsCountPost'][0])
    {
        return $this->apiIntegrationV1ProjectTaskProjectIdProjectTaskIdSplitByPartsPartsCountPostAsyncWithHttpInfo($projectId, $projectTaskId, $partsCount, $preserveAssignments, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiIntegrationV1ProjectTaskProjectIdProjectTaskIdSplitByPartsPartsCountPostAsyncWithHttpInfo
     *
     * Split task into partsCount parts
     *
     * @param  string $projectId Project ID (required)
     * @param  string $projectTaskId Task ID (required)
     * @param  int $partsCount Number of parts to divide the task into (required)
     * @param  bool $preserveAssignments Specifies whether assignments should be moved from the parent task (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1ProjectTaskProjectIdProjectTaskIdSplitByPartsPartsCountPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiIntegrationV1ProjectTaskProjectIdProjectTaskIdSplitByPartsPartsCountPostAsyncWithHttpInfo($projectId, $projectTaskId, $partsCount, $preserveAssignments = false, string $contentType = self::contentTypes['apiIntegrationV1ProjectTaskProjectIdProjectTaskIdSplitByPartsPartsCountPost'][0])
    {
        $returnType = '\SmartCat\Model\SplitProjectTaskByPartsResponse';
        $request = $this->apiIntegrationV1ProjectTaskProjectIdProjectTaskIdSplitByPartsPartsCountPostRequest($projectId, $projectTaskId, $partsCount, $preserveAssignments, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiIntegrationV1ProjectTaskProjectIdProjectTaskIdSplitByPartsPartsCountPost'
     *
     * @param  string $projectId Project ID (required)
     * @param  string $projectTaskId Task ID (required)
     * @param  int $partsCount Number of parts to divide the task into (required)
     * @param  bool $preserveAssignments Specifies whether assignments should be moved from the parent task (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1ProjectTaskProjectIdProjectTaskIdSplitByPartsPartsCountPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiIntegrationV1ProjectTaskProjectIdProjectTaskIdSplitByPartsPartsCountPostRequest($projectId, $projectTaskId, $partsCount, $preserveAssignments = false, string $contentType = self::contentTypes['apiIntegrationV1ProjectTaskProjectIdProjectTaskIdSplitByPartsPartsCountPost'][0])
    {

        // verify the required parameter 'projectId' is set
        if ($projectId === null || (is_array($projectId) && count($projectId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $projectId when calling apiIntegrationV1ProjectTaskProjectIdProjectTaskIdSplitByPartsPartsCountPost'
            );
        }

        // verify the required parameter 'projectTaskId' is set
        if ($projectTaskId === null || (is_array($projectTaskId) && count($projectTaskId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $projectTaskId when calling apiIntegrationV1ProjectTaskProjectIdProjectTaskIdSplitByPartsPartsCountPost'
            );
        }

        // verify the required parameter 'partsCount' is set
        if ($partsCount === null || (is_array($partsCount) && count($partsCount) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $partsCount when calling apiIntegrationV1ProjectTaskProjectIdProjectTaskIdSplitByPartsPartsCountPost'
            );
        }



        $resourcePath = '/api/integration/v1/projectTask/{projectId}/{projectTaskId}/splitByParts/{partsCount}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $preserveAssignments,
            'preserveAssignments', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($projectId !== null) {
            $resourcePath = str_replace(
                '{' . 'projectId' . '}',
                ObjectSerializer::toPathValue($projectId),
                $resourcePath
            );
        }
        // path params
        if ($projectTaskId !== null) {
            $resourcePath = str_replace(
                '{' . 'projectTaskId' . '}',
                ObjectSerializer::toPathValue($projectTaskId),
                $resourcePath
            );
        }
        // path params
        if ($partsCount !== null) {
            $resourcePath = str_replace(
                '{' . 'partsCount' . '}',
                ObjectSerializer::toPathValue($partsCount),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiIntegrationV1ProjectTaskProjectIdProjectTaskIdSplitPost
     *
     * Move the task volume to another task
     *
     * @param  string $projectId Project ID (required)
     * @param  string $projectTaskId Task ID (required)
     * @param  \SmartCat\Model\SplitProjectTaskRequest $splitProjectTaskRequest Data required to move the task volume (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1ProjectTaskProjectIdProjectTaskIdSplitPost'] to see the possible values for this operation
     *
     * @throws \SmartCat\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SmartCat\Model\SplitProjectTaskResponse
     */
    public function apiIntegrationV1ProjectTaskProjectIdProjectTaskIdSplitPost($projectId, $projectTaskId, $splitProjectTaskRequest = null, string $contentType = self::contentTypes['apiIntegrationV1ProjectTaskProjectIdProjectTaskIdSplitPost'][0])
    {
        list($response) = $this->apiIntegrationV1ProjectTaskProjectIdProjectTaskIdSplitPostWithHttpInfo($projectId, $projectTaskId, $splitProjectTaskRequest, $contentType);
        return $response;
    }

    /**
     * Operation apiIntegrationV1ProjectTaskProjectIdProjectTaskIdSplitPostWithHttpInfo
     *
     * Move the task volume to another task
     *
     * @param  string $projectId Project ID (required)
     * @param  string $projectTaskId Task ID (required)
     * @param  \SmartCat\Model\SplitProjectTaskRequest $splitProjectTaskRequest Data required to move the task volume (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1ProjectTaskProjectIdProjectTaskIdSplitPost'] to see the possible values for this operation
     *
     * @throws \SmartCat\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SmartCat\Model\SplitProjectTaskResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiIntegrationV1ProjectTaskProjectIdProjectTaskIdSplitPostWithHttpInfo($projectId, $projectTaskId, $splitProjectTaskRequest = null, string $contentType = self::contentTypes['apiIntegrationV1ProjectTaskProjectIdProjectTaskIdSplitPost'][0])
    {
        $request = $this->apiIntegrationV1ProjectTaskProjectIdProjectTaskIdSplitPostRequest($projectId, $projectTaskId, $splitProjectTaskRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\SmartCat\Model\SplitProjectTaskResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SmartCat\Model\SplitProjectTaskResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SmartCat\Model\SplitProjectTaskResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\SmartCat\Model\SplitProjectTaskResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SmartCat\Model\SplitProjectTaskResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiIntegrationV1ProjectTaskProjectIdProjectTaskIdSplitPostAsync
     *
     * Move the task volume to another task
     *
     * @param  string $projectId Project ID (required)
     * @param  string $projectTaskId Task ID (required)
     * @param  \SmartCat\Model\SplitProjectTaskRequest $splitProjectTaskRequest Data required to move the task volume (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1ProjectTaskProjectIdProjectTaskIdSplitPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiIntegrationV1ProjectTaskProjectIdProjectTaskIdSplitPostAsync($projectId, $projectTaskId, $splitProjectTaskRequest = null, string $contentType = self::contentTypes['apiIntegrationV1ProjectTaskProjectIdProjectTaskIdSplitPost'][0])
    {
        return $this->apiIntegrationV1ProjectTaskProjectIdProjectTaskIdSplitPostAsyncWithHttpInfo($projectId, $projectTaskId, $splitProjectTaskRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiIntegrationV1ProjectTaskProjectIdProjectTaskIdSplitPostAsyncWithHttpInfo
     *
     * Move the task volume to another task
     *
     * @param  string $projectId Project ID (required)
     * @param  string $projectTaskId Task ID (required)
     * @param  \SmartCat\Model\SplitProjectTaskRequest $splitProjectTaskRequest Data required to move the task volume (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1ProjectTaskProjectIdProjectTaskIdSplitPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiIntegrationV1ProjectTaskProjectIdProjectTaskIdSplitPostAsyncWithHttpInfo($projectId, $projectTaskId, $splitProjectTaskRequest = null, string $contentType = self::contentTypes['apiIntegrationV1ProjectTaskProjectIdProjectTaskIdSplitPost'][0])
    {
        $returnType = '\SmartCat\Model\SplitProjectTaskResponse';
        $request = $this->apiIntegrationV1ProjectTaskProjectIdProjectTaskIdSplitPostRequest($projectId, $projectTaskId, $splitProjectTaskRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiIntegrationV1ProjectTaskProjectIdProjectTaskIdSplitPost'
     *
     * @param  string $projectId Project ID (required)
     * @param  string $projectTaskId Task ID (required)
     * @param  \SmartCat\Model\SplitProjectTaskRequest $splitProjectTaskRequest Data required to move the task volume (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1ProjectTaskProjectIdProjectTaskIdSplitPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiIntegrationV1ProjectTaskProjectIdProjectTaskIdSplitPostRequest($projectId, $projectTaskId, $splitProjectTaskRequest = null, string $contentType = self::contentTypes['apiIntegrationV1ProjectTaskProjectIdProjectTaskIdSplitPost'][0])
    {

        // verify the required parameter 'projectId' is set
        if ($projectId === null || (is_array($projectId) && count($projectId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $projectId when calling apiIntegrationV1ProjectTaskProjectIdProjectTaskIdSplitPost'
            );
        }

        // verify the required parameter 'projectTaskId' is set
        if ($projectTaskId === null || (is_array($projectTaskId) && count($projectTaskId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $projectTaskId when calling apiIntegrationV1ProjectTaskProjectIdProjectTaskIdSplitPost'
            );
        }



        $resourcePath = '/api/integration/v1/projectTask/{projectId}/{projectTaskId}/split';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($projectId !== null) {
            $resourcePath = str_replace(
                '{' . 'projectId' . '}',
                ObjectSerializer::toPathValue($projectId),
                $resourcePath
            );
        }
        // path params
        if ($projectTaskId !== null) {
            $resourcePath = str_replace(
                '{' . 'projectTaskId' . '}',
                ObjectSerializer::toPathValue($projectTaskId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($splitProjectTaskRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($splitProjectTaskRequest));
            } else {
                $httpBody = $splitProjectTaskRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiIntegrationV1ProjectTaskProjectIdProjectTaskIdVendorAssignmentDelete
     *
     * Remove supplier assignment
     *
     * @param  string $projectId Project ID (required)
     * @param  string $projectTaskId Task ID (required)
     * @param  string $vendorAccountId Identifier of the supplier account whose assignment is to be removed (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1ProjectTaskProjectIdProjectTaskIdVendorAssignmentDelete'] to see the possible values for this operation
     *
     * @throws \SmartCat\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return bool
     */
    public function apiIntegrationV1ProjectTaskProjectIdProjectTaskIdVendorAssignmentDelete($projectId, $projectTaskId, $vendorAccountId, string $contentType = self::contentTypes['apiIntegrationV1ProjectTaskProjectIdProjectTaskIdVendorAssignmentDelete'][0])
    {
        list($response) = $this->apiIntegrationV1ProjectTaskProjectIdProjectTaskIdVendorAssignmentDeleteWithHttpInfo($projectId, $projectTaskId, $vendorAccountId, $contentType);
        return $response;
    }

    /**
     * Operation apiIntegrationV1ProjectTaskProjectIdProjectTaskIdVendorAssignmentDeleteWithHttpInfo
     *
     * Remove supplier assignment
     *
     * @param  string $projectId Project ID (required)
     * @param  string $projectTaskId Task ID (required)
     * @param  string $vendorAccountId Identifier of the supplier account whose assignment is to be removed (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1ProjectTaskProjectIdProjectTaskIdVendorAssignmentDelete'] to see the possible values for this operation
     *
     * @throws \SmartCat\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of bool, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiIntegrationV1ProjectTaskProjectIdProjectTaskIdVendorAssignmentDeleteWithHttpInfo($projectId, $projectTaskId, $vendorAccountId, string $contentType = self::contentTypes['apiIntegrationV1ProjectTaskProjectIdProjectTaskIdVendorAssignmentDelete'][0])
    {
        $request = $this->apiIntegrationV1ProjectTaskProjectIdProjectTaskIdVendorAssignmentDeleteRequest($projectId, $projectTaskId, $vendorAccountId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('bool' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('bool' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'bool', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'bool';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'bool',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiIntegrationV1ProjectTaskProjectIdProjectTaskIdVendorAssignmentDeleteAsync
     *
     * Remove supplier assignment
     *
     * @param  string $projectId Project ID (required)
     * @param  string $projectTaskId Task ID (required)
     * @param  string $vendorAccountId Identifier of the supplier account whose assignment is to be removed (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1ProjectTaskProjectIdProjectTaskIdVendorAssignmentDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiIntegrationV1ProjectTaskProjectIdProjectTaskIdVendorAssignmentDeleteAsync($projectId, $projectTaskId, $vendorAccountId, string $contentType = self::contentTypes['apiIntegrationV1ProjectTaskProjectIdProjectTaskIdVendorAssignmentDelete'][0])
    {
        return $this->apiIntegrationV1ProjectTaskProjectIdProjectTaskIdVendorAssignmentDeleteAsyncWithHttpInfo($projectId, $projectTaskId, $vendorAccountId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiIntegrationV1ProjectTaskProjectIdProjectTaskIdVendorAssignmentDeleteAsyncWithHttpInfo
     *
     * Remove supplier assignment
     *
     * @param  string $projectId Project ID (required)
     * @param  string $projectTaskId Task ID (required)
     * @param  string $vendorAccountId Identifier of the supplier account whose assignment is to be removed (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1ProjectTaskProjectIdProjectTaskIdVendorAssignmentDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiIntegrationV1ProjectTaskProjectIdProjectTaskIdVendorAssignmentDeleteAsyncWithHttpInfo($projectId, $projectTaskId, $vendorAccountId, string $contentType = self::contentTypes['apiIntegrationV1ProjectTaskProjectIdProjectTaskIdVendorAssignmentDelete'][0])
    {
        $returnType = 'bool';
        $request = $this->apiIntegrationV1ProjectTaskProjectIdProjectTaskIdVendorAssignmentDeleteRequest($projectId, $projectTaskId, $vendorAccountId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiIntegrationV1ProjectTaskProjectIdProjectTaskIdVendorAssignmentDelete'
     *
     * @param  string $projectId Project ID (required)
     * @param  string $projectTaskId Task ID (required)
     * @param  string $vendorAccountId Identifier of the supplier account whose assignment is to be removed (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1ProjectTaskProjectIdProjectTaskIdVendorAssignmentDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiIntegrationV1ProjectTaskProjectIdProjectTaskIdVendorAssignmentDeleteRequest($projectId, $projectTaskId, $vendorAccountId, string $contentType = self::contentTypes['apiIntegrationV1ProjectTaskProjectIdProjectTaskIdVendorAssignmentDelete'][0])
    {

        // verify the required parameter 'projectId' is set
        if ($projectId === null || (is_array($projectId) && count($projectId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $projectId when calling apiIntegrationV1ProjectTaskProjectIdProjectTaskIdVendorAssignmentDelete'
            );
        }

        // verify the required parameter 'projectTaskId' is set
        if ($projectTaskId === null || (is_array($projectTaskId) && count($projectTaskId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $projectTaskId when calling apiIntegrationV1ProjectTaskProjectIdProjectTaskIdVendorAssignmentDelete'
            );
        }

        // verify the required parameter 'vendorAccountId' is set
        if ($vendorAccountId === null || (is_array($vendorAccountId) && count($vendorAccountId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $vendorAccountId when calling apiIntegrationV1ProjectTaskProjectIdProjectTaskIdVendorAssignmentDelete'
            );
        }


        $resourcePath = '/api/integration/v1/projectTask/{projectId}/{projectTaskId}/vendor-assignment';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $vendorAccountId,
            'vendorAccountId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);


        // path params
        if ($projectId !== null) {
            $resourcePath = str_replace(
                '{' . 'projectId' . '}',
                ObjectSerializer::toPathValue($projectId),
                $resourcePath
            );
        }
        // path params
        if ($projectTaskId !== null) {
            $resourcePath = str_replace(
                '{' . 'projectTaskId' . '}',
                ObjectSerializer::toPathValue($projectTaskId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiIntegrationV1ProjectTaskProjectIdProjectTaskIdVendorAssignmentPut
     *
     * Assign a supplier to perform task  projectTaskId
     *
     * @param  \SmartCat\Model\VendorAssignmentRequestModel $vendorAssignmentRequestModel Request for assignment of a supplier (required)
     * @param  string $projectId Project ID (required)
     * @param  string $projectTaskId Task ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1ProjectTaskProjectIdProjectTaskIdVendorAssignmentPut'] to see the possible values for this operation
     *
     * @throws \SmartCat\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return bool
     */
    public function apiIntegrationV1ProjectTaskProjectIdProjectTaskIdVendorAssignmentPut($vendorAssignmentRequestModel, $projectId, $projectTaskId, string $contentType = self::contentTypes['apiIntegrationV1ProjectTaskProjectIdProjectTaskIdVendorAssignmentPut'][0])
    {
        list($response) = $this->apiIntegrationV1ProjectTaskProjectIdProjectTaskIdVendorAssignmentPutWithHttpInfo($vendorAssignmentRequestModel, $projectId, $projectTaskId, $contentType);
        return $response;
    }

    /**
     * Operation apiIntegrationV1ProjectTaskProjectIdProjectTaskIdVendorAssignmentPutWithHttpInfo
     *
     * Assign a supplier to perform task  projectTaskId
     *
     * @param  \SmartCat\Model\VendorAssignmentRequestModel $vendorAssignmentRequestModel Request for assignment of a supplier (required)
     * @param  string $projectId Project ID (required)
     * @param  string $projectTaskId Task ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1ProjectTaskProjectIdProjectTaskIdVendorAssignmentPut'] to see the possible values for this operation
     *
     * @throws \SmartCat\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of bool, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiIntegrationV1ProjectTaskProjectIdProjectTaskIdVendorAssignmentPutWithHttpInfo($vendorAssignmentRequestModel, $projectId, $projectTaskId, string $contentType = self::contentTypes['apiIntegrationV1ProjectTaskProjectIdProjectTaskIdVendorAssignmentPut'][0])
    {
        $request = $this->apiIntegrationV1ProjectTaskProjectIdProjectTaskIdVendorAssignmentPutRequest($vendorAssignmentRequestModel, $projectId, $projectTaskId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('bool' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('bool' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'bool', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'bool';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'bool',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiIntegrationV1ProjectTaskProjectIdProjectTaskIdVendorAssignmentPutAsync
     *
     * Assign a supplier to perform task  projectTaskId
     *
     * @param  \SmartCat\Model\VendorAssignmentRequestModel $vendorAssignmentRequestModel Request for assignment of a supplier (required)
     * @param  string $projectId Project ID (required)
     * @param  string $projectTaskId Task ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1ProjectTaskProjectIdProjectTaskIdVendorAssignmentPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiIntegrationV1ProjectTaskProjectIdProjectTaskIdVendorAssignmentPutAsync($vendorAssignmentRequestModel, $projectId, $projectTaskId, string $contentType = self::contentTypes['apiIntegrationV1ProjectTaskProjectIdProjectTaskIdVendorAssignmentPut'][0])
    {
        return $this->apiIntegrationV1ProjectTaskProjectIdProjectTaskIdVendorAssignmentPutAsyncWithHttpInfo($vendorAssignmentRequestModel, $projectId, $projectTaskId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiIntegrationV1ProjectTaskProjectIdProjectTaskIdVendorAssignmentPutAsyncWithHttpInfo
     *
     * Assign a supplier to perform task  projectTaskId
     *
     * @param  \SmartCat\Model\VendorAssignmentRequestModel $vendorAssignmentRequestModel Request for assignment of a supplier (required)
     * @param  string $projectId Project ID (required)
     * @param  string $projectTaskId Task ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1ProjectTaskProjectIdProjectTaskIdVendorAssignmentPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiIntegrationV1ProjectTaskProjectIdProjectTaskIdVendorAssignmentPutAsyncWithHttpInfo($vendorAssignmentRequestModel, $projectId, $projectTaskId, string $contentType = self::contentTypes['apiIntegrationV1ProjectTaskProjectIdProjectTaskIdVendorAssignmentPut'][0])
    {
        $returnType = 'bool';
        $request = $this->apiIntegrationV1ProjectTaskProjectIdProjectTaskIdVendorAssignmentPutRequest($vendorAssignmentRequestModel, $projectId, $projectTaskId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiIntegrationV1ProjectTaskProjectIdProjectTaskIdVendorAssignmentPut'
     *
     * @param  \SmartCat\Model\VendorAssignmentRequestModel $vendorAssignmentRequestModel Request for assignment of a supplier (required)
     * @param  string $projectId Project ID (required)
     * @param  string $projectTaskId Task ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1ProjectTaskProjectIdProjectTaskIdVendorAssignmentPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiIntegrationV1ProjectTaskProjectIdProjectTaskIdVendorAssignmentPutRequest($vendorAssignmentRequestModel, $projectId, $projectTaskId, string $contentType = self::contentTypes['apiIntegrationV1ProjectTaskProjectIdProjectTaskIdVendorAssignmentPut'][0])
    {

        // verify the required parameter 'vendorAssignmentRequestModel' is set
        if ($vendorAssignmentRequestModel === null || (is_array($vendorAssignmentRequestModel) && count($vendorAssignmentRequestModel) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $vendorAssignmentRequestModel when calling apiIntegrationV1ProjectTaskProjectIdProjectTaskIdVendorAssignmentPut'
            );
        }

        // verify the required parameter 'projectId' is set
        if ($projectId === null || (is_array($projectId) && count($projectId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $projectId when calling apiIntegrationV1ProjectTaskProjectIdProjectTaskIdVendorAssignmentPut'
            );
        }

        // verify the required parameter 'projectTaskId' is set
        if ($projectTaskId === null || (is_array($projectTaskId) && count($projectTaskId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $projectTaskId when calling apiIntegrationV1ProjectTaskProjectIdProjectTaskIdVendorAssignmentPut'
            );
        }


        $resourcePath = '/api/integration/v1/projectTask/{projectId}/{projectTaskId}/vendor-assignment';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($projectId !== null) {
            $resourcePath = str_replace(
                '{' . 'projectId' . '}',
                ObjectSerializer::toPathValue($projectId),
                $resourcePath
            );
        }
        // path params
        if ($projectTaskId !== null) {
            $resourcePath = str_replace(
                '{' . 'projectTaskId' . '}',
                ObjectSerializer::toPathValue($projectTaskId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($vendorAssignmentRequestModel)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($vendorAssignmentRequestModel));
            } else {
                $httpBody = $vendorAssignmentRequestModel;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
