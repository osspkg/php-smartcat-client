<?php
/**
 * LspServiceApi
 * PHP version 7.4
 *
 * @category Class
 * @package  SmartCat
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Smartcat API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SmartCat\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use SmartCat\ApiException;
use SmartCat\Configuration;
use SmartCat\HeaderSelector;
use SmartCat\ObjectSerializer;

/**
 * LspServiceApi Class Doc Comment
 *
 * @category Class
 * @package  SmartCat
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class LspServiceApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'apiIntegrationV1LspServicesServiceIdDelete' => [
            'application/json',
        ],
        'apiIntegrationV2LspServicesBatchGet' => [
            'application/json',
        ],
        'apiIntegrationV2LspServicesBatchPost' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'apiIntegrationV2LspServicesGet' => [
            'application/json',
        ],
        'apiIntegrationV2LspServicesPost' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'apiIntegrationV2LspServicesServiceIdPut' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation apiIntegrationV1LspServicesServiceIdDelete
     *
     * Delete an LSP service
     *
     * @param  string $serviceId Service ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1LspServicesServiceIdDelete'] to see the possible values for this operation
     *
     * @throws \SmartCat\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiIntegrationV1LspServicesServiceIdDelete($serviceId, string $contentType = self::contentTypes['apiIntegrationV1LspServicesServiceIdDelete'][0])
    {
        $this->apiIntegrationV1LspServicesServiceIdDeleteWithHttpInfo($serviceId, $contentType);
    }

    /**
     * Operation apiIntegrationV1LspServicesServiceIdDeleteWithHttpInfo
     *
     * Delete an LSP service
     *
     * @param  string $serviceId Service ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1LspServicesServiceIdDelete'] to see the possible values for this operation
     *
     * @throws \SmartCat\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiIntegrationV1LspServicesServiceIdDeleteWithHttpInfo($serviceId, string $contentType = self::contentTypes['apiIntegrationV1LspServicesServiceIdDelete'][0])
    {
        $request = $this->apiIntegrationV1LspServicesServiceIdDeleteRequest($serviceId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiIntegrationV1LspServicesServiceIdDeleteAsync
     *
     * Delete an LSP service
     *
     * @param  string $serviceId Service ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1LspServicesServiceIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiIntegrationV1LspServicesServiceIdDeleteAsync($serviceId, string $contentType = self::contentTypes['apiIntegrationV1LspServicesServiceIdDelete'][0])
    {
        return $this->apiIntegrationV1LspServicesServiceIdDeleteAsyncWithHttpInfo($serviceId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiIntegrationV1LspServicesServiceIdDeleteAsyncWithHttpInfo
     *
     * Delete an LSP service
     *
     * @param  string $serviceId Service ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1LspServicesServiceIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiIntegrationV1LspServicesServiceIdDeleteAsyncWithHttpInfo($serviceId, string $contentType = self::contentTypes['apiIntegrationV1LspServicesServiceIdDelete'][0])
    {
        $returnType = '';
        $request = $this->apiIntegrationV1LspServicesServiceIdDeleteRequest($serviceId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiIntegrationV1LspServicesServiceIdDelete'
     *
     * @param  string $serviceId Service ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1LspServicesServiceIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiIntegrationV1LspServicesServiceIdDeleteRequest($serviceId, string $contentType = self::contentTypes['apiIntegrationV1LspServicesServiceIdDelete'][0])
    {

        // verify the required parameter 'serviceId' is set
        if ($serviceId === null || (is_array($serviceId) && count($serviceId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $serviceId when calling apiIntegrationV1LspServicesServiceIdDelete'
            );
        }


        $resourcePath = '/api/integration/v1/lsp/services/{serviceId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($serviceId !== null) {
            $resourcePath = str_replace(
                '{' . 'serviceId' . '}',
                ObjectSerializer::toPathValue($serviceId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiIntegrationV2LspServicesBatchGet
     *
     * Fetch LSP services
     *
     * @param  string $lastServiceId Fetch the list of services starting from the ID that follows the specified ID (required)
     * @param  int $limit The required number of results (the default is 100) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV2LspServicesBatchGet'] to see the possible values for this operation
     *
     * @throws \SmartCat\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SmartCat\Model\LspServiceModelV2[]
     */
    public function apiIntegrationV2LspServicesBatchGet($lastServiceId, $limit, string $contentType = self::contentTypes['apiIntegrationV2LspServicesBatchGet'][0])
    {
        list($response) = $this->apiIntegrationV2LspServicesBatchGetWithHttpInfo($lastServiceId, $limit, $contentType);
        return $response;
    }

    /**
     * Operation apiIntegrationV2LspServicesBatchGetWithHttpInfo
     *
     * Fetch LSP services
     *
     * @param  string $lastServiceId Fetch the list of services starting from the ID that follows the specified ID (required)
     * @param  int $limit The required number of results (the default is 100) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV2LspServicesBatchGet'] to see the possible values for this operation
     *
     * @throws \SmartCat\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SmartCat\Model\LspServiceModelV2[], HTTP status code, HTTP response headers (array of strings)
     */
    public function apiIntegrationV2LspServicesBatchGetWithHttpInfo($lastServiceId, $limit, string $contentType = self::contentTypes['apiIntegrationV2LspServicesBatchGet'][0])
    {
        $request = $this->apiIntegrationV2LspServicesBatchGetRequest($lastServiceId, $limit, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\SmartCat\Model\LspServiceModelV2[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SmartCat\Model\LspServiceModelV2[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SmartCat\Model\LspServiceModelV2[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\SmartCat\Model\LspServiceModelV2[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SmartCat\Model\LspServiceModelV2[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiIntegrationV2LspServicesBatchGetAsync
     *
     * Fetch LSP services
     *
     * @param  string $lastServiceId Fetch the list of services starting from the ID that follows the specified ID (required)
     * @param  int $limit The required number of results (the default is 100) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV2LspServicesBatchGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiIntegrationV2LspServicesBatchGetAsync($lastServiceId, $limit, string $contentType = self::contentTypes['apiIntegrationV2LspServicesBatchGet'][0])
    {
        return $this->apiIntegrationV2LspServicesBatchGetAsyncWithHttpInfo($lastServiceId, $limit, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiIntegrationV2LspServicesBatchGetAsyncWithHttpInfo
     *
     * Fetch LSP services
     *
     * @param  string $lastServiceId Fetch the list of services starting from the ID that follows the specified ID (required)
     * @param  int $limit The required number of results (the default is 100) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV2LspServicesBatchGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiIntegrationV2LspServicesBatchGetAsyncWithHttpInfo($lastServiceId, $limit, string $contentType = self::contentTypes['apiIntegrationV2LspServicesBatchGet'][0])
    {
        $returnType = '\SmartCat\Model\LspServiceModelV2[]';
        $request = $this->apiIntegrationV2LspServicesBatchGetRequest($lastServiceId, $limit, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiIntegrationV2LspServicesBatchGet'
     *
     * @param  string $lastServiceId Fetch the list of services starting from the ID that follows the specified ID (required)
     * @param  int $limit The required number of results (the default is 100) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV2LspServicesBatchGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiIntegrationV2LspServicesBatchGetRequest($lastServiceId, $limit, string $contentType = self::contentTypes['apiIntegrationV2LspServicesBatchGet'][0])
    {

        // verify the required parameter 'lastServiceId' is set
        if ($lastServiceId === null || (is_array($lastServiceId) && count($lastServiceId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $lastServiceId when calling apiIntegrationV2LspServicesBatchGet'
            );
        }

        // verify the required parameter 'limit' is set
        if ($limit === null || (is_array($limit) && count($limit) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $limit when calling apiIntegrationV2LspServicesBatchGet'
            );
        }


        $resourcePath = '/api/integration/v2/lsp/services/batch';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $lastServiceId,
            'lastServiceId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiIntegrationV2LspServicesBatchPost
     *
     * Create new LSP services
     *
     * @param  \SmartCat\Model\LspUpdateServiceModelV2[] $lspUpdateServiceModelV2 An array of service creation requests (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV2LspServicesBatchPost'] to see the possible values for this operation
     *
     * @throws \SmartCat\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SmartCat\Model\AddBatchResult[]
     */
    public function apiIntegrationV2LspServicesBatchPost($lspUpdateServiceModelV2, string $contentType = self::contentTypes['apiIntegrationV2LspServicesBatchPost'][0])
    {
        list($response) = $this->apiIntegrationV2LspServicesBatchPostWithHttpInfo($lspUpdateServiceModelV2, $contentType);
        return $response;
    }

    /**
     * Operation apiIntegrationV2LspServicesBatchPostWithHttpInfo
     *
     * Create new LSP services
     *
     * @param  \SmartCat\Model\LspUpdateServiceModelV2[] $lspUpdateServiceModelV2 An array of service creation requests (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV2LspServicesBatchPost'] to see the possible values for this operation
     *
     * @throws \SmartCat\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SmartCat\Model\AddBatchResult[], HTTP status code, HTTP response headers (array of strings)
     */
    public function apiIntegrationV2LspServicesBatchPostWithHttpInfo($lspUpdateServiceModelV2, string $contentType = self::contentTypes['apiIntegrationV2LspServicesBatchPost'][0])
    {
        $request = $this->apiIntegrationV2LspServicesBatchPostRequest($lspUpdateServiceModelV2, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\SmartCat\Model\AddBatchResult[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SmartCat\Model\AddBatchResult[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SmartCat\Model\AddBatchResult[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\SmartCat\Model\AddBatchResult[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SmartCat\Model\AddBatchResult[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiIntegrationV2LspServicesBatchPostAsync
     *
     * Create new LSP services
     *
     * @param  \SmartCat\Model\LspUpdateServiceModelV2[] $lspUpdateServiceModelV2 An array of service creation requests (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV2LspServicesBatchPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiIntegrationV2LspServicesBatchPostAsync($lspUpdateServiceModelV2, string $contentType = self::contentTypes['apiIntegrationV2LspServicesBatchPost'][0])
    {
        return $this->apiIntegrationV2LspServicesBatchPostAsyncWithHttpInfo($lspUpdateServiceModelV2, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiIntegrationV2LspServicesBatchPostAsyncWithHttpInfo
     *
     * Create new LSP services
     *
     * @param  \SmartCat\Model\LspUpdateServiceModelV2[] $lspUpdateServiceModelV2 An array of service creation requests (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV2LspServicesBatchPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiIntegrationV2LspServicesBatchPostAsyncWithHttpInfo($lspUpdateServiceModelV2, string $contentType = self::contentTypes['apiIntegrationV2LspServicesBatchPost'][0])
    {
        $returnType = '\SmartCat\Model\AddBatchResult[]';
        $request = $this->apiIntegrationV2LspServicesBatchPostRequest($lspUpdateServiceModelV2, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiIntegrationV2LspServicesBatchPost'
     *
     * @param  \SmartCat\Model\LspUpdateServiceModelV2[] $lspUpdateServiceModelV2 An array of service creation requests (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV2LspServicesBatchPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiIntegrationV2LspServicesBatchPostRequest($lspUpdateServiceModelV2, string $contentType = self::contentTypes['apiIntegrationV2LspServicesBatchPost'][0])
    {

        // verify the required parameter 'lspUpdateServiceModelV2' is set
        if ($lspUpdateServiceModelV2 === null || (is_array($lspUpdateServiceModelV2) && count($lspUpdateServiceModelV2) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $lspUpdateServiceModelV2 when calling apiIntegrationV2LspServicesBatchPost'
            );
        }


        $resourcePath = '/api/integration/v2/lsp/services/batch';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($lspUpdateServiceModelV2)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($lspUpdateServiceModelV2));
            } else {
                $httpBody = $lspUpdateServiceModelV2;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiIntegrationV2LspServicesGet
     *
     * Fetch LSP services by ID
     *
     * @param  string[] $serviceIds List of service IDs (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV2LspServicesGet'] to see the possible values for this operation
     *
     * @throws \SmartCat\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SmartCat\Model\LspServiceModelV2[]
     */
    public function apiIntegrationV2LspServicesGet($serviceIds, string $contentType = self::contentTypes['apiIntegrationV2LspServicesGet'][0])
    {
        list($response) = $this->apiIntegrationV2LspServicesGetWithHttpInfo($serviceIds, $contentType);
        return $response;
    }

    /**
     * Operation apiIntegrationV2LspServicesGetWithHttpInfo
     *
     * Fetch LSP services by ID
     *
     * @param  string[] $serviceIds List of service IDs (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV2LspServicesGet'] to see the possible values for this operation
     *
     * @throws \SmartCat\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SmartCat\Model\LspServiceModelV2[], HTTP status code, HTTP response headers (array of strings)
     */
    public function apiIntegrationV2LspServicesGetWithHttpInfo($serviceIds, string $contentType = self::contentTypes['apiIntegrationV2LspServicesGet'][0])
    {
        $request = $this->apiIntegrationV2LspServicesGetRequest($serviceIds, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\SmartCat\Model\LspServiceModelV2[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SmartCat\Model\LspServiceModelV2[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SmartCat\Model\LspServiceModelV2[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\SmartCat\Model\LspServiceModelV2[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SmartCat\Model\LspServiceModelV2[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiIntegrationV2LspServicesGetAsync
     *
     * Fetch LSP services by ID
     *
     * @param  string[] $serviceIds List of service IDs (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV2LspServicesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiIntegrationV2LspServicesGetAsync($serviceIds, string $contentType = self::contentTypes['apiIntegrationV2LspServicesGet'][0])
    {
        return $this->apiIntegrationV2LspServicesGetAsyncWithHttpInfo($serviceIds, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiIntegrationV2LspServicesGetAsyncWithHttpInfo
     *
     * Fetch LSP services by ID
     *
     * @param  string[] $serviceIds List of service IDs (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV2LspServicesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiIntegrationV2LspServicesGetAsyncWithHttpInfo($serviceIds, string $contentType = self::contentTypes['apiIntegrationV2LspServicesGet'][0])
    {
        $returnType = '\SmartCat\Model\LspServiceModelV2[]';
        $request = $this->apiIntegrationV2LspServicesGetRequest($serviceIds, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiIntegrationV2LspServicesGet'
     *
     * @param  string[] $serviceIds List of service IDs (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV2LspServicesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiIntegrationV2LspServicesGetRequest($serviceIds, string $contentType = self::contentTypes['apiIntegrationV2LspServicesGet'][0])
    {

        // verify the required parameter 'serviceIds' is set
        if ($serviceIds === null || (is_array($serviceIds) && count($serviceIds) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $serviceIds when calling apiIntegrationV2LspServicesGet'
            );
        }


        $resourcePath = '/api/integration/v2/lsp/services';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $serviceIds,
            'serviceIds', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiIntegrationV2LspServicesPost
     *
     * Create a new LSP service
     *
     * @param  \SmartCat\Model\LspUpdateServiceModelV2 $lspUpdateServiceModelV2 An array of service creation requests (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV2LspServicesPost'] to see the possible values for this operation
     *
     * @throws \SmartCat\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function apiIntegrationV2LspServicesPost($lspUpdateServiceModelV2, string $contentType = self::contentTypes['apiIntegrationV2LspServicesPost'][0])
    {
        list($response) = $this->apiIntegrationV2LspServicesPostWithHttpInfo($lspUpdateServiceModelV2, $contentType);
        return $response;
    }

    /**
     * Operation apiIntegrationV2LspServicesPostWithHttpInfo
     *
     * Create a new LSP service
     *
     * @param  \SmartCat\Model\LspUpdateServiceModelV2 $lspUpdateServiceModelV2 An array of service creation requests (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV2LspServicesPost'] to see the possible values for this operation
     *
     * @throws \SmartCat\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiIntegrationV2LspServicesPostWithHttpInfo($lspUpdateServiceModelV2, string $contentType = self::contentTypes['apiIntegrationV2LspServicesPost'][0])
    {
        $request = $this->apiIntegrationV2LspServicesPostRequest($lspUpdateServiceModelV2, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'string';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiIntegrationV2LspServicesPostAsync
     *
     * Create a new LSP service
     *
     * @param  \SmartCat\Model\LspUpdateServiceModelV2 $lspUpdateServiceModelV2 An array of service creation requests (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV2LspServicesPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiIntegrationV2LspServicesPostAsync($lspUpdateServiceModelV2, string $contentType = self::contentTypes['apiIntegrationV2LspServicesPost'][0])
    {
        return $this->apiIntegrationV2LspServicesPostAsyncWithHttpInfo($lspUpdateServiceModelV2, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiIntegrationV2LspServicesPostAsyncWithHttpInfo
     *
     * Create a new LSP service
     *
     * @param  \SmartCat\Model\LspUpdateServiceModelV2 $lspUpdateServiceModelV2 An array of service creation requests (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV2LspServicesPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiIntegrationV2LspServicesPostAsyncWithHttpInfo($lspUpdateServiceModelV2, string $contentType = self::contentTypes['apiIntegrationV2LspServicesPost'][0])
    {
        $returnType = 'string';
        $request = $this->apiIntegrationV2LspServicesPostRequest($lspUpdateServiceModelV2, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiIntegrationV2LspServicesPost'
     *
     * @param  \SmartCat\Model\LspUpdateServiceModelV2 $lspUpdateServiceModelV2 An array of service creation requests (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV2LspServicesPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiIntegrationV2LspServicesPostRequest($lspUpdateServiceModelV2, string $contentType = self::contentTypes['apiIntegrationV2LspServicesPost'][0])
    {

        // verify the required parameter 'lspUpdateServiceModelV2' is set
        if ($lspUpdateServiceModelV2 === null || (is_array($lspUpdateServiceModelV2) && count($lspUpdateServiceModelV2) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $lspUpdateServiceModelV2 when calling apiIntegrationV2LspServicesPost'
            );
        }


        $resourcePath = '/api/integration/v2/lsp/services';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($lspUpdateServiceModelV2)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($lspUpdateServiceModelV2));
            } else {
                $httpBody = $lspUpdateServiceModelV2;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiIntegrationV2LspServicesServiceIdPut
     *
     * Update an existing LSP service
     *
     * @param  \SmartCat\Model\LspUpdateServiceModelV2 $lspUpdateServiceModelV2 Service update request (required)
     * @param  string $serviceId Service ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV2LspServicesServiceIdPut'] to see the possible values for this operation
     *
     * @throws \SmartCat\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiIntegrationV2LspServicesServiceIdPut($lspUpdateServiceModelV2, $serviceId, string $contentType = self::contentTypes['apiIntegrationV2LspServicesServiceIdPut'][0])
    {
        $this->apiIntegrationV2LspServicesServiceIdPutWithHttpInfo($lspUpdateServiceModelV2, $serviceId, $contentType);
    }

    /**
     * Operation apiIntegrationV2LspServicesServiceIdPutWithHttpInfo
     *
     * Update an existing LSP service
     *
     * @param  \SmartCat\Model\LspUpdateServiceModelV2 $lspUpdateServiceModelV2 Service update request (required)
     * @param  string $serviceId Service ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV2LspServicesServiceIdPut'] to see the possible values for this operation
     *
     * @throws \SmartCat\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiIntegrationV2LspServicesServiceIdPutWithHttpInfo($lspUpdateServiceModelV2, $serviceId, string $contentType = self::contentTypes['apiIntegrationV2LspServicesServiceIdPut'][0])
    {
        $request = $this->apiIntegrationV2LspServicesServiceIdPutRequest($lspUpdateServiceModelV2, $serviceId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiIntegrationV2LspServicesServiceIdPutAsync
     *
     * Update an existing LSP service
     *
     * @param  \SmartCat\Model\LspUpdateServiceModelV2 $lspUpdateServiceModelV2 Service update request (required)
     * @param  string $serviceId Service ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV2LspServicesServiceIdPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiIntegrationV2LspServicesServiceIdPutAsync($lspUpdateServiceModelV2, $serviceId, string $contentType = self::contentTypes['apiIntegrationV2LspServicesServiceIdPut'][0])
    {
        return $this->apiIntegrationV2LspServicesServiceIdPutAsyncWithHttpInfo($lspUpdateServiceModelV2, $serviceId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiIntegrationV2LspServicesServiceIdPutAsyncWithHttpInfo
     *
     * Update an existing LSP service
     *
     * @param  \SmartCat\Model\LspUpdateServiceModelV2 $lspUpdateServiceModelV2 Service update request (required)
     * @param  string $serviceId Service ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV2LspServicesServiceIdPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiIntegrationV2LspServicesServiceIdPutAsyncWithHttpInfo($lspUpdateServiceModelV2, $serviceId, string $contentType = self::contentTypes['apiIntegrationV2LspServicesServiceIdPut'][0])
    {
        $returnType = '';
        $request = $this->apiIntegrationV2LspServicesServiceIdPutRequest($lspUpdateServiceModelV2, $serviceId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiIntegrationV2LspServicesServiceIdPut'
     *
     * @param  \SmartCat\Model\LspUpdateServiceModelV2 $lspUpdateServiceModelV2 Service update request (required)
     * @param  string $serviceId Service ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV2LspServicesServiceIdPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiIntegrationV2LspServicesServiceIdPutRequest($lspUpdateServiceModelV2, $serviceId, string $contentType = self::contentTypes['apiIntegrationV2LspServicesServiceIdPut'][0])
    {

        // verify the required parameter 'lspUpdateServiceModelV2' is set
        if ($lspUpdateServiceModelV2 === null || (is_array($lspUpdateServiceModelV2) && count($lspUpdateServiceModelV2) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $lspUpdateServiceModelV2 when calling apiIntegrationV2LspServicesServiceIdPut'
            );
        }

        // verify the required parameter 'serviceId' is set
        if ($serviceId === null || (is_array($serviceId) && count($serviceId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $serviceId when calling apiIntegrationV2LspServicesServiceIdPut'
            );
        }


        $resourcePath = '/api/integration/v2/lsp/services/{serviceId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($serviceId !== null) {
            $resourcePath = str_replace(
                '{' . 'serviceId' . '}',
                ObjectSerializer::toPathValue($serviceId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($lspUpdateServiceModelV2)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($lspUpdateServiceModelV2));
            } else {
                $httpBody = $lspUpdateServiceModelV2;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
