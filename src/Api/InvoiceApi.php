<?php
/**
 * InvoiceApi
 * PHP version 7.4
 *
 * @category Class
 * @package  SmartCat
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Smartcat API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SmartCat\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use SmartCat\ApiException;
use SmartCat\Configuration;
use SmartCat\HeaderSelector;
use SmartCat\ObjectSerializer;

/**
 * InvoiceApi Class Doc Comment
 *
 * @category Class
 * @package  SmartCat
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class InvoiceApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'apiIntegrationV1InvoiceJobListGet' => [
            'application/json',
        ],
        'apiIntegrationV1InvoiceJobPost' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'apiIntegrationV1InvoiceJobsPost' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'apiIntegrationV2ClientAgentInvoiceListGet' => [
            'application/json',
        ],
        'apiIntegrationV2InvoiceJobListByCreatedDateGet' => [
            'application/json',
        ],
        'apiIntegrationV2InvoiceJobListByExternalIdGet' => [
            'application/json',
        ],
        'apiIntegrationV2InvoiceJobPost' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'apiIntegrationV2InvoiceJobsPost' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'apiIntegrationV2InvoiceListGet' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation apiIntegrationV1InvoiceJobListGet
     *
     * Fetch an array of freelancer payments by ID
     *
     * @param  string[] $externalIds External payment IDs (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1InvoiceJobListGet'] to see the possible values for this operation
     *
     * @throws \SmartCat\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SmartCat\Model\JobModel[]
     */
    public function apiIntegrationV1InvoiceJobListGet($externalIds, string $contentType = self::contentTypes['apiIntegrationV1InvoiceJobListGet'][0])
    {
        list($response) = $this->apiIntegrationV1InvoiceJobListGetWithHttpInfo($externalIds, $contentType);
        return $response;
    }

    /**
     * Operation apiIntegrationV1InvoiceJobListGetWithHttpInfo
     *
     * Fetch an array of freelancer payments by ID
     *
     * @param  string[] $externalIds External payment IDs (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1InvoiceJobListGet'] to see the possible values for this operation
     *
     * @throws \SmartCat\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SmartCat\Model\JobModel[], HTTP status code, HTTP response headers (array of strings)
     */
    public function apiIntegrationV1InvoiceJobListGetWithHttpInfo($externalIds, string $contentType = self::contentTypes['apiIntegrationV1InvoiceJobListGet'][0])
    {
        $request = $this->apiIntegrationV1InvoiceJobListGetRequest($externalIds, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\SmartCat\Model\JobModel[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SmartCat\Model\JobModel[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SmartCat\Model\JobModel[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\SmartCat\Model\JobModel[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SmartCat\Model\JobModel[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiIntegrationV1InvoiceJobListGetAsync
     *
     * Fetch an array of freelancer payments by ID
     *
     * @param  string[] $externalIds External payment IDs (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1InvoiceJobListGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiIntegrationV1InvoiceJobListGetAsync($externalIds, string $contentType = self::contentTypes['apiIntegrationV1InvoiceJobListGet'][0])
    {
        return $this->apiIntegrationV1InvoiceJobListGetAsyncWithHttpInfo($externalIds, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiIntegrationV1InvoiceJobListGetAsyncWithHttpInfo
     *
     * Fetch an array of freelancer payments by ID
     *
     * @param  string[] $externalIds External payment IDs (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1InvoiceJobListGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiIntegrationV1InvoiceJobListGetAsyncWithHttpInfo($externalIds, string $contentType = self::contentTypes['apiIntegrationV1InvoiceJobListGet'][0])
    {
        $returnType = '\SmartCat\Model\JobModel[]';
        $request = $this->apiIntegrationV1InvoiceJobListGetRequest($externalIds, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiIntegrationV1InvoiceJobListGet'
     *
     * @param  string[] $externalIds External payment IDs (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1InvoiceJobListGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiIntegrationV1InvoiceJobListGetRequest($externalIds, string $contentType = self::contentTypes['apiIntegrationV1InvoiceJobListGet'][0])
    {

        // verify the required parameter 'externalIds' is set
        if ($externalIds === null || (is_array($externalIds) && count($externalIds) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $externalIds when calling apiIntegrationV1InvoiceJobListGet'
            );
        }


        $resourcePath = '/api/integration/v1/invoice/job/list';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $externalIds,
            'externalIds', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiIntegrationV1InvoiceJobPost
     *
     * Create payment to freelancer
     *
     * @param  \SmartCat\Model\ImportJobModel $importJobModel Freelancer payment creation parameters (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1InvoiceJobPost'] to see the possible values for this operation
     *
     * @throws \SmartCat\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function apiIntegrationV1InvoiceJobPost($importJobModel, string $contentType = self::contentTypes['apiIntegrationV1InvoiceJobPost'][0])
    {
        list($response) = $this->apiIntegrationV1InvoiceJobPostWithHttpInfo($importJobModel, $contentType);
        return $response;
    }

    /**
     * Operation apiIntegrationV1InvoiceJobPostWithHttpInfo
     *
     * Create payment to freelancer
     *
     * @param  \SmartCat\Model\ImportJobModel $importJobModel Freelancer payment creation parameters (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1InvoiceJobPost'] to see the possible values for this operation
     *
     * @throws \SmartCat\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiIntegrationV1InvoiceJobPostWithHttpInfo($importJobModel, string $contentType = self::contentTypes['apiIntegrationV1InvoiceJobPost'][0])
    {
        $request = $this->apiIntegrationV1InvoiceJobPostRequest($importJobModel, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'string';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiIntegrationV1InvoiceJobPostAsync
     *
     * Create payment to freelancer
     *
     * @param  \SmartCat\Model\ImportJobModel $importJobModel Freelancer payment creation parameters (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1InvoiceJobPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiIntegrationV1InvoiceJobPostAsync($importJobModel, string $contentType = self::contentTypes['apiIntegrationV1InvoiceJobPost'][0])
    {
        return $this->apiIntegrationV1InvoiceJobPostAsyncWithHttpInfo($importJobModel, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiIntegrationV1InvoiceJobPostAsyncWithHttpInfo
     *
     * Create payment to freelancer
     *
     * @param  \SmartCat\Model\ImportJobModel $importJobModel Freelancer payment creation parameters (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1InvoiceJobPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiIntegrationV1InvoiceJobPostAsyncWithHttpInfo($importJobModel, string $contentType = self::contentTypes['apiIntegrationV1InvoiceJobPost'][0])
    {
        $returnType = 'string';
        $request = $this->apiIntegrationV1InvoiceJobPostRequest($importJobModel, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiIntegrationV1InvoiceJobPost'
     *
     * @param  \SmartCat\Model\ImportJobModel $importJobModel Freelancer payment creation parameters (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1InvoiceJobPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiIntegrationV1InvoiceJobPostRequest($importJobModel, string $contentType = self::contentTypes['apiIntegrationV1InvoiceJobPost'][0])
    {

        // verify the required parameter 'importJobModel' is set
        if ($importJobModel === null || (is_array($importJobModel) && count($importJobModel) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $importJobModel when calling apiIntegrationV1InvoiceJobPost'
            );
        }


        $resourcePath = '/api/integration/v1/invoice/job';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($importJobModel)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($importJobModel));
            } else {
                $httpBody = $importJobModel;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiIntegrationV1InvoiceJobsPost
     *
     * Create an array of freelancer payments
     *
     * @param  \SmartCat\Model\ImportJobModel[] $importJobModel Freelancer payment creation parameters (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1InvoiceJobsPost'] to see the possible values for this operation
     *
     * @throws \SmartCat\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SmartCat\Model\JobModel[]
     */
    public function apiIntegrationV1InvoiceJobsPost($importJobModel, string $contentType = self::contentTypes['apiIntegrationV1InvoiceJobsPost'][0])
    {
        list($response) = $this->apiIntegrationV1InvoiceJobsPostWithHttpInfo($importJobModel, $contentType);
        return $response;
    }

    /**
     * Operation apiIntegrationV1InvoiceJobsPostWithHttpInfo
     *
     * Create an array of freelancer payments
     *
     * @param  \SmartCat\Model\ImportJobModel[] $importJobModel Freelancer payment creation parameters (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1InvoiceJobsPost'] to see the possible values for this operation
     *
     * @throws \SmartCat\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SmartCat\Model\JobModel[], HTTP status code, HTTP response headers (array of strings)
     */
    public function apiIntegrationV1InvoiceJobsPostWithHttpInfo($importJobModel, string $contentType = self::contentTypes['apiIntegrationV1InvoiceJobsPost'][0])
    {
        $request = $this->apiIntegrationV1InvoiceJobsPostRequest($importJobModel, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\SmartCat\Model\JobModel[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SmartCat\Model\JobModel[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SmartCat\Model\JobModel[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\SmartCat\Model\JobModel[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SmartCat\Model\JobModel[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiIntegrationV1InvoiceJobsPostAsync
     *
     * Create an array of freelancer payments
     *
     * @param  \SmartCat\Model\ImportJobModel[] $importJobModel Freelancer payment creation parameters (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1InvoiceJobsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiIntegrationV1InvoiceJobsPostAsync($importJobModel, string $contentType = self::contentTypes['apiIntegrationV1InvoiceJobsPost'][0])
    {
        return $this->apiIntegrationV1InvoiceJobsPostAsyncWithHttpInfo($importJobModel, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiIntegrationV1InvoiceJobsPostAsyncWithHttpInfo
     *
     * Create an array of freelancer payments
     *
     * @param  \SmartCat\Model\ImportJobModel[] $importJobModel Freelancer payment creation parameters (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1InvoiceJobsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiIntegrationV1InvoiceJobsPostAsyncWithHttpInfo($importJobModel, string $contentType = self::contentTypes['apiIntegrationV1InvoiceJobsPost'][0])
    {
        $returnType = '\SmartCat\Model\JobModel[]';
        $request = $this->apiIntegrationV1InvoiceJobsPostRequest($importJobModel, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiIntegrationV1InvoiceJobsPost'
     *
     * @param  \SmartCat\Model\ImportJobModel[] $importJobModel Freelancer payment creation parameters (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1InvoiceJobsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiIntegrationV1InvoiceJobsPostRequest($importJobModel, string $contentType = self::contentTypes['apiIntegrationV1InvoiceJobsPost'][0])
    {

        // verify the required parameter 'importJobModel' is set
        if ($importJobModel === null || (is_array($importJobModel) && count($importJobModel) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $importJobModel when calling apiIntegrationV1InvoiceJobsPost'
            );
        }


        $resourcePath = '/api/integration/v1/invoice/jobs';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($importJobModel)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($importJobModel));
            } else {
                $httpBody = $importJobModel;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiIntegrationV2ClientAgentInvoiceListGet
     *
     * Fetch a list of agent invoices
     *
     * @param  \DateTime $dateFrom Period start (inclusive) (optional)
     * @param  \DateTime $dateTo Period end (inclusive) (optional)
     * @param  int $limit Limit (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV2ClientAgentInvoiceListGet'] to see the possible values for this operation
     *
     * @throws \SmartCat\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SmartCat\Model\ClientAgentInvoiceModel[]
     */
    public function apiIntegrationV2ClientAgentInvoiceListGet($dateFrom = null, $dateTo = null, $limit = null, string $contentType = self::contentTypes['apiIntegrationV2ClientAgentInvoiceListGet'][0])
    {
        list($response) = $this->apiIntegrationV2ClientAgentInvoiceListGetWithHttpInfo($dateFrom, $dateTo, $limit, $contentType);
        return $response;
    }

    /**
     * Operation apiIntegrationV2ClientAgentInvoiceListGetWithHttpInfo
     *
     * Fetch a list of agent invoices
     *
     * @param  \DateTime $dateFrom Period start (inclusive) (optional)
     * @param  \DateTime $dateTo Period end (inclusive) (optional)
     * @param  int $limit Limit (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV2ClientAgentInvoiceListGet'] to see the possible values for this operation
     *
     * @throws \SmartCat\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SmartCat\Model\ClientAgentInvoiceModel[], HTTP status code, HTTP response headers (array of strings)
     */
    public function apiIntegrationV2ClientAgentInvoiceListGetWithHttpInfo($dateFrom = null, $dateTo = null, $limit = null, string $contentType = self::contentTypes['apiIntegrationV2ClientAgentInvoiceListGet'][0])
    {
        $request = $this->apiIntegrationV2ClientAgentInvoiceListGetRequest($dateFrom, $dateTo, $limit, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\SmartCat\Model\ClientAgentInvoiceModel[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SmartCat\Model\ClientAgentInvoiceModel[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SmartCat\Model\ClientAgentInvoiceModel[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\SmartCat\Model\ClientAgentInvoiceModel[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SmartCat\Model\ClientAgentInvoiceModel[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiIntegrationV2ClientAgentInvoiceListGetAsync
     *
     * Fetch a list of agent invoices
     *
     * @param  \DateTime $dateFrom Period start (inclusive) (optional)
     * @param  \DateTime $dateTo Period end (inclusive) (optional)
     * @param  int $limit Limit (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV2ClientAgentInvoiceListGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiIntegrationV2ClientAgentInvoiceListGetAsync($dateFrom = null, $dateTo = null, $limit = null, string $contentType = self::contentTypes['apiIntegrationV2ClientAgentInvoiceListGet'][0])
    {
        return $this->apiIntegrationV2ClientAgentInvoiceListGetAsyncWithHttpInfo($dateFrom, $dateTo, $limit, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiIntegrationV2ClientAgentInvoiceListGetAsyncWithHttpInfo
     *
     * Fetch a list of agent invoices
     *
     * @param  \DateTime $dateFrom Period start (inclusive) (optional)
     * @param  \DateTime $dateTo Period end (inclusive) (optional)
     * @param  int $limit Limit (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV2ClientAgentInvoiceListGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiIntegrationV2ClientAgentInvoiceListGetAsyncWithHttpInfo($dateFrom = null, $dateTo = null, $limit = null, string $contentType = self::contentTypes['apiIntegrationV2ClientAgentInvoiceListGet'][0])
    {
        $returnType = '\SmartCat\Model\ClientAgentInvoiceModel[]';
        $request = $this->apiIntegrationV2ClientAgentInvoiceListGetRequest($dateFrom, $dateTo, $limit, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiIntegrationV2ClientAgentInvoiceListGet'
     *
     * @param  \DateTime $dateFrom Period start (inclusive) (optional)
     * @param  \DateTime $dateTo Period end (inclusive) (optional)
     * @param  int $limit Limit (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV2ClientAgentInvoiceListGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiIntegrationV2ClientAgentInvoiceListGetRequest($dateFrom = null, $dateTo = null, $limit = null, string $contentType = self::contentTypes['apiIntegrationV2ClientAgentInvoiceListGet'][0])
    {





        $resourcePath = '/api/integration/v2/client-agent-invoice/list';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $dateFrom,
            'dateFrom', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $dateTo,
            'dateTo', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiIntegrationV2InvoiceJobListByCreatedDateGet
     *
     * Fetch an array of payments by creation date
     *
     * @param  \DateTime $dateCreatedFrom Fetch the payments created after the specified date (required)
     * @param  \DateTime $dateCreatedTo Fetch the payments created before the specified date (required)
     * @param  int $limit Maximum returned items (optional, default to 100)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV2InvoiceJobListByCreatedDateGet'] to see the possible values for this operation
     *
     * @throws \SmartCat\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SmartCat\Model\JobModelV2[]
     */
    public function apiIntegrationV2InvoiceJobListByCreatedDateGet($dateCreatedFrom, $dateCreatedTo, $limit = 100, string $contentType = self::contentTypes['apiIntegrationV2InvoiceJobListByCreatedDateGet'][0])
    {
        list($response) = $this->apiIntegrationV2InvoiceJobListByCreatedDateGetWithHttpInfo($dateCreatedFrom, $dateCreatedTo, $limit, $contentType);
        return $response;
    }

    /**
     * Operation apiIntegrationV2InvoiceJobListByCreatedDateGetWithHttpInfo
     *
     * Fetch an array of payments by creation date
     *
     * @param  \DateTime $dateCreatedFrom Fetch the payments created after the specified date (required)
     * @param  \DateTime $dateCreatedTo Fetch the payments created before the specified date (required)
     * @param  int $limit Maximum returned items (optional, default to 100)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV2InvoiceJobListByCreatedDateGet'] to see the possible values for this operation
     *
     * @throws \SmartCat\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SmartCat\Model\JobModelV2[], HTTP status code, HTTP response headers (array of strings)
     */
    public function apiIntegrationV2InvoiceJobListByCreatedDateGetWithHttpInfo($dateCreatedFrom, $dateCreatedTo, $limit = 100, string $contentType = self::contentTypes['apiIntegrationV2InvoiceJobListByCreatedDateGet'][0])
    {
        $request = $this->apiIntegrationV2InvoiceJobListByCreatedDateGetRequest($dateCreatedFrom, $dateCreatedTo, $limit, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\SmartCat\Model\JobModelV2[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SmartCat\Model\JobModelV2[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SmartCat\Model\JobModelV2[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\SmartCat\Model\JobModelV2[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SmartCat\Model\JobModelV2[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiIntegrationV2InvoiceJobListByCreatedDateGetAsync
     *
     * Fetch an array of payments by creation date
     *
     * @param  \DateTime $dateCreatedFrom Fetch the payments created after the specified date (required)
     * @param  \DateTime $dateCreatedTo Fetch the payments created before the specified date (required)
     * @param  int $limit Maximum returned items (optional, default to 100)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV2InvoiceJobListByCreatedDateGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiIntegrationV2InvoiceJobListByCreatedDateGetAsync($dateCreatedFrom, $dateCreatedTo, $limit = 100, string $contentType = self::contentTypes['apiIntegrationV2InvoiceJobListByCreatedDateGet'][0])
    {
        return $this->apiIntegrationV2InvoiceJobListByCreatedDateGetAsyncWithHttpInfo($dateCreatedFrom, $dateCreatedTo, $limit, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiIntegrationV2InvoiceJobListByCreatedDateGetAsyncWithHttpInfo
     *
     * Fetch an array of payments by creation date
     *
     * @param  \DateTime $dateCreatedFrom Fetch the payments created after the specified date (required)
     * @param  \DateTime $dateCreatedTo Fetch the payments created before the specified date (required)
     * @param  int $limit Maximum returned items (optional, default to 100)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV2InvoiceJobListByCreatedDateGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiIntegrationV2InvoiceJobListByCreatedDateGetAsyncWithHttpInfo($dateCreatedFrom, $dateCreatedTo, $limit = 100, string $contentType = self::contentTypes['apiIntegrationV2InvoiceJobListByCreatedDateGet'][0])
    {
        $returnType = '\SmartCat\Model\JobModelV2[]';
        $request = $this->apiIntegrationV2InvoiceJobListByCreatedDateGetRequest($dateCreatedFrom, $dateCreatedTo, $limit, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiIntegrationV2InvoiceJobListByCreatedDateGet'
     *
     * @param  \DateTime $dateCreatedFrom Fetch the payments created after the specified date (required)
     * @param  \DateTime $dateCreatedTo Fetch the payments created before the specified date (required)
     * @param  int $limit Maximum returned items (optional, default to 100)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV2InvoiceJobListByCreatedDateGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiIntegrationV2InvoiceJobListByCreatedDateGetRequest($dateCreatedFrom, $dateCreatedTo, $limit = 100, string $contentType = self::contentTypes['apiIntegrationV2InvoiceJobListByCreatedDateGet'][0])
    {

        // verify the required parameter 'dateCreatedFrom' is set
        if ($dateCreatedFrom === null || (is_array($dateCreatedFrom) && count($dateCreatedFrom) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $dateCreatedFrom when calling apiIntegrationV2InvoiceJobListByCreatedDateGet'
            );
        }

        // verify the required parameter 'dateCreatedTo' is set
        if ($dateCreatedTo === null || (is_array($dateCreatedTo) && count($dateCreatedTo) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $dateCreatedTo when calling apiIntegrationV2InvoiceJobListByCreatedDateGet'
            );
        }



        $resourcePath = '/api/integration/v2/invoice/job/listByCreatedDate';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $dateCreatedFrom,
            'dateCreatedFrom', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $dateCreatedTo,
            'dateCreatedTo', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiIntegrationV2InvoiceJobListByExternalIdGet
     *
     * Fetch an array of payments by ID
     *
     * @param  string[] $externalIds External payment ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV2InvoiceJobListByExternalIdGet'] to see the possible values for this operation
     *
     * @throws \SmartCat\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SmartCat\Model\JobModelV2[]
     */
    public function apiIntegrationV2InvoiceJobListByExternalIdGet($externalIds, string $contentType = self::contentTypes['apiIntegrationV2InvoiceJobListByExternalIdGet'][0])
    {
        list($response) = $this->apiIntegrationV2InvoiceJobListByExternalIdGetWithHttpInfo($externalIds, $contentType);
        return $response;
    }

    /**
     * Operation apiIntegrationV2InvoiceJobListByExternalIdGetWithHttpInfo
     *
     * Fetch an array of payments by ID
     *
     * @param  string[] $externalIds External payment ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV2InvoiceJobListByExternalIdGet'] to see the possible values for this operation
     *
     * @throws \SmartCat\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SmartCat\Model\JobModelV2[], HTTP status code, HTTP response headers (array of strings)
     */
    public function apiIntegrationV2InvoiceJobListByExternalIdGetWithHttpInfo($externalIds, string $contentType = self::contentTypes['apiIntegrationV2InvoiceJobListByExternalIdGet'][0])
    {
        $request = $this->apiIntegrationV2InvoiceJobListByExternalIdGetRequest($externalIds, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\SmartCat\Model\JobModelV2[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SmartCat\Model\JobModelV2[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SmartCat\Model\JobModelV2[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\SmartCat\Model\JobModelV2[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SmartCat\Model\JobModelV2[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiIntegrationV2InvoiceJobListByExternalIdGetAsync
     *
     * Fetch an array of payments by ID
     *
     * @param  string[] $externalIds External payment ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV2InvoiceJobListByExternalIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiIntegrationV2InvoiceJobListByExternalIdGetAsync($externalIds, string $contentType = self::contentTypes['apiIntegrationV2InvoiceJobListByExternalIdGet'][0])
    {
        return $this->apiIntegrationV2InvoiceJobListByExternalIdGetAsyncWithHttpInfo($externalIds, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiIntegrationV2InvoiceJobListByExternalIdGetAsyncWithHttpInfo
     *
     * Fetch an array of payments by ID
     *
     * @param  string[] $externalIds External payment ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV2InvoiceJobListByExternalIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiIntegrationV2InvoiceJobListByExternalIdGetAsyncWithHttpInfo($externalIds, string $contentType = self::contentTypes['apiIntegrationV2InvoiceJobListByExternalIdGet'][0])
    {
        $returnType = '\SmartCat\Model\JobModelV2[]';
        $request = $this->apiIntegrationV2InvoiceJobListByExternalIdGetRequest($externalIds, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiIntegrationV2InvoiceJobListByExternalIdGet'
     *
     * @param  string[] $externalIds External payment ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV2InvoiceJobListByExternalIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiIntegrationV2InvoiceJobListByExternalIdGetRequest($externalIds, string $contentType = self::contentTypes['apiIntegrationV2InvoiceJobListByExternalIdGet'][0])
    {

        // verify the required parameter 'externalIds' is set
        if ($externalIds === null || (is_array($externalIds) && count($externalIds) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $externalIds when calling apiIntegrationV2InvoiceJobListByExternalIdGet'
            );
        }


        $resourcePath = '/api/integration/v2/invoice/job/listByExternalId';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $externalIds,
            'externalIds', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiIntegrationV2InvoiceJobPost
     *
     * Create a payment
     *
     * @param  \SmartCat\Model\ImportJobModelV2 $importJobModelV2 Payment creation parameters (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV2InvoiceJobPost'] to see the possible values for this operation
     *
     * @throws \SmartCat\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function apiIntegrationV2InvoiceJobPost($importJobModelV2, string $contentType = self::contentTypes['apiIntegrationV2InvoiceJobPost'][0])
    {
        list($response) = $this->apiIntegrationV2InvoiceJobPostWithHttpInfo($importJobModelV2, $contentType);
        return $response;
    }

    /**
     * Operation apiIntegrationV2InvoiceJobPostWithHttpInfo
     *
     * Create a payment
     *
     * @param  \SmartCat\Model\ImportJobModelV2 $importJobModelV2 Payment creation parameters (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV2InvoiceJobPost'] to see the possible values for this operation
     *
     * @throws \SmartCat\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiIntegrationV2InvoiceJobPostWithHttpInfo($importJobModelV2, string $contentType = self::contentTypes['apiIntegrationV2InvoiceJobPost'][0])
    {
        $request = $this->apiIntegrationV2InvoiceJobPostRequest($importJobModelV2, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'string';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiIntegrationV2InvoiceJobPostAsync
     *
     * Create a payment
     *
     * @param  \SmartCat\Model\ImportJobModelV2 $importJobModelV2 Payment creation parameters (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV2InvoiceJobPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiIntegrationV2InvoiceJobPostAsync($importJobModelV2, string $contentType = self::contentTypes['apiIntegrationV2InvoiceJobPost'][0])
    {
        return $this->apiIntegrationV2InvoiceJobPostAsyncWithHttpInfo($importJobModelV2, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiIntegrationV2InvoiceJobPostAsyncWithHttpInfo
     *
     * Create a payment
     *
     * @param  \SmartCat\Model\ImportJobModelV2 $importJobModelV2 Payment creation parameters (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV2InvoiceJobPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiIntegrationV2InvoiceJobPostAsyncWithHttpInfo($importJobModelV2, string $contentType = self::contentTypes['apiIntegrationV2InvoiceJobPost'][0])
    {
        $returnType = 'string';
        $request = $this->apiIntegrationV2InvoiceJobPostRequest($importJobModelV2, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiIntegrationV2InvoiceJobPost'
     *
     * @param  \SmartCat\Model\ImportJobModelV2 $importJobModelV2 Payment creation parameters (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV2InvoiceJobPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiIntegrationV2InvoiceJobPostRequest($importJobModelV2, string $contentType = self::contentTypes['apiIntegrationV2InvoiceJobPost'][0])
    {

        // verify the required parameter 'importJobModelV2' is set
        if ($importJobModelV2 === null || (is_array($importJobModelV2) && count($importJobModelV2) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $importJobModelV2 when calling apiIntegrationV2InvoiceJobPost'
            );
        }


        $resourcePath = '/api/integration/v2/invoice/job';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($importJobModelV2)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($importJobModelV2));
            } else {
                $httpBody = $importJobModelV2;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiIntegrationV2InvoiceJobsPost
     *
     * Create a payments array
     *
     * @param  \SmartCat\Model\ImportJobModelV2[] $importJobModelV2 Payment creation parameters (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV2InvoiceJobsPost'] to see the possible values for this operation
     *
     * @throws \SmartCat\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SmartCat\Model\JobModelV2[]
     */
    public function apiIntegrationV2InvoiceJobsPost($importJobModelV2, string $contentType = self::contentTypes['apiIntegrationV2InvoiceJobsPost'][0])
    {
        list($response) = $this->apiIntegrationV2InvoiceJobsPostWithHttpInfo($importJobModelV2, $contentType);
        return $response;
    }

    /**
     * Operation apiIntegrationV2InvoiceJobsPostWithHttpInfo
     *
     * Create a payments array
     *
     * @param  \SmartCat\Model\ImportJobModelV2[] $importJobModelV2 Payment creation parameters (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV2InvoiceJobsPost'] to see the possible values for this operation
     *
     * @throws \SmartCat\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SmartCat\Model\JobModelV2[], HTTP status code, HTTP response headers (array of strings)
     */
    public function apiIntegrationV2InvoiceJobsPostWithHttpInfo($importJobModelV2, string $contentType = self::contentTypes['apiIntegrationV2InvoiceJobsPost'][0])
    {
        $request = $this->apiIntegrationV2InvoiceJobsPostRequest($importJobModelV2, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\SmartCat\Model\JobModelV2[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SmartCat\Model\JobModelV2[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SmartCat\Model\JobModelV2[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\SmartCat\Model\JobModelV2[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SmartCat\Model\JobModelV2[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiIntegrationV2InvoiceJobsPostAsync
     *
     * Create a payments array
     *
     * @param  \SmartCat\Model\ImportJobModelV2[] $importJobModelV2 Payment creation parameters (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV2InvoiceJobsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiIntegrationV2InvoiceJobsPostAsync($importJobModelV2, string $contentType = self::contentTypes['apiIntegrationV2InvoiceJobsPost'][0])
    {
        return $this->apiIntegrationV2InvoiceJobsPostAsyncWithHttpInfo($importJobModelV2, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiIntegrationV2InvoiceJobsPostAsyncWithHttpInfo
     *
     * Create a payments array
     *
     * @param  \SmartCat\Model\ImportJobModelV2[] $importJobModelV2 Payment creation parameters (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV2InvoiceJobsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiIntegrationV2InvoiceJobsPostAsyncWithHttpInfo($importJobModelV2, string $contentType = self::contentTypes['apiIntegrationV2InvoiceJobsPost'][0])
    {
        $returnType = '\SmartCat\Model\JobModelV2[]';
        $request = $this->apiIntegrationV2InvoiceJobsPostRequest($importJobModelV2, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiIntegrationV2InvoiceJobsPost'
     *
     * @param  \SmartCat\Model\ImportJobModelV2[] $importJobModelV2 Payment creation parameters (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV2InvoiceJobsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiIntegrationV2InvoiceJobsPostRequest($importJobModelV2, string $contentType = self::contentTypes['apiIntegrationV2InvoiceJobsPost'][0])
    {

        // verify the required parameter 'importJobModelV2' is set
        if ($importJobModelV2 === null || (is_array($importJobModelV2) && count($importJobModelV2) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $importJobModelV2 when calling apiIntegrationV2InvoiceJobsPost'
            );
        }


        $resourcePath = '/api/integration/v2/invoice/jobs';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($importJobModelV2)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($importJobModelV2));
            } else {
                $httpBody = $importJobModelV2;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiIntegrationV2InvoiceListGet
     *
     * Fetch a list of invoices created within the specified period
     *
     * @param  \DateTime $dateCreatedFrom Period start (inclusive) (required)
     * @param  \DateTime $dateCreatedTo Period end (inclusive) (required)
     * @param  int $limit Maximum returned items (not more than 10) (optional, default to 10)
     * @param  int $skip Number of skipped items (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV2InvoiceListGet'] to see the possible values for this operation
     *
     * @throws \SmartCat\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SmartCat\Model\InvoiceModel[]
     */
    public function apiIntegrationV2InvoiceListGet($dateCreatedFrom, $dateCreatedTo, $limit = 10, $skip = 0, string $contentType = self::contentTypes['apiIntegrationV2InvoiceListGet'][0])
    {
        list($response) = $this->apiIntegrationV2InvoiceListGetWithHttpInfo($dateCreatedFrom, $dateCreatedTo, $limit, $skip, $contentType);
        return $response;
    }

    /**
     * Operation apiIntegrationV2InvoiceListGetWithHttpInfo
     *
     * Fetch a list of invoices created within the specified period
     *
     * @param  \DateTime $dateCreatedFrom Period start (inclusive) (required)
     * @param  \DateTime $dateCreatedTo Period end (inclusive) (required)
     * @param  int $limit Maximum returned items (not more than 10) (optional, default to 10)
     * @param  int $skip Number of skipped items (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV2InvoiceListGet'] to see the possible values for this operation
     *
     * @throws \SmartCat\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SmartCat\Model\InvoiceModel[], HTTP status code, HTTP response headers (array of strings)
     */
    public function apiIntegrationV2InvoiceListGetWithHttpInfo($dateCreatedFrom, $dateCreatedTo, $limit = 10, $skip = 0, string $contentType = self::contentTypes['apiIntegrationV2InvoiceListGet'][0])
    {
        $request = $this->apiIntegrationV2InvoiceListGetRequest($dateCreatedFrom, $dateCreatedTo, $limit, $skip, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\SmartCat\Model\InvoiceModel[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SmartCat\Model\InvoiceModel[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SmartCat\Model\InvoiceModel[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\SmartCat\Model\InvoiceModel[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SmartCat\Model\InvoiceModel[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiIntegrationV2InvoiceListGetAsync
     *
     * Fetch a list of invoices created within the specified period
     *
     * @param  \DateTime $dateCreatedFrom Period start (inclusive) (required)
     * @param  \DateTime $dateCreatedTo Period end (inclusive) (required)
     * @param  int $limit Maximum returned items (not more than 10) (optional, default to 10)
     * @param  int $skip Number of skipped items (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV2InvoiceListGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiIntegrationV2InvoiceListGetAsync($dateCreatedFrom, $dateCreatedTo, $limit = 10, $skip = 0, string $contentType = self::contentTypes['apiIntegrationV2InvoiceListGet'][0])
    {
        return $this->apiIntegrationV2InvoiceListGetAsyncWithHttpInfo($dateCreatedFrom, $dateCreatedTo, $limit, $skip, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiIntegrationV2InvoiceListGetAsyncWithHttpInfo
     *
     * Fetch a list of invoices created within the specified period
     *
     * @param  \DateTime $dateCreatedFrom Period start (inclusive) (required)
     * @param  \DateTime $dateCreatedTo Period end (inclusive) (required)
     * @param  int $limit Maximum returned items (not more than 10) (optional, default to 10)
     * @param  int $skip Number of skipped items (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV2InvoiceListGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiIntegrationV2InvoiceListGetAsyncWithHttpInfo($dateCreatedFrom, $dateCreatedTo, $limit = 10, $skip = 0, string $contentType = self::contentTypes['apiIntegrationV2InvoiceListGet'][0])
    {
        $returnType = '\SmartCat\Model\InvoiceModel[]';
        $request = $this->apiIntegrationV2InvoiceListGetRequest($dateCreatedFrom, $dateCreatedTo, $limit, $skip, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiIntegrationV2InvoiceListGet'
     *
     * @param  \DateTime $dateCreatedFrom Period start (inclusive) (required)
     * @param  \DateTime $dateCreatedTo Period end (inclusive) (required)
     * @param  int $limit Maximum returned items (not more than 10) (optional, default to 10)
     * @param  int $skip Number of skipped items (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV2InvoiceListGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiIntegrationV2InvoiceListGetRequest($dateCreatedFrom, $dateCreatedTo, $limit = 10, $skip = 0, string $contentType = self::contentTypes['apiIntegrationV2InvoiceListGet'][0])
    {

        // verify the required parameter 'dateCreatedFrom' is set
        if ($dateCreatedFrom === null || (is_array($dateCreatedFrom) && count($dateCreatedFrom) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $dateCreatedFrom when calling apiIntegrationV2InvoiceListGet'
            );
        }

        // verify the required parameter 'dateCreatedTo' is set
        if ($dateCreatedTo === null || (is_array($dateCreatedTo) && count($dateCreatedTo) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $dateCreatedTo when calling apiIntegrationV2InvoiceListGet'
            );
        }




        $resourcePath = '/api/integration/v2/invoice/list';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $dateCreatedFrom,
            'dateCreatedFrom', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $dateCreatedTo,
            'dateCreatedTo', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $skip,
            'skip', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
