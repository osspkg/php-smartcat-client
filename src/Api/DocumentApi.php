<?php
/**
 * DocumentApi
 * PHP version 7.4
 *
 * @category Class
 * @package  SmartCat
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Smartcat API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SmartCat\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use SmartCat\ApiException;
use SmartCat\Configuration;
use SmartCat\HeaderSelector;
use SmartCat\ObjectSerializer;

/**
 * DocumentApi Class Doc Comment
 *
 * @category Class
 * @package  SmartCat
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class DocumentApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'apiIntegrationV1DocumentAssignFreelancersPost' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'apiIntegrationV1DocumentAssignFromMyTeamPost' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'apiIntegrationV1DocumentAssignPost' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'apiIntegrationV1DocumentAssignVendorsPost' => [
            'application/json',
        ],
        'apiIntegrationV1DocumentCompletePost' => [
            'application/json',
        ],
        'apiIntegrationV1DocumentDelete' => [
            'application/json',
        ],
        'apiIntegrationV1DocumentGet' => [
            'application/json',
        ],
        'apiIntegrationV1DocumentRenamePut' => [
            'application/json',
        ],
        'apiIntegrationV1DocumentSetStageUnitCountPost' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'apiIntegrationV1DocumentStatisticsGet' => [
            'application/json',
        ],
        'apiIntegrationV1DocumentTranslatePut' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'apiIntegrationV1DocumentTranslateResultGet' => [
            'application/json',
        ],
        'apiIntegrationV1DocumentTranslateStatusGet' => [
            'application/json',
        ],
        'apiIntegrationV1DocumentTranslateWithXliffPut' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'apiIntegrationV1DocumentUnassignPost' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'apiIntegrationV1DocumentUpdateMetaInfoPut' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'apiIntegrationV1DocumentUpdatePut' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'apiIntegrationV2DocumentUpdatePut' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation apiIntegrationV1DocumentAssignFreelancersPost
     *
     * Divide the document into equal blocks by the number of words and assign one block to each specified freelancer
     *
     * @param  string[] $requestBody Assigned freelancers&#39; user IDs (optional)
     * @param  string $documentId Document ID (optional)
     * @param  string $stageNumber Workflow stage number (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1DocumentAssignFreelancersPost'] to see the possible values for this operation
     *
     * @throws \SmartCat\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiIntegrationV1DocumentAssignFreelancersPost($requestBody = null, $documentId = null, $stageNumber = null, string $contentType = self::contentTypes['apiIntegrationV1DocumentAssignFreelancersPost'][0])
    {
        $this->apiIntegrationV1DocumentAssignFreelancersPostWithHttpInfo($requestBody, $documentId, $stageNumber, $contentType);
    }

    /**
     * Operation apiIntegrationV1DocumentAssignFreelancersPostWithHttpInfo
     *
     * Divide the document into equal blocks by the number of words and assign one block to each specified freelancer
     *
     * @param  string[] $requestBody Assigned freelancers&#39; user IDs (optional)
     * @param  string $documentId Document ID (optional)
     * @param  string $stageNumber Workflow stage number (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1DocumentAssignFreelancersPost'] to see the possible values for this operation
     *
     * @throws \SmartCat\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiIntegrationV1DocumentAssignFreelancersPostWithHttpInfo($requestBody = null, $documentId = null, $stageNumber = null, string $contentType = self::contentTypes['apiIntegrationV1DocumentAssignFreelancersPost'][0])
    {
        $request = $this->apiIntegrationV1DocumentAssignFreelancersPostRequest($requestBody, $documentId, $stageNumber, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiIntegrationV1DocumentAssignFreelancersPostAsync
     *
     * Divide the document into equal blocks by the number of words and assign one block to each specified freelancer
     *
     * @param  string[] $requestBody Assigned freelancers&#39; user IDs (optional)
     * @param  string $documentId Document ID (optional)
     * @param  string $stageNumber Workflow stage number (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1DocumentAssignFreelancersPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiIntegrationV1DocumentAssignFreelancersPostAsync($requestBody = null, $documentId = null, $stageNumber = null, string $contentType = self::contentTypes['apiIntegrationV1DocumentAssignFreelancersPost'][0])
    {
        return $this->apiIntegrationV1DocumentAssignFreelancersPostAsyncWithHttpInfo($requestBody, $documentId, $stageNumber, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiIntegrationV1DocumentAssignFreelancersPostAsyncWithHttpInfo
     *
     * Divide the document into equal blocks by the number of words and assign one block to each specified freelancer
     *
     * @param  string[] $requestBody Assigned freelancers&#39; user IDs (optional)
     * @param  string $documentId Document ID (optional)
     * @param  string $stageNumber Workflow stage number (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1DocumentAssignFreelancersPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiIntegrationV1DocumentAssignFreelancersPostAsyncWithHttpInfo($requestBody = null, $documentId = null, $stageNumber = null, string $contentType = self::contentTypes['apiIntegrationV1DocumentAssignFreelancersPost'][0])
    {
        $returnType = '';
        $request = $this->apiIntegrationV1DocumentAssignFreelancersPostRequest($requestBody, $documentId, $stageNumber, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiIntegrationV1DocumentAssignFreelancersPost'
     *
     * @param  string[] $requestBody Assigned freelancers&#39; user IDs (optional)
     * @param  string $documentId Document ID (optional)
     * @param  string $stageNumber Workflow stage number (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1DocumentAssignFreelancersPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiIntegrationV1DocumentAssignFreelancersPostRequest($requestBody = null, $documentId = null, $stageNumber = null, string $contentType = self::contentTypes['apiIntegrationV1DocumentAssignFreelancersPost'][0])
    {





        $resourcePath = '/api/integration/v1/document/assignFreelancers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $documentId,
            'documentId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $stageNumber,
            'stageNumber', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($requestBody)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($requestBody));
            } else {
                $httpBody = $requestBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiIntegrationV1DocumentAssignFromMyTeamPost
     *
     * Send Rocket invitations to MyTeam linguists:  send invitations, assign the first one to accept the job to every unassigned document segment
     *
     * @param  \SmartCat\Model\AssignMyTeamExecutivesRequestModel $assignMyTeamExecutivesRequestModel MyTeam linguists assignment model (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1DocumentAssignFromMyTeamPost'] to see the possible values for this operation
     *
     * @throws \SmartCat\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return int
     */
    public function apiIntegrationV1DocumentAssignFromMyTeamPost($assignMyTeamExecutivesRequestModel = null, string $contentType = self::contentTypes['apiIntegrationV1DocumentAssignFromMyTeamPost'][0])
    {
        list($response) = $this->apiIntegrationV1DocumentAssignFromMyTeamPostWithHttpInfo($assignMyTeamExecutivesRequestModel, $contentType);
        return $response;
    }

    /**
     * Operation apiIntegrationV1DocumentAssignFromMyTeamPostWithHttpInfo
     *
     * Send Rocket invitations to MyTeam linguists:  send invitations, assign the first one to accept the job to every unassigned document segment
     *
     * @param  \SmartCat\Model\AssignMyTeamExecutivesRequestModel $assignMyTeamExecutivesRequestModel MyTeam linguists assignment model (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1DocumentAssignFromMyTeamPost'] to see the possible values for this operation
     *
     * @throws \SmartCat\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of int, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiIntegrationV1DocumentAssignFromMyTeamPostWithHttpInfo($assignMyTeamExecutivesRequestModel = null, string $contentType = self::contentTypes['apiIntegrationV1DocumentAssignFromMyTeamPost'][0])
    {
        $request = $this->apiIntegrationV1DocumentAssignFromMyTeamPostRequest($assignMyTeamExecutivesRequestModel, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('int' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('int' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'int', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'int';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'int',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiIntegrationV1DocumentAssignFromMyTeamPostAsync
     *
     * Send Rocket invitations to MyTeam linguists:  send invitations, assign the first one to accept the job to every unassigned document segment
     *
     * @param  \SmartCat\Model\AssignMyTeamExecutivesRequestModel $assignMyTeamExecutivesRequestModel MyTeam linguists assignment model (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1DocumentAssignFromMyTeamPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiIntegrationV1DocumentAssignFromMyTeamPostAsync($assignMyTeamExecutivesRequestModel = null, string $contentType = self::contentTypes['apiIntegrationV1DocumentAssignFromMyTeamPost'][0])
    {
        return $this->apiIntegrationV1DocumentAssignFromMyTeamPostAsyncWithHttpInfo($assignMyTeamExecutivesRequestModel, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiIntegrationV1DocumentAssignFromMyTeamPostAsyncWithHttpInfo
     *
     * Send Rocket invitations to MyTeam linguists:  send invitations, assign the first one to accept the job to every unassigned document segment
     *
     * @param  \SmartCat\Model\AssignMyTeamExecutivesRequestModel $assignMyTeamExecutivesRequestModel MyTeam linguists assignment model (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1DocumentAssignFromMyTeamPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiIntegrationV1DocumentAssignFromMyTeamPostAsyncWithHttpInfo($assignMyTeamExecutivesRequestModel = null, string $contentType = self::contentTypes['apiIntegrationV1DocumentAssignFromMyTeamPost'][0])
    {
        $returnType = 'int';
        $request = $this->apiIntegrationV1DocumentAssignFromMyTeamPostRequest($assignMyTeamExecutivesRequestModel, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiIntegrationV1DocumentAssignFromMyTeamPost'
     *
     * @param  \SmartCat\Model\AssignMyTeamExecutivesRequestModel $assignMyTeamExecutivesRequestModel MyTeam linguists assignment model (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1DocumentAssignFromMyTeamPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiIntegrationV1DocumentAssignFromMyTeamPostRequest($assignMyTeamExecutivesRequestModel = null, string $contentType = self::contentTypes['apiIntegrationV1DocumentAssignFromMyTeamPost'][0])
    {



        $resourcePath = '/api/integration/v1/document/assignFromMyTeam';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($assignMyTeamExecutivesRequestModel)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($assignMyTeamExecutivesRequestModel));
            } else {
                $httpBody = $assignMyTeamExecutivesRequestModel;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiIntegrationV1DocumentAssignPost
     *
     * Specify the linguist assignment and segment distribution model
     *
     * @param  \SmartCat\Model\AssignExecutivesRequestModel $assignExecutivesRequestModel Assignment request - list of assigned executors (optional)
     * @param  string $documentId Document ID (optional)
     * @param  string $stageNumber Workflow stage number (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1DocumentAssignPost'] to see the possible values for this operation
     *
     * @throws \SmartCat\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiIntegrationV1DocumentAssignPost($assignExecutivesRequestModel = null, $documentId = null, $stageNumber = null, string $contentType = self::contentTypes['apiIntegrationV1DocumentAssignPost'][0])
    {
        $this->apiIntegrationV1DocumentAssignPostWithHttpInfo($assignExecutivesRequestModel, $documentId, $stageNumber, $contentType);
    }

    /**
     * Operation apiIntegrationV1DocumentAssignPostWithHttpInfo
     *
     * Specify the linguist assignment and segment distribution model
     *
     * @param  \SmartCat\Model\AssignExecutivesRequestModel $assignExecutivesRequestModel Assignment request - list of assigned executors (optional)
     * @param  string $documentId Document ID (optional)
     * @param  string $stageNumber Workflow stage number (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1DocumentAssignPost'] to see the possible values for this operation
     *
     * @throws \SmartCat\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiIntegrationV1DocumentAssignPostWithHttpInfo($assignExecutivesRequestModel = null, $documentId = null, $stageNumber = null, string $contentType = self::contentTypes['apiIntegrationV1DocumentAssignPost'][0])
    {
        $request = $this->apiIntegrationV1DocumentAssignPostRequest($assignExecutivesRequestModel, $documentId, $stageNumber, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiIntegrationV1DocumentAssignPostAsync
     *
     * Specify the linguist assignment and segment distribution model
     *
     * @param  \SmartCat\Model\AssignExecutivesRequestModel $assignExecutivesRequestModel Assignment request - list of assigned executors (optional)
     * @param  string $documentId Document ID (optional)
     * @param  string $stageNumber Workflow stage number (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1DocumentAssignPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiIntegrationV1DocumentAssignPostAsync($assignExecutivesRequestModel = null, $documentId = null, $stageNumber = null, string $contentType = self::contentTypes['apiIntegrationV1DocumentAssignPost'][0])
    {
        return $this->apiIntegrationV1DocumentAssignPostAsyncWithHttpInfo($assignExecutivesRequestModel, $documentId, $stageNumber, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiIntegrationV1DocumentAssignPostAsyncWithHttpInfo
     *
     * Specify the linguist assignment and segment distribution model
     *
     * @param  \SmartCat\Model\AssignExecutivesRequestModel $assignExecutivesRequestModel Assignment request - list of assigned executors (optional)
     * @param  string $documentId Document ID (optional)
     * @param  string $stageNumber Workflow stage number (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1DocumentAssignPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiIntegrationV1DocumentAssignPostAsyncWithHttpInfo($assignExecutivesRequestModel = null, $documentId = null, $stageNumber = null, string $contentType = self::contentTypes['apiIntegrationV1DocumentAssignPost'][0])
    {
        $returnType = '';
        $request = $this->apiIntegrationV1DocumentAssignPostRequest($assignExecutivesRequestModel, $documentId, $stageNumber, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiIntegrationV1DocumentAssignPost'
     *
     * @param  \SmartCat\Model\AssignExecutivesRequestModel $assignExecutivesRequestModel Assignment request - list of assigned executors (optional)
     * @param  string $documentId Document ID (optional)
     * @param  string $stageNumber Workflow stage number (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1DocumentAssignPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiIntegrationV1DocumentAssignPostRequest($assignExecutivesRequestModel = null, $documentId = null, $stageNumber = null, string $contentType = self::contentTypes['apiIntegrationV1DocumentAssignPost'][0])
    {





        $resourcePath = '/api/integration/v1/document/assign';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $documentId,
            'documentId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $stageNumber,
            'stageNumber', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($assignExecutivesRequestModel)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($assignExecutivesRequestModel));
            } else {
                $httpBody = $assignExecutivesRequestModel;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiIntegrationV1DocumentAssignVendorsPost
     *
     * Assign a vendor to a document workflow stage
     *
     * @param  string $documentId Document ID (optional)
     * @param  string $stageNumber Workflow stage number (optional)
     * @param  string $vendorAccountId Vendor account ID (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1DocumentAssignVendorsPost'] to see the possible values for this operation
     *
     * @throws \SmartCat\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiIntegrationV1DocumentAssignVendorsPost($documentId = null, $stageNumber = null, $vendorAccountId = null, string $contentType = self::contentTypes['apiIntegrationV1DocumentAssignVendorsPost'][0])
    {
        $this->apiIntegrationV1DocumentAssignVendorsPostWithHttpInfo($documentId, $stageNumber, $vendorAccountId, $contentType);
    }

    /**
     * Operation apiIntegrationV1DocumentAssignVendorsPostWithHttpInfo
     *
     * Assign a vendor to a document workflow stage
     *
     * @param  string $documentId Document ID (optional)
     * @param  string $stageNumber Workflow stage number (optional)
     * @param  string $vendorAccountId Vendor account ID (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1DocumentAssignVendorsPost'] to see the possible values for this operation
     *
     * @throws \SmartCat\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiIntegrationV1DocumentAssignVendorsPostWithHttpInfo($documentId = null, $stageNumber = null, $vendorAccountId = null, string $contentType = self::contentTypes['apiIntegrationV1DocumentAssignVendorsPost'][0])
    {
        $request = $this->apiIntegrationV1DocumentAssignVendorsPostRequest($documentId, $stageNumber, $vendorAccountId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiIntegrationV1DocumentAssignVendorsPostAsync
     *
     * Assign a vendor to a document workflow stage
     *
     * @param  string $documentId Document ID (optional)
     * @param  string $stageNumber Workflow stage number (optional)
     * @param  string $vendorAccountId Vendor account ID (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1DocumentAssignVendorsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiIntegrationV1DocumentAssignVendorsPostAsync($documentId = null, $stageNumber = null, $vendorAccountId = null, string $contentType = self::contentTypes['apiIntegrationV1DocumentAssignVendorsPost'][0])
    {
        return $this->apiIntegrationV1DocumentAssignVendorsPostAsyncWithHttpInfo($documentId, $stageNumber, $vendorAccountId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiIntegrationV1DocumentAssignVendorsPostAsyncWithHttpInfo
     *
     * Assign a vendor to a document workflow stage
     *
     * @param  string $documentId Document ID (optional)
     * @param  string $stageNumber Workflow stage number (optional)
     * @param  string $vendorAccountId Vendor account ID (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1DocumentAssignVendorsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiIntegrationV1DocumentAssignVendorsPostAsyncWithHttpInfo($documentId = null, $stageNumber = null, $vendorAccountId = null, string $contentType = self::contentTypes['apiIntegrationV1DocumentAssignVendorsPost'][0])
    {
        $returnType = '';
        $request = $this->apiIntegrationV1DocumentAssignVendorsPostRequest($documentId, $stageNumber, $vendorAccountId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiIntegrationV1DocumentAssignVendorsPost'
     *
     * @param  string $documentId Document ID (optional)
     * @param  string $stageNumber Workflow stage number (optional)
     * @param  string $vendorAccountId Vendor account ID (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1DocumentAssignVendorsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiIntegrationV1DocumentAssignVendorsPostRequest($documentId = null, $stageNumber = null, $vendorAccountId = null, string $contentType = self::contentTypes['apiIntegrationV1DocumentAssignVendorsPost'][0])
    {





        $resourcePath = '/api/integration/v1/document/assignVendors';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $documentId,
            'documentId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $stageNumber,
            'stageNumber', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $vendorAccountId,
            'vendorAccountId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiIntegrationV1DocumentCompletePost
     *
     * Change the document status to Completed
     *
     * @param  string $documentId Document ID (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1DocumentCompletePost'] to see the possible values for this operation
     *
     * @throws \SmartCat\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiIntegrationV1DocumentCompletePost($documentId = null, string $contentType = self::contentTypes['apiIntegrationV1DocumentCompletePost'][0])
    {
        $this->apiIntegrationV1DocumentCompletePostWithHttpInfo($documentId, $contentType);
    }

    /**
     * Operation apiIntegrationV1DocumentCompletePostWithHttpInfo
     *
     * Change the document status to Completed
     *
     * @param  string $documentId Document ID (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1DocumentCompletePost'] to see the possible values for this operation
     *
     * @throws \SmartCat\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiIntegrationV1DocumentCompletePostWithHttpInfo($documentId = null, string $contentType = self::contentTypes['apiIntegrationV1DocumentCompletePost'][0])
    {
        $request = $this->apiIntegrationV1DocumentCompletePostRequest($documentId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiIntegrationV1DocumentCompletePostAsync
     *
     * Change the document status to Completed
     *
     * @param  string $documentId Document ID (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1DocumentCompletePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiIntegrationV1DocumentCompletePostAsync($documentId = null, string $contentType = self::contentTypes['apiIntegrationV1DocumentCompletePost'][0])
    {
        return $this->apiIntegrationV1DocumentCompletePostAsyncWithHttpInfo($documentId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiIntegrationV1DocumentCompletePostAsyncWithHttpInfo
     *
     * Change the document status to Completed
     *
     * @param  string $documentId Document ID (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1DocumentCompletePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiIntegrationV1DocumentCompletePostAsyncWithHttpInfo($documentId = null, string $contentType = self::contentTypes['apiIntegrationV1DocumentCompletePost'][0])
    {
        $returnType = '';
        $request = $this->apiIntegrationV1DocumentCompletePostRequest($documentId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiIntegrationV1DocumentCompletePost'
     *
     * @param  string $documentId Document ID (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1DocumentCompletePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiIntegrationV1DocumentCompletePostRequest($documentId = null, string $contentType = self::contentTypes['apiIntegrationV1DocumentCompletePost'][0])
    {



        $resourcePath = '/api/integration/v1/document/complete';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $documentId,
            'documentId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiIntegrationV1DocumentDelete
     *
     * Delete one or several documents
     *
     * @param  string[] $documentIds Array of document IDs (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1DocumentDelete'] to see the possible values for this operation
     *
     * @throws \SmartCat\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiIntegrationV1DocumentDelete($documentIds, string $contentType = self::contentTypes['apiIntegrationV1DocumentDelete'][0])
    {
        $this->apiIntegrationV1DocumentDeleteWithHttpInfo($documentIds, $contentType);
    }

    /**
     * Operation apiIntegrationV1DocumentDeleteWithHttpInfo
     *
     * Delete one or several documents
     *
     * @param  string[] $documentIds Array of document IDs (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1DocumentDelete'] to see the possible values for this operation
     *
     * @throws \SmartCat\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiIntegrationV1DocumentDeleteWithHttpInfo($documentIds, string $contentType = self::contentTypes['apiIntegrationV1DocumentDelete'][0])
    {
        $request = $this->apiIntegrationV1DocumentDeleteRequest($documentIds, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiIntegrationV1DocumentDeleteAsync
     *
     * Delete one or several documents
     *
     * @param  string[] $documentIds Array of document IDs (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1DocumentDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiIntegrationV1DocumentDeleteAsync($documentIds, string $contentType = self::contentTypes['apiIntegrationV1DocumentDelete'][0])
    {
        return $this->apiIntegrationV1DocumentDeleteAsyncWithHttpInfo($documentIds, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiIntegrationV1DocumentDeleteAsyncWithHttpInfo
     *
     * Delete one or several documents
     *
     * @param  string[] $documentIds Array of document IDs (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1DocumentDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiIntegrationV1DocumentDeleteAsyncWithHttpInfo($documentIds, string $contentType = self::contentTypes['apiIntegrationV1DocumentDelete'][0])
    {
        $returnType = '';
        $request = $this->apiIntegrationV1DocumentDeleteRequest($documentIds, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiIntegrationV1DocumentDelete'
     *
     * @param  string[] $documentIds Array of document IDs (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1DocumentDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiIntegrationV1DocumentDeleteRequest($documentIds, string $contentType = self::contentTypes['apiIntegrationV1DocumentDelete'][0])
    {

        // verify the required parameter 'documentIds' is set
        if ($documentIds === null || (is_array($documentIds) && count($documentIds) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $documentIds when calling apiIntegrationV1DocumentDelete'
            );
        }


        $resourcePath = '/api/integration/v1/document';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $documentIds,
            'documentIds', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiIntegrationV1DocumentGet
     *
     * Fetch the document details
     *
     * @param  string $documentId Document ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1DocumentGet'] to see the possible values for this operation
     *
     * @throws \SmartCat\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SmartCat\Model\DocumentModel
     */
    public function apiIntegrationV1DocumentGet($documentId, string $contentType = self::contentTypes['apiIntegrationV1DocumentGet'][0])
    {
        list($response) = $this->apiIntegrationV1DocumentGetWithHttpInfo($documentId, $contentType);
        return $response;
    }

    /**
     * Operation apiIntegrationV1DocumentGetWithHttpInfo
     *
     * Fetch the document details
     *
     * @param  string $documentId Document ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1DocumentGet'] to see the possible values for this operation
     *
     * @throws \SmartCat\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SmartCat\Model\DocumentModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiIntegrationV1DocumentGetWithHttpInfo($documentId, string $contentType = self::contentTypes['apiIntegrationV1DocumentGet'][0])
    {
        $request = $this->apiIntegrationV1DocumentGetRequest($documentId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\SmartCat\Model\DocumentModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SmartCat\Model\DocumentModel' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SmartCat\Model\DocumentModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\SmartCat\Model\DocumentModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SmartCat\Model\DocumentModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiIntegrationV1DocumentGetAsync
     *
     * Fetch the document details
     *
     * @param  string $documentId Document ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1DocumentGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiIntegrationV1DocumentGetAsync($documentId, string $contentType = self::contentTypes['apiIntegrationV1DocumentGet'][0])
    {
        return $this->apiIntegrationV1DocumentGetAsyncWithHttpInfo($documentId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiIntegrationV1DocumentGetAsyncWithHttpInfo
     *
     * Fetch the document details
     *
     * @param  string $documentId Document ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1DocumentGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiIntegrationV1DocumentGetAsyncWithHttpInfo($documentId, string $contentType = self::contentTypes['apiIntegrationV1DocumentGet'][0])
    {
        $returnType = '\SmartCat\Model\DocumentModel';
        $request = $this->apiIntegrationV1DocumentGetRequest($documentId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiIntegrationV1DocumentGet'
     *
     * @param  string $documentId Document ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1DocumentGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiIntegrationV1DocumentGetRequest($documentId, string $contentType = self::contentTypes['apiIntegrationV1DocumentGet'][0])
    {

        // verify the required parameter 'documentId' is set
        if ($documentId === null || (is_array($documentId) && count($documentId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $documentId when calling apiIntegrationV1DocumentGet'
            );
        }


        $resourcePath = '/api/integration/v1/document';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $documentId,
            'documentId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiIntegrationV1DocumentRenamePut
     *
     * Rename the assigned document
     *
     * @param  string $documentId Document ID (required)
     * @param  string $name New name (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1DocumentRenamePut'] to see the possible values for this operation
     *
     * @throws \SmartCat\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiIntegrationV1DocumentRenamePut($documentId, $name, string $contentType = self::contentTypes['apiIntegrationV1DocumentRenamePut'][0])
    {
        $this->apiIntegrationV1DocumentRenamePutWithHttpInfo($documentId, $name, $contentType);
    }

    /**
     * Operation apiIntegrationV1DocumentRenamePutWithHttpInfo
     *
     * Rename the assigned document
     *
     * @param  string $documentId Document ID (required)
     * @param  string $name New name (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1DocumentRenamePut'] to see the possible values for this operation
     *
     * @throws \SmartCat\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiIntegrationV1DocumentRenamePutWithHttpInfo($documentId, $name, string $contentType = self::contentTypes['apiIntegrationV1DocumentRenamePut'][0])
    {
        $request = $this->apiIntegrationV1DocumentRenamePutRequest($documentId, $name, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiIntegrationV1DocumentRenamePutAsync
     *
     * Rename the assigned document
     *
     * @param  string $documentId Document ID (required)
     * @param  string $name New name (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1DocumentRenamePut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiIntegrationV1DocumentRenamePutAsync($documentId, $name, string $contentType = self::contentTypes['apiIntegrationV1DocumentRenamePut'][0])
    {
        return $this->apiIntegrationV1DocumentRenamePutAsyncWithHttpInfo($documentId, $name, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiIntegrationV1DocumentRenamePutAsyncWithHttpInfo
     *
     * Rename the assigned document
     *
     * @param  string $documentId Document ID (required)
     * @param  string $name New name (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1DocumentRenamePut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiIntegrationV1DocumentRenamePutAsyncWithHttpInfo($documentId, $name, string $contentType = self::contentTypes['apiIntegrationV1DocumentRenamePut'][0])
    {
        $returnType = '';
        $request = $this->apiIntegrationV1DocumentRenamePutRequest($documentId, $name, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiIntegrationV1DocumentRenamePut'
     *
     * @param  string $documentId Document ID (required)
     * @param  string $name New name (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1DocumentRenamePut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiIntegrationV1DocumentRenamePutRequest($documentId, $name, string $contentType = self::contentTypes['apiIntegrationV1DocumentRenamePut'][0])
    {

        // verify the required parameter 'documentId' is set
        if ($documentId === null || (is_array($documentId) && count($documentId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $documentId when calling apiIntegrationV1DocumentRenamePut'
            );
        }

        // verify the required parameter 'name' is set
        if ($name === null || (is_array($name) && count($name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling apiIntegrationV1DocumentRenamePut'
            );
        }


        $resourcePath = '/api/integration/v1/document/rename';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $documentId,
            'documentId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $name,
            'name', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiIntegrationV1DocumentSetStageUnitCountPost
     *
     * Specify the unit count for a document workflow stage
     *
     * @param  \SmartCat\Model\SetStageUnitsCountModel[] $setStageUnitsCountModel Document unit count setup model (optional)
     * @param  string $projectId Project ID (optional)
     * @param  string $stageNumber Workflow stage number (optional)
     * @param  int $targetLanguageId Document target language ID (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1DocumentSetStageUnitCountPost'] to see the possible values for this operation
     *
     * @throws \SmartCat\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiIntegrationV1DocumentSetStageUnitCountPost($setStageUnitsCountModel = null, $projectId = null, $stageNumber = null, $targetLanguageId = null, string $contentType = self::contentTypes['apiIntegrationV1DocumentSetStageUnitCountPost'][0])
    {
        $this->apiIntegrationV1DocumentSetStageUnitCountPostWithHttpInfo($setStageUnitsCountModel, $projectId, $stageNumber, $targetLanguageId, $contentType);
    }

    /**
     * Operation apiIntegrationV1DocumentSetStageUnitCountPostWithHttpInfo
     *
     * Specify the unit count for a document workflow stage
     *
     * @param  \SmartCat\Model\SetStageUnitsCountModel[] $setStageUnitsCountModel Document unit count setup model (optional)
     * @param  string $projectId Project ID (optional)
     * @param  string $stageNumber Workflow stage number (optional)
     * @param  int $targetLanguageId Document target language ID (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1DocumentSetStageUnitCountPost'] to see the possible values for this operation
     *
     * @throws \SmartCat\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiIntegrationV1DocumentSetStageUnitCountPostWithHttpInfo($setStageUnitsCountModel = null, $projectId = null, $stageNumber = null, $targetLanguageId = null, string $contentType = self::contentTypes['apiIntegrationV1DocumentSetStageUnitCountPost'][0])
    {
        $request = $this->apiIntegrationV1DocumentSetStageUnitCountPostRequest($setStageUnitsCountModel, $projectId, $stageNumber, $targetLanguageId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiIntegrationV1DocumentSetStageUnitCountPostAsync
     *
     * Specify the unit count for a document workflow stage
     *
     * @param  \SmartCat\Model\SetStageUnitsCountModel[] $setStageUnitsCountModel Document unit count setup model (optional)
     * @param  string $projectId Project ID (optional)
     * @param  string $stageNumber Workflow stage number (optional)
     * @param  int $targetLanguageId Document target language ID (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1DocumentSetStageUnitCountPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiIntegrationV1DocumentSetStageUnitCountPostAsync($setStageUnitsCountModel = null, $projectId = null, $stageNumber = null, $targetLanguageId = null, string $contentType = self::contentTypes['apiIntegrationV1DocumentSetStageUnitCountPost'][0])
    {
        return $this->apiIntegrationV1DocumentSetStageUnitCountPostAsyncWithHttpInfo($setStageUnitsCountModel, $projectId, $stageNumber, $targetLanguageId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiIntegrationV1DocumentSetStageUnitCountPostAsyncWithHttpInfo
     *
     * Specify the unit count for a document workflow stage
     *
     * @param  \SmartCat\Model\SetStageUnitsCountModel[] $setStageUnitsCountModel Document unit count setup model (optional)
     * @param  string $projectId Project ID (optional)
     * @param  string $stageNumber Workflow stage number (optional)
     * @param  int $targetLanguageId Document target language ID (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1DocumentSetStageUnitCountPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiIntegrationV1DocumentSetStageUnitCountPostAsyncWithHttpInfo($setStageUnitsCountModel = null, $projectId = null, $stageNumber = null, $targetLanguageId = null, string $contentType = self::contentTypes['apiIntegrationV1DocumentSetStageUnitCountPost'][0])
    {
        $returnType = '';
        $request = $this->apiIntegrationV1DocumentSetStageUnitCountPostRequest($setStageUnitsCountModel, $projectId, $stageNumber, $targetLanguageId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiIntegrationV1DocumentSetStageUnitCountPost'
     *
     * @param  \SmartCat\Model\SetStageUnitsCountModel[] $setStageUnitsCountModel Document unit count setup model (optional)
     * @param  string $projectId Project ID (optional)
     * @param  string $stageNumber Workflow stage number (optional)
     * @param  int $targetLanguageId Document target language ID (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1DocumentSetStageUnitCountPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiIntegrationV1DocumentSetStageUnitCountPostRequest($setStageUnitsCountModel = null, $projectId = null, $stageNumber = null, $targetLanguageId = null, string $contentType = self::contentTypes['apiIntegrationV1DocumentSetStageUnitCountPost'][0])
    {






        $resourcePath = '/api/integration/v1/document/setStageUnitCount';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $projectId,
            'projectId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $stageNumber,
            'stageNumber', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $targetLanguageId,
            'targetLanguageId', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($setStageUnitsCountModel)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($setStageUnitsCountModel));
            } else {
                $httpBody = $setStageUnitsCountModel;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiIntegrationV1DocumentStatisticsGet
     *
     * Fetch statistics
     *
     * @param  string $documentId Document ID (required)
     * @param  bool $onlyExactMatches Specifies whether returning 100% and higher matches will suffice (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1DocumentStatisticsGet'] to see the possible values for this operation
     *
     * @throws \SmartCat\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SmartCat\Model\DocumentStatisticsModel
     */
    public function apiIntegrationV1DocumentStatisticsGet($documentId, $onlyExactMatches = false, string $contentType = self::contentTypes['apiIntegrationV1DocumentStatisticsGet'][0])
    {
        list($response) = $this->apiIntegrationV1DocumentStatisticsGetWithHttpInfo($documentId, $onlyExactMatches, $contentType);
        return $response;
    }

    /**
     * Operation apiIntegrationV1DocumentStatisticsGetWithHttpInfo
     *
     * Fetch statistics
     *
     * @param  string $documentId Document ID (required)
     * @param  bool $onlyExactMatches Specifies whether returning 100% and higher matches will suffice (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1DocumentStatisticsGet'] to see the possible values for this operation
     *
     * @throws \SmartCat\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SmartCat\Model\DocumentStatisticsModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiIntegrationV1DocumentStatisticsGetWithHttpInfo($documentId, $onlyExactMatches = false, string $contentType = self::contentTypes['apiIntegrationV1DocumentStatisticsGet'][0])
    {
        $request = $this->apiIntegrationV1DocumentStatisticsGetRequest($documentId, $onlyExactMatches, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\SmartCat\Model\DocumentStatisticsModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SmartCat\Model\DocumentStatisticsModel' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SmartCat\Model\DocumentStatisticsModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\SmartCat\Model\DocumentStatisticsModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SmartCat\Model\DocumentStatisticsModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiIntegrationV1DocumentStatisticsGetAsync
     *
     * Fetch statistics
     *
     * @param  string $documentId Document ID (required)
     * @param  bool $onlyExactMatches Specifies whether returning 100% and higher matches will suffice (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1DocumentStatisticsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiIntegrationV1DocumentStatisticsGetAsync($documentId, $onlyExactMatches = false, string $contentType = self::contentTypes['apiIntegrationV1DocumentStatisticsGet'][0])
    {
        return $this->apiIntegrationV1DocumentStatisticsGetAsyncWithHttpInfo($documentId, $onlyExactMatches, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiIntegrationV1DocumentStatisticsGetAsyncWithHttpInfo
     *
     * Fetch statistics
     *
     * @param  string $documentId Document ID (required)
     * @param  bool $onlyExactMatches Specifies whether returning 100% and higher matches will suffice (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1DocumentStatisticsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiIntegrationV1DocumentStatisticsGetAsyncWithHttpInfo($documentId, $onlyExactMatches = false, string $contentType = self::contentTypes['apiIntegrationV1DocumentStatisticsGet'][0])
    {
        $returnType = '\SmartCat\Model\DocumentStatisticsModel';
        $request = $this->apiIntegrationV1DocumentStatisticsGetRequest($documentId, $onlyExactMatches, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiIntegrationV1DocumentStatisticsGet'
     *
     * @param  string $documentId Document ID (required)
     * @param  bool $onlyExactMatches Specifies whether returning 100% and higher matches will suffice (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1DocumentStatisticsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiIntegrationV1DocumentStatisticsGetRequest($documentId, $onlyExactMatches = false, string $contentType = self::contentTypes['apiIntegrationV1DocumentStatisticsGet'][0])
    {

        // verify the required parameter 'documentId' is set
        if ($documentId === null || (is_array($documentId) && count($documentId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $documentId when calling apiIntegrationV1DocumentStatisticsGet'
            );
        }



        $resourcePath = '/api/integration/v1/document/statistics';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $documentId,
            'documentId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $onlyExactMatches,
            'onlyExactMatches', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiIntegrationV1DocumentTranslatePut
     *
     * Translate the specified document using the specified translation file
     *
     * @param  string $documentId Document ID (required)
     * @param  \SmartCat\Model\UploadedFile $uploadedFile Translation file (optional)
     * @param  bool $overwrite Specifies whether to overwrite the available translations (optional, default to false)
     * @param  bool $confirmTranslation Confirm updated segments (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1DocumentTranslatePut'] to see the possible values for this operation
     *
     * @throws \SmartCat\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiIntegrationV1DocumentTranslatePut($documentId, $uploadedFile = null, $overwrite = false, $confirmTranslation = false, string $contentType = self::contentTypes['apiIntegrationV1DocumentTranslatePut'][0])
    {
        $this->apiIntegrationV1DocumentTranslatePutWithHttpInfo($documentId, $uploadedFile, $overwrite, $confirmTranslation, $contentType);
    }

    /**
     * Operation apiIntegrationV1DocumentTranslatePutWithHttpInfo
     *
     * Translate the specified document using the specified translation file
     *
     * @param  string $documentId Document ID (required)
     * @param  \SmartCat\Model\UploadedFile $uploadedFile Translation file (optional)
     * @param  bool $overwrite Specifies whether to overwrite the available translations (optional, default to false)
     * @param  bool $confirmTranslation Confirm updated segments (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1DocumentTranslatePut'] to see the possible values for this operation
     *
     * @throws \SmartCat\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiIntegrationV1DocumentTranslatePutWithHttpInfo($documentId, $uploadedFile = null, $overwrite = false, $confirmTranslation = false, string $contentType = self::contentTypes['apiIntegrationV1DocumentTranslatePut'][0])
    {
        $request = $this->apiIntegrationV1DocumentTranslatePutRequest($documentId, $uploadedFile, $overwrite, $confirmTranslation, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiIntegrationV1DocumentTranslatePutAsync
     *
     * Translate the specified document using the specified translation file
     *
     * @param  string $documentId Document ID (required)
     * @param  \SmartCat\Model\UploadedFile $uploadedFile Translation file (optional)
     * @param  bool $overwrite Specifies whether to overwrite the available translations (optional, default to false)
     * @param  bool $confirmTranslation Confirm updated segments (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1DocumentTranslatePut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiIntegrationV1DocumentTranslatePutAsync($documentId, $uploadedFile = null, $overwrite = false, $confirmTranslation = false, string $contentType = self::contentTypes['apiIntegrationV1DocumentTranslatePut'][0])
    {
        return $this->apiIntegrationV1DocumentTranslatePutAsyncWithHttpInfo($documentId, $uploadedFile, $overwrite, $confirmTranslation, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiIntegrationV1DocumentTranslatePutAsyncWithHttpInfo
     *
     * Translate the specified document using the specified translation file
     *
     * @param  string $documentId Document ID (required)
     * @param  \SmartCat\Model\UploadedFile $uploadedFile Translation file (optional)
     * @param  bool $overwrite Specifies whether to overwrite the available translations (optional, default to false)
     * @param  bool $confirmTranslation Confirm updated segments (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1DocumentTranslatePut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiIntegrationV1DocumentTranslatePutAsyncWithHttpInfo($documentId, $uploadedFile = null, $overwrite = false, $confirmTranslation = false, string $contentType = self::contentTypes['apiIntegrationV1DocumentTranslatePut'][0])
    {
        $returnType = '';
        $request = $this->apiIntegrationV1DocumentTranslatePutRequest($documentId, $uploadedFile, $overwrite, $confirmTranslation, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiIntegrationV1DocumentTranslatePut'
     *
     * @param  string $documentId Document ID (required)
     * @param  \SmartCat\Model\UploadedFile $uploadedFile Translation file (optional)
     * @param  bool $overwrite Specifies whether to overwrite the available translations (optional, default to false)
     * @param  bool $confirmTranslation Confirm updated segments (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1DocumentTranslatePut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiIntegrationV1DocumentTranslatePutRequest($documentId, $uploadedFile = null, $overwrite = false, $confirmTranslation = false, string $contentType = self::contentTypes['apiIntegrationV1DocumentTranslatePut'][0])
    {

        // verify the required parameter 'documentId' is set
        if ($documentId === null || (is_array($documentId) && count($documentId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $documentId when calling apiIntegrationV1DocumentTranslatePut'
            );
        }





        $resourcePath = '/api/integration/v1/document/translate';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $documentId,
            'documentId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $overwrite,
            'overwrite', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $confirmTranslation,
            'confirmTranslation', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($uploadedFile)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($uploadedFile));
            } else {
                $httpBody = $uploadedFile;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiIntegrationV1DocumentTranslateResultGet
     *
     * Fetch a detailed report on translation import results
     *
     * @param  string $documentId Document ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1DocumentTranslateResultGet'] to see the possible values for this operation
     *
     * @throws \SmartCat\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiIntegrationV1DocumentTranslateResultGet($documentId, string $contentType = self::contentTypes['apiIntegrationV1DocumentTranslateResultGet'][0])
    {
        $this->apiIntegrationV1DocumentTranslateResultGetWithHttpInfo($documentId, $contentType);
    }

    /**
     * Operation apiIntegrationV1DocumentTranslateResultGetWithHttpInfo
     *
     * Fetch a detailed report on translation import results
     *
     * @param  string $documentId Document ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1DocumentTranslateResultGet'] to see the possible values for this operation
     *
     * @throws \SmartCat\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiIntegrationV1DocumentTranslateResultGetWithHttpInfo($documentId, string $contentType = self::contentTypes['apiIntegrationV1DocumentTranslateResultGet'][0])
    {
        $request = $this->apiIntegrationV1DocumentTranslateResultGetRequest($documentId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiIntegrationV1DocumentTranslateResultGetAsync
     *
     * Fetch a detailed report on translation import results
     *
     * @param  string $documentId Document ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1DocumentTranslateResultGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiIntegrationV1DocumentTranslateResultGetAsync($documentId, string $contentType = self::contentTypes['apiIntegrationV1DocumentTranslateResultGet'][0])
    {
        return $this->apiIntegrationV1DocumentTranslateResultGetAsyncWithHttpInfo($documentId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiIntegrationV1DocumentTranslateResultGetAsyncWithHttpInfo
     *
     * Fetch a detailed report on translation import results
     *
     * @param  string $documentId Document ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1DocumentTranslateResultGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiIntegrationV1DocumentTranslateResultGetAsyncWithHttpInfo($documentId, string $contentType = self::contentTypes['apiIntegrationV1DocumentTranslateResultGet'][0])
    {
        $returnType = '';
        $request = $this->apiIntegrationV1DocumentTranslateResultGetRequest($documentId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiIntegrationV1DocumentTranslateResultGet'
     *
     * @param  string $documentId Document ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1DocumentTranslateResultGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiIntegrationV1DocumentTranslateResultGetRequest($documentId, string $contentType = self::contentTypes['apiIntegrationV1DocumentTranslateResultGet'][0])
    {

        // verify the required parameter 'documentId' is set
        if ($documentId === null || (is_array($documentId) && count($documentId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $documentId when calling apiIntegrationV1DocumentTranslateResultGet'
            );
        }


        $resourcePath = '/api/integration/v1/document/translate/result';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $documentId,
            'documentId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiIntegrationV1DocumentTranslateStatusGet
     *
     * Fetch the status of adding document translation
     *
     * @param  string $documentId Document ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1DocumentTranslateStatusGet'] to see the possible values for this operation
     *
     * @throws \SmartCat\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SmartCat\Model\TranslationTaskStatus
     */
    public function apiIntegrationV1DocumentTranslateStatusGet($documentId, string $contentType = self::contentTypes['apiIntegrationV1DocumentTranslateStatusGet'][0])
    {
        list($response) = $this->apiIntegrationV1DocumentTranslateStatusGetWithHttpInfo($documentId, $contentType);
        return $response;
    }

    /**
     * Operation apiIntegrationV1DocumentTranslateStatusGetWithHttpInfo
     *
     * Fetch the status of adding document translation
     *
     * @param  string $documentId Document ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1DocumentTranslateStatusGet'] to see the possible values for this operation
     *
     * @throws \SmartCat\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SmartCat\Model\TranslationTaskStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiIntegrationV1DocumentTranslateStatusGetWithHttpInfo($documentId, string $contentType = self::contentTypes['apiIntegrationV1DocumentTranslateStatusGet'][0])
    {
        $request = $this->apiIntegrationV1DocumentTranslateStatusGetRequest($documentId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\SmartCat\Model\TranslationTaskStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SmartCat\Model\TranslationTaskStatus' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SmartCat\Model\TranslationTaskStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\SmartCat\Model\TranslationTaskStatus';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SmartCat\Model\TranslationTaskStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiIntegrationV1DocumentTranslateStatusGetAsync
     *
     * Fetch the status of adding document translation
     *
     * @param  string $documentId Document ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1DocumentTranslateStatusGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiIntegrationV1DocumentTranslateStatusGetAsync($documentId, string $contentType = self::contentTypes['apiIntegrationV1DocumentTranslateStatusGet'][0])
    {
        return $this->apiIntegrationV1DocumentTranslateStatusGetAsyncWithHttpInfo($documentId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiIntegrationV1DocumentTranslateStatusGetAsyncWithHttpInfo
     *
     * Fetch the status of adding document translation
     *
     * @param  string $documentId Document ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1DocumentTranslateStatusGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiIntegrationV1DocumentTranslateStatusGetAsyncWithHttpInfo($documentId, string $contentType = self::contentTypes['apiIntegrationV1DocumentTranslateStatusGet'][0])
    {
        $returnType = '\SmartCat\Model\TranslationTaskStatus';
        $request = $this->apiIntegrationV1DocumentTranslateStatusGetRequest($documentId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiIntegrationV1DocumentTranslateStatusGet'
     *
     * @param  string $documentId Document ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1DocumentTranslateStatusGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiIntegrationV1DocumentTranslateStatusGetRequest($documentId, string $contentType = self::contentTypes['apiIntegrationV1DocumentTranslateStatusGet'][0])
    {

        // verify the required parameter 'documentId' is set
        if ($documentId === null || (is_array($documentId) && count($documentId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $documentId when calling apiIntegrationV1DocumentTranslateStatusGet'
            );
        }


        $resourcePath = '/api/integration/v1/document/translate/status';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $documentId,
            'documentId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiIntegrationV1DocumentTranslateWithXliffPut
     *
     * Import an XLIFF file with document translations
     *
     * @param  string $documentId ID of the document to update (required)
     * @param  \SmartCat\Model\UploadedFile[] $uploadedFile XLIFF file with segment translations (optional)
     * @param  bool $confirmTranslation Confirm updated segments (optional)
     * @param  bool $overwriteUpdatedSegments Specifies whether to overwrite the segments that have been updated since the last export of the XLIFF file (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1DocumentTranslateWithXliffPut'] to see the possible values for this operation
     *
     * @throws \SmartCat\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiIntegrationV1DocumentTranslateWithXliffPut($documentId, $uploadedFile = null, $confirmTranslation = null, $overwriteUpdatedSegments = null, string $contentType = self::contentTypes['apiIntegrationV1DocumentTranslateWithXliffPut'][0])
    {
        $this->apiIntegrationV1DocumentTranslateWithXliffPutWithHttpInfo($documentId, $uploadedFile, $confirmTranslation, $overwriteUpdatedSegments, $contentType);
    }

    /**
     * Operation apiIntegrationV1DocumentTranslateWithXliffPutWithHttpInfo
     *
     * Import an XLIFF file with document translations
     *
     * @param  string $documentId ID of the document to update (required)
     * @param  \SmartCat\Model\UploadedFile[] $uploadedFile XLIFF file with segment translations (optional)
     * @param  bool $confirmTranslation Confirm updated segments (optional)
     * @param  bool $overwriteUpdatedSegments Specifies whether to overwrite the segments that have been updated since the last export of the XLIFF file (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1DocumentTranslateWithXliffPut'] to see the possible values for this operation
     *
     * @throws \SmartCat\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiIntegrationV1DocumentTranslateWithXliffPutWithHttpInfo($documentId, $uploadedFile = null, $confirmTranslation = null, $overwriteUpdatedSegments = null, string $contentType = self::contentTypes['apiIntegrationV1DocumentTranslateWithXliffPut'][0])
    {
        $request = $this->apiIntegrationV1DocumentTranslateWithXliffPutRequest($documentId, $uploadedFile, $confirmTranslation, $overwriteUpdatedSegments, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiIntegrationV1DocumentTranslateWithXliffPutAsync
     *
     * Import an XLIFF file with document translations
     *
     * @param  string $documentId ID of the document to update (required)
     * @param  \SmartCat\Model\UploadedFile[] $uploadedFile XLIFF file with segment translations (optional)
     * @param  bool $confirmTranslation Confirm updated segments (optional)
     * @param  bool $overwriteUpdatedSegments Specifies whether to overwrite the segments that have been updated since the last export of the XLIFF file (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1DocumentTranslateWithXliffPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiIntegrationV1DocumentTranslateWithXliffPutAsync($documentId, $uploadedFile = null, $confirmTranslation = null, $overwriteUpdatedSegments = null, string $contentType = self::contentTypes['apiIntegrationV1DocumentTranslateWithXliffPut'][0])
    {
        return $this->apiIntegrationV1DocumentTranslateWithXliffPutAsyncWithHttpInfo($documentId, $uploadedFile, $confirmTranslation, $overwriteUpdatedSegments, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiIntegrationV1DocumentTranslateWithXliffPutAsyncWithHttpInfo
     *
     * Import an XLIFF file with document translations
     *
     * @param  string $documentId ID of the document to update (required)
     * @param  \SmartCat\Model\UploadedFile[] $uploadedFile XLIFF file with segment translations (optional)
     * @param  bool $confirmTranslation Confirm updated segments (optional)
     * @param  bool $overwriteUpdatedSegments Specifies whether to overwrite the segments that have been updated since the last export of the XLIFF file (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1DocumentTranslateWithXliffPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiIntegrationV1DocumentTranslateWithXliffPutAsyncWithHttpInfo($documentId, $uploadedFile = null, $confirmTranslation = null, $overwriteUpdatedSegments = null, string $contentType = self::contentTypes['apiIntegrationV1DocumentTranslateWithXliffPut'][0])
    {
        $returnType = '';
        $request = $this->apiIntegrationV1DocumentTranslateWithXliffPutRequest($documentId, $uploadedFile, $confirmTranslation, $overwriteUpdatedSegments, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiIntegrationV1DocumentTranslateWithXliffPut'
     *
     * @param  string $documentId ID of the document to update (required)
     * @param  \SmartCat\Model\UploadedFile[] $uploadedFile XLIFF file with segment translations (optional)
     * @param  bool $confirmTranslation Confirm updated segments (optional)
     * @param  bool $overwriteUpdatedSegments Specifies whether to overwrite the segments that have been updated since the last export of the XLIFF file (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1DocumentTranslateWithXliffPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiIntegrationV1DocumentTranslateWithXliffPutRequest($documentId, $uploadedFile = null, $confirmTranslation = null, $overwriteUpdatedSegments = null, string $contentType = self::contentTypes['apiIntegrationV1DocumentTranslateWithXliffPut'][0])
    {

        // verify the required parameter 'documentId' is set
        if ($documentId === null || (is_array($documentId) && count($documentId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $documentId when calling apiIntegrationV1DocumentTranslateWithXliffPut'
            );
        }





        $resourcePath = '/api/integration/v1/document/translateWithXliff';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $documentId,
            'documentId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $confirmTranslation,
            'confirmTranslation', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $overwriteUpdatedSegments,
            'overwriteUpdatedSegments', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($uploadedFile)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($uploadedFile));
            } else {
                $httpBody = $uploadedFile;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiIntegrationV1DocumentUnassignPost
     *
     * Unassign a linguist
     *
     * @param  string $body Unassigned executor ID (optional)
     * @param  string $documentId Document ID (optional)
     * @param  string $stageNumber Workflow stage number (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1DocumentUnassignPost'] to see the possible values for this operation
     *
     * @throws \SmartCat\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiIntegrationV1DocumentUnassignPost($body = null, $documentId = null, $stageNumber = null, string $contentType = self::contentTypes['apiIntegrationV1DocumentUnassignPost'][0])
    {
        $this->apiIntegrationV1DocumentUnassignPostWithHttpInfo($body, $documentId, $stageNumber, $contentType);
    }

    /**
     * Operation apiIntegrationV1DocumentUnassignPostWithHttpInfo
     *
     * Unassign a linguist
     *
     * @param  string $body Unassigned executor ID (optional)
     * @param  string $documentId Document ID (optional)
     * @param  string $stageNumber Workflow stage number (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1DocumentUnassignPost'] to see the possible values for this operation
     *
     * @throws \SmartCat\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiIntegrationV1DocumentUnassignPostWithHttpInfo($body = null, $documentId = null, $stageNumber = null, string $contentType = self::contentTypes['apiIntegrationV1DocumentUnassignPost'][0])
    {
        $request = $this->apiIntegrationV1DocumentUnassignPostRequest($body, $documentId, $stageNumber, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiIntegrationV1DocumentUnassignPostAsync
     *
     * Unassign a linguist
     *
     * @param  string $body Unassigned executor ID (optional)
     * @param  string $documentId Document ID (optional)
     * @param  string $stageNumber Workflow stage number (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1DocumentUnassignPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiIntegrationV1DocumentUnassignPostAsync($body = null, $documentId = null, $stageNumber = null, string $contentType = self::contentTypes['apiIntegrationV1DocumentUnassignPost'][0])
    {
        return $this->apiIntegrationV1DocumentUnassignPostAsyncWithHttpInfo($body, $documentId, $stageNumber, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiIntegrationV1DocumentUnassignPostAsyncWithHttpInfo
     *
     * Unassign a linguist
     *
     * @param  string $body Unassigned executor ID (optional)
     * @param  string $documentId Document ID (optional)
     * @param  string $stageNumber Workflow stage number (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1DocumentUnassignPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiIntegrationV1DocumentUnassignPostAsyncWithHttpInfo($body = null, $documentId = null, $stageNumber = null, string $contentType = self::contentTypes['apiIntegrationV1DocumentUnassignPost'][0])
    {
        $returnType = '';
        $request = $this->apiIntegrationV1DocumentUnassignPostRequest($body, $documentId, $stageNumber, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiIntegrationV1DocumentUnassignPost'
     *
     * @param  string $body Unassigned executor ID (optional)
     * @param  string $documentId Document ID (optional)
     * @param  string $stageNumber Workflow stage number (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1DocumentUnassignPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiIntegrationV1DocumentUnassignPostRequest($body = null, $documentId = null, $stageNumber = null, string $contentType = self::contentTypes['apiIntegrationV1DocumentUnassignPost'][0])
    {





        $resourcePath = '/api/integration/v1/document/unassign';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $documentId,
            'documentId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $stageNumber,
            'stageNumber', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiIntegrationV1DocumentUpdateMetaInfoPut
     *
     * Update document meta info
     *
     * @param  string $body New value (required)
     * @param  string $documentId Document ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1DocumentUpdateMetaInfoPut'] to see the possible values for this operation
     *
     * @throws \SmartCat\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiIntegrationV1DocumentUpdateMetaInfoPut($body, $documentId, string $contentType = self::contentTypes['apiIntegrationV1DocumentUpdateMetaInfoPut'][0])
    {
        $this->apiIntegrationV1DocumentUpdateMetaInfoPutWithHttpInfo($body, $documentId, $contentType);
    }

    /**
     * Operation apiIntegrationV1DocumentUpdateMetaInfoPutWithHttpInfo
     *
     * Update document meta info
     *
     * @param  string $body New value (required)
     * @param  string $documentId Document ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1DocumentUpdateMetaInfoPut'] to see the possible values for this operation
     *
     * @throws \SmartCat\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiIntegrationV1DocumentUpdateMetaInfoPutWithHttpInfo($body, $documentId, string $contentType = self::contentTypes['apiIntegrationV1DocumentUpdateMetaInfoPut'][0])
    {
        $request = $this->apiIntegrationV1DocumentUpdateMetaInfoPutRequest($body, $documentId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiIntegrationV1DocumentUpdateMetaInfoPutAsync
     *
     * Update document meta info
     *
     * @param  string $body New value (required)
     * @param  string $documentId Document ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1DocumentUpdateMetaInfoPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiIntegrationV1DocumentUpdateMetaInfoPutAsync($body, $documentId, string $contentType = self::contentTypes['apiIntegrationV1DocumentUpdateMetaInfoPut'][0])
    {
        return $this->apiIntegrationV1DocumentUpdateMetaInfoPutAsyncWithHttpInfo($body, $documentId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiIntegrationV1DocumentUpdateMetaInfoPutAsyncWithHttpInfo
     *
     * Update document meta info
     *
     * @param  string $body New value (required)
     * @param  string $documentId Document ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1DocumentUpdateMetaInfoPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiIntegrationV1DocumentUpdateMetaInfoPutAsyncWithHttpInfo($body, $documentId, string $contentType = self::contentTypes['apiIntegrationV1DocumentUpdateMetaInfoPut'][0])
    {
        $returnType = '';
        $request = $this->apiIntegrationV1DocumentUpdateMetaInfoPutRequest($body, $documentId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiIntegrationV1DocumentUpdateMetaInfoPut'
     *
     * @param  string $body New value (required)
     * @param  string $documentId Document ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1DocumentUpdateMetaInfoPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiIntegrationV1DocumentUpdateMetaInfoPutRequest($body, $documentId, string $contentType = self::contentTypes['apiIntegrationV1DocumentUpdateMetaInfoPut'][0])
    {

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling apiIntegrationV1DocumentUpdateMetaInfoPut'
            );
        }

        // verify the required parameter 'documentId' is set
        if ($documentId === null || (is_array($documentId) && count($documentId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $documentId when calling apiIntegrationV1DocumentUpdateMetaInfoPut'
            );
        }


        $resourcePath = '/api/integration/v1/document/updateMetaInfo';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $documentId,
            'documentId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiIntegrationV1DocumentUpdatePut
     *
     * (This method is obsolete and has been replaced with /api/integration/v2/document/update)  Update the specified document
     *
     * @param  \SmartCat\Model\ModelWithFilesUploadDocumentPropertiesModel $modelWithFilesUploadDocumentPropertiesModel Document with a file update model (required)
     * @param  string $documentId Document ID (required)
     * @param  string $disassembleAlgorithmName Optional algorithm for file disassembly (optional)
     * @param  string $presetDisassembleAlgorithm Optional preset for the file disassembly algorithm (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1DocumentUpdatePut'] to see the possible values for this operation
     *
     * @throws \SmartCat\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SmartCat\Model\DocumentModel[]
     */
    public function apiIntegrationV1DocumentUpdatePut($modelWithFilesUploadDocumentPropertiesModel, $documentId, $disassembleAlgorithmName = null, $presetDisassembleAlgorithm = null, string $contentType = self::contentTypes['apiIntegrationV1DocumentUpdatePut'][0])
    {
        list($response) = $this->apiIntegrationV1DocumentUpdatePutWithHttpInfo($modelWithFilesUploadDocumentPropertiesModel, $documentId, $disassembleAlgorithmName, $presetDisassembleAlgorithm, $contentType);
        return $response;
    }

    /**
     * Operation apiIntegrationV1DocumentUpdatePutWithHttpInfo
     *
     * (This method is obsolete and has been replaced with /api/integration/v2/document/update)  Update the specified document
     *
     * @param  \SmartCat\Model\ModelWithFilesUploadDocumentPropertiesModel $modelWithFilesUploadDocumentPropertiesModel Document with a file update model (required)
     * @param  string $documentId Document ID (required)
     * @param  string $disassembleAlgorithmName Optional algorithm for file disassembly (optional)
     * @param  string $presetDisassembleAlgorithm Optional preset for the file disassembly algorithm (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1DocumentUpdatePut'] to see the possible values for this operation
     *
     * @throws \SmartCat\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SmartCat\Model\DocumentModel[], HTTP status code, HTTP response headers (array of strings)
     */
    public function apiIntegrationV1DocumentUpdatePutWithHttpInfo($modelWithFilesUploadDocumentPropertiesModel, $documentId, $disassembleAlgorithmName = null, $presetDisassembleAlgorithm = null, string $contentType = self::contentTypes['apiIntegrationV1DocumentUpdatePut'][0])
    {
        $request = $this->apiIntegrationV1DocumentUpdatePutRequest($modelWithFilesUploadDocumentPropertiesModel, $documentId, $disassembleAlgorithmName, $presetDisassembleAlgorithm, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\SmartCat\Model\DocumentModel[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SmartCat\Model\DocumentModel[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SmartCat\Model\DocumentModel[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\SmartCat\Model\DocumentModel[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SmartCat\Model\DocumentModel[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiIntegrationV1DocumentUpdatePutAsync
     *
     * (This method is obsolete and has been replaced with /api/integration/v2/document/update)  Update the specified document
     *
     * @param  \SmartCat\Model\ModelWithFilesUploadDocumentPropertiesModel $modelWithFilesUploadDocumentPropertiesModel Document with a file update model (required)
     * @param  string $documentId Document ID (required)
     * @param  string $disassembleAlgorithmName Optional algorithm for file disassembly (optional)
     * @param  string $presetDisassembleAlgorithm Optional preset for the file disassembly algorithm (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1DocumentUpdatePut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiIntegrationV1DocumentUpdatePutAsync($modelWithFilesUploadDocumentPropertiesModel, $documentId, $disassembleAlgorithmName = null, $presetDisassembleAlgorithm = null, string $contentType = self::contentTypes['apiIntegrationV1DocumentUpdatePut'][0])
    {
        return $this->apiIntegrationV1DocumentUpdatePutAsyncWithHttpInfo($modelWithFilesUploadDocumentPropertiesModel, $documentId, $disassembleAlgorithmName, $presetDisassembleAlgorithm, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiIntegrationV1DocumentUpdatePutAsyncWithHttpInfo
     *
     * (This method is obsolete and has been replaced with /api/integration/v2/document/update)  Update the specified document
     *
     * @param  \SmartCat\Model\ModelWithFilesUploadDocumentPropertiesModel $modelWithFilesUploadDocumentPropertiesModel Document with a file update model (required)
     * @param  string $documentId Document ID (required)
     * @param  string $disassembleAlgorithmName Optional algorithm for file disassembly (optional)
     * @param  string $presetDisassembleAlgorithm Optional preset for the file disassembly algorithm (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1DocumentUpdatePut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiIntegrationV1DocumentUpdatePutAsyncWithHttpInfo($modelWithFilesUploadDocumentPropertiesModel, $documentId, $disassembleAlgorithmName = null, $presetDisassembleAlgorithm = null, string $contentType = self::contentTypes['apiIntegrationV1DocumentUpdatePut'][0])
    {
        $returnType = '\SmartCat\Model\DocumentModel[]';
        $request = $this->apiIntegrationV1DocumentUpdatePutRequest($modelWithFilesUploadDocumentPropertiesModel, $documentId, $disassembleAlgorithmName, $presetDisassembleAlgorithm, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiIntegrationV1DocumentUpdatePut'
     *
     * @param  \SmartCat\Model\ModelWithFilesUploadDocumentPropertiesModel $modelWithFilesUploadDocumentPropertiesModel Document with a file update model (required)
     * @param  string $documentId Document ID (required)
     * @param  string $disassembleAlgorithmName Optional algorithm for file disassembly (optional)
     * @param  string $presetDisassembleAlgorithm Optional preset for the file disassembly algorithm (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1DocumentUpdatePut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiIntegrationV1DocumentUpdatePutRequest($modelWithFilesUploadDocumentPropertiesModel, $documentId, $disassembleAlgorithmName = null, $presetDisassembleAlgorithm = null, string $contentType = self::contentTypes['apiIntegrationV1DocumentUpdatePut'][0])
    {

        // verify the required parameter 'modelWithFilesUploadDocumentPropertiesModel' is set
        if ($modelWithFilesUploadDocumentPropertiesModel === null || (is_array($modelWithFilesUploadDocumentPropertiesModel) && count($modelWithFilesUploadDocumentPropertiesModel) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $modelWithFilesUploadDocumentPropertiesModel when calling apiIntegrationV1DocumentUpdatePut'
            );
        }

        // verify the required parameter 'documentId' is set
        if ($documentId === null || (is_array($documentId) && count($documentId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $documentId when calling apiIntegrationV1DocumentUpdatePut'
            );
        }




        $resourcePath = '/api/integration/v1/document/update';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $documentId,
            'documentId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $disassembleAlgorithmName,
            'disassembleAlgorithmName', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $presetDisassembleAlgorithm,
            'presetDisassembleAlgorithm', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($modelWithFilesUploadDocumentPropertiesModel)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($modelWithFilesUploadDocumentPropertiesModel));
            } else {
                $httpBody = $modelWithFilesUploadDocumentPropertiesModel;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiIntegrationV2DocumentUpdatePut
     *
     * Update the specified document
     *
     * @param  \SmartCat\Model\ModelWithFilesUploadDocumentPropertiesModel $modelWithFilesUploadDocumentPropertiesModel Document with a file update model (required)
     * @param  string $documentId Document ID (required)
     * @param  string $disassembleAlgorithmName Optional algorithm for file disassembly (optional)
     * @param  string $presetDisassembleAlgorithm Optional preset for the file disassembly algorithm (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV2DocumentUpdatePut'] to see the possible values for this operation
     *
     * @throws \SmartCat\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SmartCat\Model\DocumentModel[]
     */
    public function apiIntegrationV2DocumentUpdatePut($modelWithFilesUploadDocumentPropertiesModel, $documentId, $disassembleAlgorithmName = null, $presetDisassembleAlgorithm = null, string $contentType = self::contentTypes['apiIntegrationV2DocumentUpdatePut'][0])
    {
        list($response) = $this->apiIntegrationV2DocumentUpdatePutWithHttpInfo($modelWithFilesUploadDocumentPropertiesModel, $documentId, $disassembleAlgorithmName, $presetDisassembleAlgorithm, $contentType);
        return $response;
    }

    /**
     * Operation apiIntegrationV2DocumentUpdatePutWithHttpInfo
     *
     * Update the specified document
     *
     * @param  \SmartCat\Model\ModelWithFilesUploadDocumentPropertiesModel $modelWithFilesUploadDocumentPropertiesModel Document with a file update model (required)
     * @param  string $documentId Document ID (required)
     * @param  string $disassembleAlgorithmName Optional algorithm for file disassembly (optional)
     * @param  string $presetDisassembleAlgorithm Optional preset for the file disassembly algorithm (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV2DocumentUpdatePut'] to see the possible values for this operation
     *
     * @throws \SmartCat\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SmartCat\Model\DocumentModel[], HTTP status code, HTTP response headers (array of strings)
     */
    public function apiIntegrationV2DocumentUpdatePutWithHttpInfo($modelWithFilesUploadDocumentPropertiesModel, $documentId, $disassembleAlgorithmName = null, $presetDisassembleAlgorithm = null, string $contentType = self::contentTypes['apiIntegrationV2DocumentUpdatePut'][0])
    {
        $request = $this->apiIntegrationV2DocumentUpdatePutRequest($modelWithFilesUploadDocumentPropertiesModel, $documentId, $disassembleAlgorithmName, $presetDisassembleAlgorithm, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\SmartCat\Model\DocumentModel[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SmartCat\Model\DocumentModel[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SmartCat\Model\DocumentModel[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\SmartCat\Model\DocumentModel[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SmartCat\Model\DocumentModel[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiIntegrationV2DocumentUpdatePutAsync
     *
     * Update the specified document
     *
     * @param  \SmartCat\Model\ModelWithFilesUploadDocumentPropertiesModel $modelWithFilesUploadDocumentPropertiesModel Document with a file update model (required)
     * @param  string $documentId Document ID (required)
     * @param  string $disassembleAlgorithmName Optional algorithm for file disassembly (optional)
     * @param  string $presetDisassembleAlgorithm Optional preset for the file disassembly algorithm (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV2DocumentUpdatePut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiIntegrationV2DocumentUpdatePutAsync($modelWithFilesUploadDocumentPropertiesModel, $documentId, $disassembleAlgorithmName = null, $presetDisassembleAlgorithm = null, string $contentType = self::contentTypes['apiIntegrationV2DocumentUpdatePut'][0])
    {
        return $this->apiIntegrationV2DocumentUpdatePutAsyncWithHttpInfo($modelWithFilesUploadDocumentPropertiesModel, $documentId, $disassembleAlgorithmName, $presetDisassembleAlgorithm, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiIntegrationV2DocumentUpdatePutAsyncWithHttpInfo
     *
     * Update the specified document
     *
     * @param  \SmartCat\Model\ModelWithFilesUploadDocumentPropertiesModel $modelWithFilesUploadDocumentPropertiesModel Document with a file update model (required)
     * @param  string $documentId Document ID (required)
     * @param  string $disassembleAlgorithmName Optional algorithm for file disassembly (optional)
     * @param  string $presetDisassembleAlgorithm Optional preset for the file disassembly algorithm (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV2DocumentUpdatePut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiIntegrationV2DocumentUpdatePutAsyncWithHttpInfo($modelWithFilesUploadDocumentPropertiesModel, $documentId, $disassembleAlgorithmName = null, $presetDisassembleAlgorithm = null, string $contentType = self::contentTypes['apiIntegrationV2DocumentUpdatePut'][0])
    {
        $returnType = '\SmartCat\Model\DocumentModel[]';
        $request = $this->apiIntegrationV2DocumentUpdatePutRequest($modelWithFilesUploadDocumentPropertiesModel, $documentId, $disassembleAlgorithmName, $presetDisassembleAlgorithm, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiIntegrationV2DocumentUpdatePut'
     *
     * @param  \SmartCat\Model\ModelWithFilesUploadDocumentPropertiesModel $modelWithFilesUploadDocumentPropertiesModel Document with a file update model (required)
     * @param  string $documentId Document ID (required)
     * @param  string $disassembleAlgorithmName Optional algorithm for file disassembly (optional)
     * @param  string $presetDisassembleAlgorithm Optional preset for the file disassembly algorithm (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV2DocumentUpdatePut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiIntegrationV2DocumentUpdatePutRequest($modelWithFilesUploadDocumentPropertiesModel, $documentId, $disassembleAlgorithmName = null, $presetDisassembleAlgorithm = null, string $contentType = self::contentTypes['apiIntegrationV2DocumentUpdatePut'][0])
    {

        // verify the required parameter 'modelWithFilesUploadDocumentPropertiesModel' is set
        if ($modelWithFilesUploadDocumentPropertiesModel === null || (is_array($modelWithFilesUploadDocumentPropertiesModel) && count($modelWithFilesUploadDocumentPropertiesModel) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $modelWithFilesUploadDocumentPropertiesModel when calling apiIntegrationV2DocumentUpdatePut'
            );
        }

        // verify the required parameter 'documentId' is set
        if ($documentId === null || (is_array($documentId) && count($documentId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $documentId when calling apiIntegrationV2DocumentUpdatePut'
            );
        }




        $resourcePath = '/api/integration/v2/document/update';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $documentId,
            'documentId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $disassembleAlgorithmName,
            'disassembleAlgorithmName', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $presetDisassembleAlgorithm,
            'presetDisassembleAlgorithm', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($modelWithFilesUploadDocumentPropertiesModel)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($modelWithFilesUploadDocumentPropertiesModel));
            } else {
                $httpBody = $modelWithFilesUploadDocumentPropertiesModel;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
