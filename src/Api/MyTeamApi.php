<?php
/**
 * MyTeamApi
 * PHP version 7.4
 *
 * @category Class
 * @package  SmartCat
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Smartcat API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SmartCat\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use SmartCat\ApiException;
use SmartCat\Configuration;
use SmartCat\HeaderSelector;
use SmartCat\ObjectSerializer;

/**
 * MyTeamApi Class Doc Comment
 *
 * @category Class
 * @package  SmartCat
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class MyTeamApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'apiIntegrationV1AccountMyTeamGet' => [
            'application/json',
        ],
        'apiIntegrationV1AccountMyTeamPost' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'apiIntegrationV1AccountMyTeamUserIdCommentPut' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'apiIntegrationV1AccountMyTeamUserIdDelete' => [
            'application/json',
        ],
        'apiIntegrationV1AccountMyTeamUserIdGet' => [
            'application/json',
        ],
        'apiIntegrationV1AccountMyTeamUserIdPhonePut' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'apiIntegrationV1AccountMyTeamUserIdServicesReplacePost' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'apiIntegrationV1AccountSearchMyTeamPost' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation apiIntegrationV1AccountMyTeamGet
     *
     * Fetch a MyTeam member model by external ID
     *
     * @param  string $externalId User external ID (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1AccountMyTeamGet'] to see the possible values for this operation
     *
     * @throws \SmartCat\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SmartCat\Model\MyTeamMemberModel
     */
    public function apiIntegrationV1AccountMyTeamGet($externalId = null, string $contentType = self::contentTypes['apiIntegrationV1AccountMyTeamGet'][0])
    {
        list($response) = $this->apiIntegrationV1AccountMyTeamGetWithHttpInfo($externalId, $contentType);
        return $response;
    }

    /**
     * Operation apiIntegrationV1AccountMyTeamGetWithHttpInfo
     *
     * Fetch a MyTeam member model by external ID
     *
     * @param  string $externalId User external ID (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1AccountMyTeamGet'] to see the possible values for this operation
     *
     * @throws \SmartCat\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SmartCat\Model\MyTeamMemberModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiIntegrationV1AccountMyTeamGetWithHttpInfo($externalId = null, string $contentType = self::contentTypes['apiIntegrationV1AccountMyTeamGet'][0])
    {
        $request = $this->apiIntegrationV1AccountMyTeamGetRequest($externalId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\SmartCat\Model\MyTeamMemberModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SmartCat\Model\MyTeamMemberModel' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SmartCat\Model\MyTeamMemberModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\SmartCat\Model\MyTeamMemberModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SmartCat\Model\MyTeamMemberModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiIntegrationV1AccountMyTeamGetAsync
     *
     * Fetch a MyTeam member model by external ID
     *
     * @param  string $externalId User external ID (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1AccountMyTeamGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiIntegrationV1AccountMyTeamGetAsync($externalId = null, string $contentType = self::contentTypes['apiIntegrationV1AccountMyTeamGet'][0])
    {
        return $this->apiIntegrationV1AccountMyTeamGetAsyncWithHttpInfo($externalId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiIntegrationV1AccountMyTeamGetAsyncWithHttpInfo
     *
     * Fetch a MyTeam member model by external ID
     *
     * @param  string $externalId User external ID (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1AccountMyTeamGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiIntegrationV1AccountMyTeamGetAsyncWithHttpInfo($externalId = null, string $contentType = self::contentTypes['apiIntegrationV1AccountMyTeamGet'][0])
    {
        $returnType = '\SmartCat\Model\MyTeamMemberModel';
        $request = $this->apiIntegrationV1AccountMyTeamGetRequest($externalId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiIntegrationV1AccountMyTeamGet'
     *
     * @param  string $externalId User external ID (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1AccountMyTeamGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiIntegrationV1AccountMyTeamGetRequest($externalId = null, string $contentType = self::contentTypes['apiIntegrationV1AccountMyTeamGet'][0])
    {



        $resourcePath = '/api/integration/v1/account/myTeam';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $externalId,
            'externalId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiIntegrationV1AccountMyTeamPost
     *
     * Add an in-house translator to MyTeam as a linguist
     *
     * @param  \SmartCat\Model\InhouseTranslatorCreationModel $inhouseTranslatorCreationModel Model of adding an in-house translator as a linguist (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1AccountMyTeamPost'] to see the possible values for this operation
     *
     * @throws \SmartCat\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SmartCat\Model\MyTeamMemberModel
     */
    public function apiIntegrationV1AccountMyTeamPost($inhouseTranslatorCreationModel = null, string $contentType = self::contentTypes['apiIntegrationV1AccountMyTeamPost'][0])
    {
        list($response) = $this->apiIntegrationV1AccountMyTeamPostWithHttpInfo($inhouseTranslatorCreationModel, $contentType);
        return $response;
    }

    /**
     * Operation apiIntegrationV1AccountMyTeamPostWithHttpInfo
     *
     * Add an in-house translator to MyTeam as a linguist
     *
     * @param  \SmartCat\Model\InhouseTranslatorCreationModel $inhouseTranslatorCreationModel Model of adding an in-house translator as a linguist (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1AccountMyTeamPost'] to see the possible values for this operation
     *
     * @throws \SmartCat\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SmartCat\Model\MyTeamMemberModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiIntegrationV1AccountMyTeamPostWithHttpInfo($inhouseTranslatorCreationModel = null, string $contentType = self::contentTypes['apiIntegrationV1AccountMyTeamPost'][0])
    {
        $request = $this->apiIntegrationV1AccountMyTeamPostRequest($inhouseTranslatorCreationModel, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\SmartCat\Model\MyTeamMemberModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SmartCat\Model\MyTeamMemberModel' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SmartCat\Model\MyTeamMemberModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\SmartCat\Model\MyTeamMemberModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SmartCat\Model\MyTeamMemberModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiIntegrationV1AccountMyTeamPostAsync
     *
     * Add an in-house translator to MyTeam as a linguist
     *
     * @param  \SmartCat\Model\InhouseTranslatorCreationModel $inhouseTranslatorCreationModel Model of adding an in-house translator as a linguist (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1AccountMyTeamPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiIntegrationV1AccountMyTeamPostAsync($inhouseTranslatorCreationModel = null, string $contentType = self::contentTypes['apiIntegrationV1AccountMyTeamPost'][0])
    {
        return $this->apiIntegrationV1AccountMyTeamPostAsyncWithHttpInfo($inhouseTranslatorCreationModel, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiIntegrationV1AccountMyTeamPostAsyncWithHttpInfo
     *
     * Add an in-house translator to MyTeam as a linguist
     *
     * @param  \SmartCat\Model\InhouseTranslatorCreationModel $inhouseTranslatorCreationModel Model of adding an in-house translator as a linguist (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1AccountMyTeamPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiIntegrationV1AccountMyTeamPostAsyncWithHttpInfo($inhouseTranslatorCreationModel = null, string $contentType = self::contentTypes['apiIntegrationV1AccountMyTeamPost'][0])
    {
        $returnType = '\SmartCat\Model\MyTeamMemberModel';
        $request = $this->apiIntegrationV1AccountMyTeamPostRequest($inhouseTranslatorCreationModel, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiIntegrationV1AccountMyTeamPost'
     *
     * @param  \SmartCat\Model\InhouseTranslatorCreationModel $inhouseTranslatorCreationModel Model of adding an in-house translator as a linguist (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1AccountMyTeamPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiIntegrationV1AccountMyTeamPostRequest($inhouseTranslatorCreationModel = null, string $contentType = self::contentTypes['apiIntegrationV1AccountMyTeamPost'][0])
    {



        $resourcePath = '/api/integration/v1/account/myTeam';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($inhouseTranslatorCreationModel)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($inhouseTranslatorCreationModel));
            } else {
                $httpBody = $inhouseTranslatorCreationModel;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiIntegrationV1AccountMyTeamUserIdCommentPut
     *
     * Add a comment to a MyTeam member profile
     *
     * @param  string $userId User ID (required)
     * @param  string $body Commentary (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1AccountMyTeamUserIdCommentPut'] to see the possible values for this operation
     *
     * @throws \SmartCat\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiIntegrationV1AccountMyTeamUserIdCommentPut($userId, $body = null, string $contentType = self::contentTypes['apiIntegrationV1AccountMyTeamUserIdCommentPut'][0])
    {
        $this->apiIntegrationV1AccountMyTeamUserIdCommentPutWithHttpInfo($userId, $body, $contentType);
    }

    /**
     * Operation apiIntegrationV1AccountMyTeamUserIdCommentPutWithHttpInfo
     *
     * Add a comment to a MyTeam member profile
     *
     * @param  string $userId User ID (required)
     * @param  string $body Commentary (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1AccountMyTeamUserIdCommentPut'] to see the possible values for this operation
     *
     * @throws \SmartCat\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiIntegrationV1AccountMyTeamUserIdCommentPutWithHttpInfo($userId, $body = null, string $contentType = self::contentTypes['apiIntegrationV1AccountMyTeamUserIdCommentPut'][0])
    {
        $request = $this->apiIntegrationV1AccountMyTeamUserIdCommentPutRequest($userId, $body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiIntegrationV1AccountMyTeamUserIdCommentPutAsync
     *
     * Add a comment to a MyTeam member profile
     *
     * @param  string $userId User ID (required)
     * @param  string $body Commentary (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1AccountMyTeamUserIdCommentPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiIntegrationV1AccountMyTeamUserIdCommentPutAsync($userId, $body = null, string $contentType = self::contentTypes['apiIntegrationV1AccountMyTeamUserIdCommentPut'][0])
    {
        return $this->apiIntegrationV1AccountMyTeamUserIdCommentPutAsyncWithHttpInfo($userId, $body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiIntegrationV1AccountMyTeamUserIdCommentPutAsyncWithHttpInfo
     *
     * Add a comment to a MyTeam member profile
     *
     * @param  string $userId User ID (required)
     * @param  string $body Commentary (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1AccountMyTeamUserIdCommentPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiIntegrationV1AccountMyTeamUserIdCommentPutAsyncWithHttpInfo($userId, $body = null, string $contentType = self::contentTypes['apiIntegrationV1AccountMyTeamUserIdCommentPut'][0])
    {
        $returnType = '';
        $request = $this->apiIntegrationV1AccountMyTeamUserIdCommentPutRequest($userId, $body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiIntegrationV1AccountMyTeamUserIdCommentPut'
     *
     * @param  string $userId User ID (required)
     * @param  string $body Commentary (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1AccountMyTeamUserIdCommentPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiIntegrationV1AccountMyTeamUserIdCommentPutRequest($userId, $body = null, string $contentType = self::contentTypes['apiIntegrationV1AccountMyTeamUserIdCommentPut'][0])
    {

        // verify the required parameter 'userId' is set
        if ($userId === null || (is_array($userId) && count($userId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $userId when calling apiIntegrationV1AccountMyTeamUserIdCommentPut'
            );
        }



        $resourcePath = '/api/integration/v1/account/myTeam/{userId}/comment';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($userId !== null) {
            $resourcePath = str_replace(
                '{' . 'userId' . '}',
                ObjectSerializer::toPathValue($userId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiIntegrationV1AccountMyTeamUserIdDelete
     *
     * Delete the user from MyTeam
     *
     * @param  string $userId User ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1AccountMyTeamUserIdDelete'] to see the possible values for this operation
     *
     * @throws \SmartCat\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiIntegrationV1AccountMyTeamUserIdDelete($userId, string $contentType = self::contentTypes['apiIntegrationV1AccountMyTeamUserIdDelete'][0])
    {
        $this->apiIntegrationV1AccountMyTeamUserIdDeleteWithHttpInfo($userId, $contentType);
    }

    /**
     * Operation apiIntegrationV1AccountMyTeamUserIdDeleteWithHttpInfo
     *
     * Delete the user from MyTeam
     *
     * @param  string $userId User ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1AccountMyTeamUserIdDelete'] to see the possible values for this operation
     *
     * @throws \SmartCat\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiIntegrationV1AccountMyTeamUserIdDeleteWithHttpInfo($userId, string $contentType = self::contentTypes['apiIntegrationV1AccountMyTeamUserIdDelete'][0])
    {
        $request = $this->apiIntegrationV1AccountMyTeamUserIdDeleteRequest($userId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiIntegrationV1AccountMyTeamUserIdDeleteAsync
     *
     * Delete the user from MyTeam
     *
     * @param  string $userId User ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1AccountMyTeamUserIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiIntegrationV1AccountMyTeamUserIdDeleteAsync($userId, string $contentType = self::contentTypes['apiIntegrationV1AccountMyTeamUserIdDelete'][0])
    {
        return $this->apiIntegrationV1AccountMyTeamUserIdDeleteAsyncWithHttpInfo($userId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiIntegrationV1AccountMyTeamUserIdDeleteAsyncWithHttpInfo
     *
     * Delete the user from MyTeam
     *
     * @param  string $userId User ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1AccountMyTeamUserIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiIntegrationV1AccountMyTeamUserIdDeleteAsyncWithHttpInfo($userId, string $contentType = self::contentTypes['apiIntegrationV1AccountMyTeamUserIdDelete'][0])
    {
        $returnType = '';
        $request = $this->apiIntegrationV1AccountMyTeamUserIdDeleteRequest($userId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiIntegrationV1AccountMyTeamUserIdDelete'
     *
     * @param  string $userId User ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1AccountMyTeamUserIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiIntegrationV1AccountMyTeamUserIdDeleteRequest($userId, string $contentType = self::contentTypes['apiIntegrationV1AccountMyTeamUserIdDelete'][0])
    {

        // verify the required parameter 'userId' is set
        if ($userId === null || (is_array($userId) && count($userId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $userId when calling apiIntegrationV1AccountMyTeamUserIdDelete'
            );
        }


        $resourcePath = '/api/integration/v1/account/myTeam/{userId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($userId !== null) {
            $resourcePath = str_replace(
                '{' . 'userId' . '}',
                ObjectSerializer::toPathValue($userId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiIntegrationV1AccountMyTeamUserIdGet
     *
     * Fetch a MyTeam member model by ID
     *
     * @param  string $userId User ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1AccountMyTeamUserIdGet'] to see the possible values for this operation
     *
     * @throws \SmartCat\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SmartCat\Model\MyTeamMemberModel
     */
    public function apiIntegrationV1AccountMyTeamUserIdGet($userId, string $contentType = self::contentTypes['apiIntegrationV1AccountMyTeamUserIdGet'][0])
    {
        list($response) = $this->apiIntegrationV1AccountMyTeamUserIdGetWithHttpInfo($userId, $contentType);
        return $response;
    }

    /**
     * Operation apiIntegrationV1AccountMyTeamUserIdGetWithHttpInfo
     *
     * Fetch a MyTeam member model by ID
     *
     * @param  string $userId User ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1AccountMyTeamUserIdGet'] to see the possible values for this operation
     *
     * @throws \SmartCat\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SmartCat\Model\MyTeamMemberModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiIntegrationV1AccountMyTeamUserIdGetWithHttpInfo($userId, string $contentType = self::contentTypes['apiIntegrationV1AccountMyTeamUserIdGet'][0])
    {
        $request = $this->apiIntegrationV1AccountMyTeamUserIdGetRequest($userId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\SmartCat\Model\MyTeamMemberModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SmartCat\Model\MyTeamMemberModel' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SmartCat\Model\MyTeamMemberModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\SmartCat\Model\MyTeamMemberModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SmartCat\Model\MyTeamMemberModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiIntegrationV1AccountMyTeamUserIdGetAsync
     *
     * Fetch a MyTeam member model by ID
     *
     * @param  string $userId User ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1AccountMyTeamUserIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiIntegrationV1AccountMyTeamUserIdGetAsync($userId, string $contentType = self::contentTypes['apiIntegrationV1AccountMyTeamUserIdGet'][0])
    {
        return $this->apiIntegrationV1AccountMyTeamUserIdGetAsyncWithHttpInfo($userId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiIntegrationV1AccountMyTeamUserIdGetAsyncWithHttpInfo
     *
     * Fetch a MyTeam member model by ID
     *
     * @param  string $userId User ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1AccountMyTeamUserIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiIntegrationV1AccountMyTeamUserIdGetAsyncWithHttpInfo($userId, string $contentType = self::contentTypes['apiIntegrationV1AccountMyTeamUserIdGet'][0])
    {
        $returnType = '\SmartCat\Model\MyTeamMemberModel';
        $request = $this->apiIntegrationV1AccountMyTeamUserIdGetRequest($userId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiIntegrationV1AccountMyTeamUserIdGet'
     *
     * @param  string $userId User ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1AccountMyTeamUserIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiIntegrationV1AccountMyTeamUserIdGetRequest($userId, string $contentType = self::contentTypes['apiIntegrationV1AccountMyTeamUserIdGet'][0])
    {

        // verify the required parameter 'userId' is set
        if ($userId === null || (is_array($userId) && count($userId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $userId when calling apiIntegrationV1AccountMyTeamUserIdGet'
            );
        }


        $resourcePath = '/api/integration/v1/account/myTeam/{userId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($userId !== null) {
            $resourcePath = str_replace(
                '{' . 'userId' . '}',
                ObjectSerializer::toPathValue($userId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiIntegrationV1AccountMyTeamUserIdPhonePut
     *
     * Add a MyTeam member&#39;s phone number
     *
     * @param  string $userId User ID (required)
     * @param  string $body Phone number (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1AccountMyTeamUserIdPhonePut'] to see the possible values for this operation
     *
     * @throws \SmartCat\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiIntegrationV1AccountMyTeamUserIdPhonePut($userId, $body = null, string $contentType = self::contentTypes['apiIntegrationV1AccountMyTeamUserIdPhonePut'][0])
    {
        $this->apiIntegrationV1AccountMyTeamUserIdPhonePutWithHttpInfo($userId, $body, $contentType);
    }

    /**
     * Operation apiIntegrationV1AccountMyTeamUserIdPhonePutWithHttpInfo
     *
     * Add a MyTeam member&#39;s phone number
     *
     * @param  string $userId User ID (required)
     * @param  string $body Phone number (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1AccountMyTeamUserIdPhonePut'] to see the possible values for this operation
     *
     * @throws \SmartCat\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiIntegrationV1AccountMyTeamUserIdPhonePutWithHttpInfo($userId, $body = null, string $contentType = self::contentTypes['apiIntegrationV1AccountMyTeamUserIdPhonePut'][0])
    {
        $request = $this->apiIntegrationV1AccountMyTeamUserIdPhonePutRequest($userId, $body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiIntegrationV1AccountMyTeamUserIdPhonePutAsync
     *
     * Add a MyTeam member&#39;s phone number
     *
     * @param  string $userId User ID (required)
     * @param  string $body Phone number (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1AccountMyTeamUserIdPhonePut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiIntegrationV1AccountMyTeamUserIdPhonePutAsync($userId, $body = null, string $contentType = self::contentTypes['apiIntegrationV1AccountMyTeamUserIdPhonePut'][0])
    {
        return $this->apiIntegrationV1AccountMyTeamUserIdPhonePutAsyncWithHttpInfo($userId, $body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiIntegrationV1AccountMyTeamUserIdPhonePutAsyncWithHttpInfo
     *
     * Add a MyTeam member&#39;s phone number
     *
     * @param  string $userId User ID (required)
     * @param  string $body Phone number (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1AccountMyTeamUserIdPhonePut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiIntegrationV1AccountMyTeamUserIdPhonePutAsyncWithHttpInfo($userId, $body = null, string $contentType = self::contentTypes['apiIntegrationV1AccountMyTeamUserIdPhonePut'][0])
    {
        $returnType = '';
        $request = $this->apiIntegrationV1AccountMyTeamUserIdPhonePutRequest($userId, $body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiIntegrationV1AccountMyTeamUserIdPhonePut'
     *
     * @param  string $userId User ID (required)
     * @param  string $body Phone number (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1AccountMyTeamUserIdPhonePut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiIntegrationV1AccountMyTeamUserIdPhonePutRequest($userId, $body = null, string $contentType = self::contentTypes['apiIntegrationV1AccountMyTeamUserIdPhonePut'][0])
    {

        // verify the required parameter 'userId' is set
        if ($userId === null || (is_array($userId) && count($userId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $userId when calling apiIntegrationV1AccountMyTeamUserIdPhonePut'
            );
        }



        $resourcePath = '/api/integration/v1/account/myTeam/{userId}/phone';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($userId !== null) {
            $resourcePath = str_replace(
                '{' . 'userId' . '}',
                ObjectSerializer::toPathValue($userId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiIntegrationV1AccountMyTeamUserIdServicesReplacePost
     *
     * Replace all services in a MyTeam profile
     *
     * @param  string $userId User ID (required)
     * @param  \SmartCat\Model\ReplaceServicesModel $replaceServicesModel All service replacement model (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1AccountMyTeamUserIdServicesReplacePost'] to see the possible values for this operation
     *
     * @throws \SmartCat\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiIntegrationV1AccountMyTeamUserIdServicesReplacePost($userId, $replaceServicesModel = null, string $contentType = self::contentTypes['apiIntegrationV1AccountMyTeamUserIdServicesReplacePost'][0])
    {
        $this->apiIntegrationV1AccountMyTeamUserIdServicesReplacePostWithHttpInfo($userId, $replaceServicesModel, $contentType);
    }

    /**
     * Operation apiIntegrationV1AccountMyTeamUserIdServicesReplacePostWithHttpInfo
     *
     * Replace all services in a MyTeam profile
     *
     * @param  string $userId User ID (required)
     * @param  \SmartCat\Model\ReplaceServicesModel $replaceServicesModel All service replacement model (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1AccountMyTeamUserIdServicesReplacePost'] to see the possible values for this operation
     *
     * @throws \SmartCat\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiIntegrationV1AccountMyTeamUserIdServicesReplacePostWithHttpInfo($userId, $replaceServicesModel = null, string $contentType = self::contentTypes['apiIntegrationV1AccountMyTeamUserIdServicesReplacePost'][0])
    {
        $request = $this->apiIntegrationV1AccountMyTeamUserIdServicesReplacePostRequest($userId, $replaceServicesModel, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiIntegrationV1AccountMyTeamUserIdServicesReplacePostAsync
     *
     * Replace all services in a MyTeam profile
     *
     * @param  string $userId User ID (required)
     * @param  \SmartCat\Model\ReplaceServicesModel $replaceServicesModel All service replacement model (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1AccountMyTeamUserIdServicesReplacePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiIntegrationV1AccountMyTeamUserIdServicesReplacePostAsync($userId, $replaceServicesModel = null, string $contentType = self::contentTypes['apiIntegrationV1AccountMyTeamUserIdServicesReplacePost'][0])
    {
        return $this->apiIntegrationV1AccountMyTeamUserIdServicesReplacePostAsyncWithHttpInfo($userId, $replaceServicesModel, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiIntegrationV1AccountMyTeamUserIdServicesReplacePostAsyncWithHttpInfo
     *
     * Replace all services in a MyTeam profile
     *
     * @param  string $userId User ID (required)
     * @param  \SmartCat\Model\ReplaceServicesModel $replaceServicesModel All service replacement model (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1AccountMyTeamUserIdServicesReplacePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiIntegrationV1AccountMyTeamUserIdServicesReplacePostAsyncWithHttpInfo($userId, $replaceServicesModel = null, string $contentType = self::contentTypes['apiIntegrationV1AccountMyTeamUserIdServicesReplacePost'][0])
    {
        $returnType = '';
        $request = $this->apiIntegrationV1AccountMyTeamUserIdServicesReplacePostRequest($userId, $replaceServicesModel, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiIntegrationV1AccountMyTeamUserIdServicesReplacePost'
     *
     * @param  string $userId User ID (required)
     * @param  \SmartCat\Model\ReplaceServicesModel $replaceServicesModel All service replacement model (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1AccountMyTeamUserIdServicesReplacePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiIntegrationV1AccountMyTeamUserIdServicesReplacePostRequest($userId, $replaceServicesModel = null, string $contentType = self::contentTypes['apiIntegrationV1AccountMyTeamUserIdServicesReplacePost'][0])
    {

        // verify the required parameter 'userId' is set
        if ($userId === null || (is_array($userId) && count($userId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $userId when calling apiIntegrationV1AccountMyTeamUserIdServicesReplacePost'
            );
        }



        $resourcePath = '/api/integration/v1/account/myTeam/{userId}/services/replace';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($userId !== null) {
            $resourcePath = str_replace(
                '{' . 'userId' . '}',
                ObjectSerializer::toPathValue($userId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($replaceServicesModel)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($replaceServicesModel));
            } else {
                $httpBody = $replaceServicesModel;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiIntegrationV1AccountSearchMyTeamPost
     *
     * Search for linguists in MyTeam
     *
     * @param  \SmartCat\Model\MyTeamSearchRequestModel $myTeamSearchRequestModel Linguist search model (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1AccountSearchMyTeamPost'] to see the possible values for this operation
     *
     * @throws \SmartCat\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SmartCat\Model\MyTeamMemberModel[]
     */
    public function apiIntegrationV1AccountSearchMyTeamPost($myTeamSearchRequestModel = null, string $contentType = self::contentTypes['apiIntegrationV1AccountSearchMyTeamPost'][0])
    {
        list($response) = $this->apiIntegrationV1AccountSearchMyTeamPostWithHttpInfo($myTeamSearchRequestModel, $contentType);
        return $response;
    }

    /**
     * Operation apiIntegrationV1AccountSearchMyTeamPostWithHttpInfo
     *
     * Search for linguists in MyTeam
     *
     * @param  \SmartCat\Model\MyTeamSearchRequestModel $myTeamSearchRequestModel Linguist search model (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1AccountSearchMyTeamPost'] to see the possible values for this operation
     *
     * @throws \SmartCat\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SmartCat\Model\MyTeamMemberModel[], HTTP status code, HTTP response headers (array of strings)
     */
    public function apiIntegrationV1AccountSearchMyTeamPostWithHttpInfo($myTeamSearchRequestModel = null, string $contentType = self::contentTypes['apiIntegrationV1AccountSearchMyTeamPost'][0])
    {
        $request = $this->apiIntegrationV1AccountSearchMyTeamPostRequest($myTeamSearchRequestModel, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\SmartCat\Model\MyTeamMemberModel[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SmartCat\Model\MyTeamMemberModel[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SmartCat\Model\MyTeamMemberModel[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\SmartCat\Model\MyTeamMemberModel[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SmartCat\Model\MyTeamMemberModel[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiIntegrationV1AccountSearchMyTeamPostAsync
     *
     * Search for linguists in MyTeam
     *
     * @param  \SmartCat\Model\MyTeamSearchRequestModel $myTeamSearchRequestModel Linguist search model (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1AccountSearchMyTeamPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiIntegrationV1AccountSearchMyTeamPostAsync($myTeamSearchRequestModel = null, string $contentType = self::contentTypes['apiIntegrationV1AccountSearchMyTeamPost'][0])
    {
        return $this->apiIntegrationV1AccountSearchMyTeamPostAsyncWithHttpInfo($myTeamSearchRequestModel, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiIntegrationV1AccountSearchMyTeamPostAsyncWithHttpInfo
     *
     * Search for linguists in MyTeam
     *
     * @param  \SmartCat\Model\MyTeamSearchRequestModel $myTeamSearchRequestModel Linguist search model (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1AccountSearchMyTeamPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiIntegrationV1AccountSearchMyTeamPostAsyncWithHttpInfo($myTeamSearchRequestModel = null, string $contentType = self::contentTypes['apiIntegrationV1AccountSearchMyTeamPost'][0])
    {
        $returnType = '\SmartCat\Model\MyTeamMemberModel[]';
        $request = $this->apiIntegrationV1AccountSearchMyTeamPostRequest($myTeamSearchRequestModel, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiIntegrationV1AccountSearchMyTeamPost'
     *
     * @param  \SmartCat\Model\MyTeamSearchRequestModel $myTeamSearchRequestModel Linguist search model (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiIntegrationV1AccountSearchMyTeamPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiIntegrationV1AccountSearchMyTeamPostRequest($myTeamSearchRequestModel = null, string $contentType = self::contentTypes['apiIntegrationV1AccountSearchMyTeamPost'][0])
    {



        $resourcePath = '/api/integration/v1/account/searchMyTeam';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($myTeamSearchRequestModel)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($myTeamSearchRequestModel));
            } else {
                $httpBody = $myTeamSearchRequestModel;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
