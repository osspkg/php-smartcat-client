<?php
/**
 * DocumentModel
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  SmartCat
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Smartcat API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SmartCat\Model;

use \ArrayAccess;
use \SmartCat\ObjectSerializer;

/**
 * DocumentModel Class Doc Comment
 *
 * @category Class
 * @description Document model
 * @package  SmartCat
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class DocumentModel implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'DocumentModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'name' => 'string',
        'fullPath' => 'string',
        'filename' => 'string',
        'creationDate' => '\DateTime',
        'deadline' => '\DateTime',
        'sourceLanguage' => 'string',
        'documentDisassemblingStatus' => '\SmartCat\Model\DocumentDisassemblingStatus',
        'targetLanguage' => 'string',
        'status' => '\SmartCat\Model\DocumentStatus',
        'wordsCount' => 'int',
        'statusModificationDate' => '\DateTime',
        'pretranslateCompleted' => 'bool',
        'workflowStages' => '\SmartCat\Model\DocumentWorkflowStageModel[]',
        'externalId' => 'string',
        'projectId' => 'string',
        'metaInfo' => 'string',
        'placeholdersAreEnabled' => 'bool',
        'revisionLabel' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'name' => null,
        'fullPath' => null,
        'filename' => null,
        'creationDate' => 'date-time',
        'deadline' => 'date-time',
        'sourceLanguage' => null,
        'documentDisassemblingStatus' => null,
        'targetLanguage' => null,
        'status' => null,
        'wordsCount' => 'int32',
        'statusModificationDate' => 'date-time',
        'pretranslateCompleted' => null,
        'workflowStages' => null,
        'externalId' => null,
        'projectId' => 'uuid',
        'metaInfo' => null,
        'placeholdersAreEnabled' => null,
        'revisionLabel' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => true,
		'name' => true,
		'fullPath' => true,
		'filename' => true,
		'creationDate' => false,
		'deadline' => true,
		'sourceLanguage' => true,
		'documentDisassemblingStatus' => false,
		'targetLanguage' => true,
		'status' => false,
		'wordsCount' => false,
		'statusModificationDate' => true,
		'pretranslateCompleted' => false,
		'workflowStages' => true,
		'externalId' => true,
		'projectId' => false,
		'metaInfo' => true,
		'placeholdersAreEnabled' => false,
		'revisionLabel' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'fullPath' => 'fullPath',
        'filename' => 'filename',
        'creationDate' => 'creationDate',
        'deadline' => 'deadline',
        'sourceLanguage' => 'sourceLanguage',
        'documentDisassemblingStatus' => 'documentDisassemblingStatus',
        'targetLanguage' => 'targetLanguage',
        'status' => 'status',
        'wordsCount' => 'wordsCount',
        'statusModificationDate' => 'statusModificationDate',
        'pretranslateCompleted' => 'pretranslateCompleted',
        'workflowStages' => 'workflowStages',
        'externalId' => 'externalId',
        'projectId' => 'projectId',
        'metaInfo' => 'metaInfo',
        'placeholdersAreEnabled' => 'placeholdersAreEnabled',
        'revisionLabel' => 'revisionLabel'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'fullPath' => 'setFullPath',
        'filename' => 'setFilename',
        'creationDate' => 'setCreationDate',
        'deadline' => 'setDeadline',
        'sourceLanguage' => 'setSourceLanguage',
        'documentDisassemblingStatus' => 'setDocumentDisassemblingStatus',
        'targetLanguage' => 'setTargetLanguage',
        'status' => 'setStatus',
        'wordsCount' => 'setWordsCount',
        'statusModificationDate' => 'setStatusModificationDate',
        'pretranslateCompleted' => 'setPretranslateCompleted',
        'workflowStages' => 'setWorkflowStages',
        'externalId' => 'setExternalId',
        'projectId' => 'setProjectId',
        'metaInfo' => 'setMetaInfo',
        'placeholdersAreEnabled' => 'setPlaceholdersAreEnabled',
        'revisionLabel' => 'setRevisionLabel'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'fullPath' => 'getFullPath',
        'filename' => 'getFilename',
        'creationDate' => 'getCreationDate',
        'deadline' => 'getDeadline',
        'sourceLanguage' => 'getSourceLanguage',
        'documentDisassemblingStatus' => 'getDocumentDisassemblingStatus',
        'targetLanguage' => 'getTargetLanguage',
        'status' => 'getStatus',
        'wordsCount' => 'getWordsCount',
        'statusModificationDate' => 'getStatusModificationDate',
        'pretranslateCompleted' => 'getPretranslateCompleted',
        'workflowStages' => 'getWorkflowStages',
        'externalId' => 'getExternalId',
        'projectId' => 'getProjectId',
        'metaInfo' => 'getMetaInfo',
        'placeholdersAreEnabled' => 'getPlaceholdersAreEnabled',
        'revisionLabel' => 'getRevisionLabel'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('fullPath', $data ?? [], null);
        $this->setIfExists('filename', $data ?? [], null);
        $this->setIfExists('creationDate', $data ?? [], null);
        $this->setIfExists('deadline', $data ?? [], null);
        $this->setIfExists('sourceLanguage', $data ?? [], null);
        $this->setIfExists('documentDisassemblingStatus', $data ?? [], null);
        $this->setIfExists('targetLanguage', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('wordsCount', $data ?? [], null);
        $this->setIfExists('statusModificationDate', $data ?? [], null);
        $this->setIfExists('pretranslateCompleted', $data ?? [], null);
        $this->setIfExists('workflowStages', $data ?? [], null);
        $this->setIfExists('externalId', $data ?? [], null);
        $this->setIfExists('projectId', $data ?? [], null);
        $this->setIfExists('metaInfo', $data ?? [], null);
        $this->setIfExists('placeholdersAreEnabled', $data ?? [], null);
        $this->setIfExists('revisionLabel', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id Document ID
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            array_push($this->openAPINullablesSetToNull, 'id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Document name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            array_push($this->openAPINullablesSetToNull, 'name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets fullPath
     *
     * @return string|null
     */
    public function getFullPath()
    {
        return $this->container['fullPath'];
    }

    /**
     * Sets fullPath
     *
     * @param string|null $fullPath Full path to the document in the project
     *
     * @return self
     */
    public function setFullPath($fullPath)
    {
        if (is_null($fullPath)) {
            array_push($this->openAPINullablesSetToNull, 'fullPath');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('fullPath', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['fullPath'] = $fullPath;

        return $this;
    }

    /**
     * Gets filename
     *
     * @return string|null
     */
    public function getFilename()
    {
        return $this->container['filename'];
    }

    /**
     * Sets filename
     *
     * @param string|null $filename Source file name, including the extension
     *
     * @return self
     */
    public function setFilename($filename)
    {
        if (is_null($filename)) {
            array_push($this->openAPINullablesSetToNull, 'filename');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('filename', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['filename'] = $filename;

        return $this;
    }

    /**
     * Gets creationDate
     *
     * @return \DateTime|null
     */
    public function getCreationDate()
    {
        return $this->container['creationDate'];
    }

    /**
     * Sets creationDate
     *
     * @param \DateTime|null $creationDate Creation date
     *
     * @return self
     */
    public function setCreationDate($creationDate)
    {
        if (is_null($creationDate)) {
            throw new \InvalidArgumentException('non-nullable creationDate cannot be null');
        }
        $this->container['creationDate'] = $creationDate;

        return $this;
    }

    /**
     * Gets deadline
     *
     * @return \DateTime|null
     */
    public function getDeadline()
    {
        return $this->container['deadline'];
    }

    /**
     * Sets deadline
     *
     * @param \DateTime|null $deadline Document translation deadline
     *
     * @return self
     */
    public function setDeadline($deadline)
    {
        if (is_null($deadline)) {
            array_push($this->openAPINullablesSetToNull, 'deadline');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('deadline', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['deadline'] = $deadline;

        return $this;
    }

    /**
     * Gets sourceLanguage
     *
     * @return string|null
     */
    public function getSourceLanguage()
    {
        return $this->container['sourceLanguage'];
    }

    /**
     * Sets sourceLanguage
     *
     * @param string|null $sourceLanguage Source language
     *
     * @return self
     */
    public function setSourceLanguage($sourceLanguage)
    {
        if (is_null($sourceLanguage)) {
            array_push($this->openAPINullablesSetToNull, 'sourceLanguage');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sourceLanguage', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['sourceLanguage'] = $sourceLanguage;

        return $this;
    }

    /**
     * Gets documentDisassemblingStatus
     *
     * @return \SmartCat\Model\DocumentDisassemblingStatus|null
     */
    public function getDocumentDisassemblingStatus()
    {
        return $this->container['documentDisassemblingStatus'];
    }

    /**
     * Sets documentDisassemblingStatus
     *
     * @param \SmartCat\Model\DocumentDisassemblingStatus|null $documentDisassemblingStatus documentDisassemblingStatus
     *
     * @return self
     */
    public function setDocumentDisassemblingStatus($documentDisassemblingStatus)
    {
        if (is_null($documentDisassemblingStatus)) {
            throw new \InvalidArgumentException('non-nullable documentDisassemblingStatus cannot be null');
        }
        $this->container['documentDisassemblingStatus'] = $documentDisassemblingStatus;

        return $this;
    }

    /**
     * Gets targetLanguage
     *
     * @return string|null
     */
    public function getTargetLanguage()
    {
        return $this->container['targetLanguage'];
    }

    /**
     * Sets targetLanguage
     *
     * @param string|null $targetLanguage Target language
     *
     * @return self
     */
    public function setTargetLanguage($targetLanguage)
    {
        if (is_null($targetLanguage)) {
            array_push($this->openAPINullablesSetToNull, 'targetLanguage');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('targetLanguage', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['targetLanguage'] = $targetLanguage;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \SmartCat\Model\DocumentStatus|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \SmartCat\Model\DocumentStatus|null $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets wordsCount
     *
     * @return int|null
     */
    public function getWordsCount()
    {
        return $this->container['wordsCount'];
    }

    /**
     * Sets wordsCount
     *
     * @param int|null $wordsCount Word count in the source text
     *
     * @return self
     */
    public function setWordsCount($wordsCount)
    {
        if (is_null($wordsCount)) {
            throw new \InvalidArgumentException('non-nullable wordsCount cannot be null');
        }
        $this->container['wordsCount'] = $wordsCount;

        return $this;
    }

    /**
     * Gets statusModificationDate
     *
     * @return \DateTime|null
     */
    public function getStatusModificationDate()
    {
        return $this->container['statusModificationDate'];
    }

    /**
     * Sets statusModificationDate
     *
     * @param \DateTime|null $statusModificationDate Late of the last status change
     *
     * @return self
     */
    public function setStatusModificationDate($statusModificationDate)
    {
        if (is_null($statusModificationDate)) {
            array_push($this->openAPINullablesSetToNull, 'statusModificationDate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('statusModificationDate', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['statusModificationDate'] = $statusModificationDate;

        return $this;
    }

    /**
     * Gets pretranslateCompleted
     *
     * @return bool|null
     */
    public function getPretranslateCompleted()
    {
        return $this->container['pretranslateCompleted'];
    }

    /**
     * Sets pretranslateCompleted
     *
     * @param bool|null $pretranslateCompleted Specifies whether pretranslation has completed, if ordered
     *
     * @return self
     */
    public function setPretranslateCompleted($pretranslateCompleted)
    {
        if (is_null($pretranslateCompleted)) {
            throw new \InvalidArgumentException('non-nullable pretranslateCompleted cannot be null');
        }
        $this->container['pretranslateCompleted'] = $pretranslateCompleted;

        return $this;
    }

    /**
     * Gets workflowStages
     *
     * @return \SmartCat\Model\DocumentWorkflowStageModel[]|null
     */
    public function getWorkflowStages()
    {
        return $this->container['workflowStages'];
    }

    /**
     * Sets workflowStages
     *
     * @param \SmartCat\Model\DocumentWorkflowStageModel[]|null $workflowStages Workflow stages for the document
     *
     * @return self
     */
    public function setWorkflowStages($workflowStages)
    {
        if (is_null($workflowStages)) {
            array_push($this->openAPINullablesSetToNull, 'workflowStages');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('workflowStages', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['workflowStages'] = $workflowStages;

        return $this;
    }

    /**
     * Gets externalId
     *
     * @return string|null
     */
    public function getExternalId()
    {
        return $this->container['externalId'];
    }

    /**
     * Sets externalId
     *
     * @param string|null $externalId External identifier assigned by the client upon the document creation
     *
     * @return self
     */
    public function setExternalId($externalId)
    {
        if (is_null($externalId)) {
            array_push($this->openAPINullablesSetToNull, 'externalId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('externalId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['externalId'] = $externalId;

        return $this;
    }

    /**
     * Gets projectId
     *
     * @return string|null
     */
    public function getProjectId()
    {
        return $this->container['projectId'];
    }

    /**
     * Sets projectId
     *
     * @param string|null $projectId ID of the project associated with the document
     *
     * @return self
     */
    public function setProjectId($projectId)
    {
        if (is_null($projectId)) {
            throw new \InvalidArgumentException('non-nullable projectId cannot be null');
        }
        $this->container['projectId'] = $projectId;

        return $this;
    }

    /**
     * Gets metaInfo
     *
     * @return string|null
     */
    public function getMetaInfo()
    {
        return $this->container['metaInfo'];
    }

    /**
     * Sets metaInfo
     *
     * @param string|null $metaInfo Additional user information about the document
     *
     * @return self
     */
    public function setMetaInfo($metaInfo)
    {
        if (is_null($metaInfo)) {
            array_push($this->openAPINullablesSetToNull, 'metaInfo');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('metaInfo', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['metaInfo'] = $metaInfo;

        return $this;
    }

    /**
     * Gets placeholdersAreEnabled
     *
     * @return bool|null
     */
    public function getPlaceholdersAreEnabled()
    {
        return $this->container['placeholdersAreEnabled'];
    }

    /**
     * Sets placeholdersAreEnabled
     *
     * @param bool|null $placeholdersAreEnabled Specifies whether placeholders are enabled for the document
     *
     * @return self
     */
    public function setPlaceholdersAreEnabled($placeholdersAreEnabled)
    {
        if (is_null($placeholdersAreEnabled)) {
            throw new \InvalidArgumentException('non-nullable placeholdersAreEnabled cannot be null');
        }
        $this->container['placeholdersAreEnabled'] = $placeholdersAreEnabled;

        return $this;
    }

    /**
     * Gets revisionLabel
     *
     * @return string|null
     */
    public function getRevisionLabel()
    {
        return $this->container['revisionLabel'];
    }

    /**
     * Sets revisionLabel
     *
     * @param string|null $revisionLabel Document version ID label
     *
     * @return self
     */
    public function setRevisionLabel($revisionLabel)
    {
        if (is_null($revisionLabel)) {
            array_push($this->openAPINullablesSetToNull, 'revisionLabel');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('revisionLabel', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['revisionLabel'] = $revisionLabel;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


