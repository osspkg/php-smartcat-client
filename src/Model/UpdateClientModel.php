<?php
/**
 * UpdateClientModel
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  SmartCat
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Smartcat API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SmartCat\Model;

use \ArrayAccess;
use \SmartCat\ObjectSerializer;

/**
 * UpdateClientModel Class Doc Comment
 *
 * @category Class
 * @description Client update model
 * @package  SmartCat
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class UpdateClientModel implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'UpdateClientModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'netRateId' => 'string',
        'mainContact' => '\SmartCat\Model\ContactModel',
        'additionalContacts' => '\SmartCat\Model\ContactModel[]',
        'vat' => 'string',
        'countryCode' => 'string',
        'comment' => 'string',
        'website' => 'string',
        'industryId' => 'string',
        'legalName' => 'string',
        'address' => 'string',
        'languageId' => 'int',
        'vendorManager' => 'string',
        'customFieldValues' => 'array<string,string>'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'netRateId' => null,
        'mainContact' => null,
        'additionalContacts' => null,
        'vat' => null,
        'countryCode' => null,
        'comment' => null,
        'website' => null,
        'industryId' => null,
        'legalName' => null,
        'address' => null,
        'languageId' => 'int32',
        'vendorManager' => null,
        'customFieldValues' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'name' => true,
		'netRateId' => true,
		'mainContact' => false,
		'additionalContacts' => true,
		'vat' => true,
		'countryCode' => true,
		'comment' => true,
		'website' => true,
		'industryId' => true,
		'legalName' => true,
		'address' => true,
		'languageId' => true,
		'vendorManager' => true,
		'customFieldValues' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'netRateId' => 'netRateId',
        'mainContact' => 'mainContact',
        'additionalContacts' => 'additionalContacts',
        'vat' => 'vat',
        'countryCode' => 'countryCode',
        'comment' => 'comment',
        'website' => 'website',
        'industryId' => 'industryId',
        'legalName' => 'legalName',
        'address' => 'address',
        'languageId' => 'languageId',
        'vendorManager' => 'vendorManager',
        'customFieldValues' => 'customFieldValues'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'netRateId' => 'setNetRateId',
        'mainContact' => 'setMainContact',
        'additionalContacts' => 'setAdditionalContacts',
        'vat' => 'setVat',
        'countryCode' => 'setCountryCode',
        'comment' => 'setComment',
        'website' => 'setWebsite',
        'industryId' => 'setIndustryId',
        'legalName' => 'setLegalName',
        'address' => 'setAddress',
        'languageId' => 'setLanguageId',
        'vendorManager' => 'setVendorManager',
        'customFieldValues' => 'setCustomFieldValues'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'netRateId' => 'getNetRateId',
        'mainContact' => 'getMainContact',
        'additionalContacts' => 'getAdditionalContacts',
        'vat' => 'getVat',
        'countryCode' => 'getCountryCode',
        'comment' => 'getComment',
        'website' => 'getWebsite',
        'industryId' => 'getIndustryId',
        'legalName' => 'getLegalName',
        'address' => 'getAddress',
        'languageId' => 'getLanguageId',
        'vendorManager' => 'getVendorManager',
        'customFieldValues' => 'getCustomFieldValues'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('netRateId', $data ?? [], null);
        $this->setIfExists('mainContact', $data ?? [], null);
        $this->setIfExists('additionalContacts', $data ?? [], null);
        $this->setIfExists('vat', $data ?? [], null);
        $this->setIfExists('countryCode', $data ?? [], null);
        $this->setIfExists('comment', $data ?? [], null);
        $this->setIfExists('website', $data ?? [], null);
        $this->setIfExists('industryId', $data ?? [], null);
        $this->setIfExists('legalName', $data ?? [], null);
        $this->setIfExists('address', $data ?? [], null);
        $this->setIfExists('languageId', $data ?? [], null);
        $this->setIfExists('vendorManager', $data ?? [], null);
        $this->setIfExists('customFieldValues', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            array_push($this->openAPINullablesSetToNull, 'name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets netRateId
     *
     * @return string|null
     */
    public function getNetRateId()
    {
        return $this->container['netRateId'];
    }

    /**
     * Sets netRateId
     *
     * @param string|null $netRateId ID of discount rates applicable to client
     *
     * @return self
     */
    public function setNetRateId($netRateId)
    {
        if (is_null($netRateId)) {
            array_push($this->openAPINullablesSetToNull, 'netRateId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('netRateId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['netRateId'] = $netRateId;

        return $this;
    }

    /**
     * Gets mainContact
     *
     * @return \SmartCat\Model\ContactModel|null
     */
    public function getMainContact()
    {
        return $this->container['mainContact'];
    }

    /**
     * Sets mainContact
     *
     * @param \SmartCat\Model\ContactModel|null $mainContact mainContact
     *
     * @return self
     */
    public function setMainContact($mainContact)
    {
        if (is_null($mainContact)) {
            throw new \InvalidArgumentException('non-nullable mainContact cannot be null');
        }
        $this->container['mainContact'] = $mainContact;

        return $this;
    }

    /**
     * Gets additionalContacts
     *
     * @return \SmartCat\Model\ContactModel[]|null
     */
    public function getAdditionalContacts()
    {
        return $this->container['additionalContacts'];
    }

    /**
     * Sets additionalContacts
     *
     * @param \SmartCat\Model\ContactModel[]|null $additionalContacts Additional contacts
     *
     * @return self
     */
    public function setAdditionalContacts($additionalContacts)
    {
        if (is_null($additionalContacts)) {
            array_push($this->openAPINullablesSetToNull, 'additionalContacts');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('additionalContacts', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['additionalContacts'] = $additionalContacts;

        return $this;
    }

    /**
     * Gets vat
     *
     * @return string|null
     */
    public function getVat()
    {
        return $this->container['vat'];
    }

    /**
     * Sets vat
     *
     * @param string|null $vat VAT
     *
     * @return self
     */
    public function setVat($vat)
    {
        if (is_null($vat)) {
            array_push($this->openAPINullablesSetToNull, 'vat');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('vat', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['vat'] = $vat;

        return $this;
    }

    /**
     * Gets countryCode
     *
     * @return string|null
     */
    public function getCountryCode()
    {
        return $this->container['countryCode'];
    }

    /**
     * Sets countryCode
     *
     * @param string|null $countryCode Country code
     *
     * @return self
     */
    public function setCountryCode($countryCode)
    {
        if (is_null($countryCode)) {
            array_push($this->openAPINullablesSetToNull, 'countryCode');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('countryCode', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['countryCode'] = $countryCode;

        return $this;
    }

    /**
     * Gets comment
     *
     * @return string|null
     */
    public function getComment()
    {
        return $this->container['comment'];
    }

    /**
     * Sets comment
     *
     * @param string|null $comment Commentary
     *
     * @return self
     */
    public function setComment($comment)
    {
        if (is_null($comment)) {
            array_push($this->openAPINullablesSetToNull, 'comment');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('comment', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['comment'] = $comment;

        return $this;
    }

    /**
     * Gets website
     *
     * @return string|null
     */
    public function getWebsite()
    {
        return $this->container['website'];
    }

    /**
     * Sets website
     *
     * @param string|null $website Website
     *
     * @return self
     */
    public function setWebsite($website)
    {
        if (is_null($website)) {
            array_push($this->openAPINullablesSetToNull, 'website');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('website', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['website'] = $website;

        return $this;
    }

    /**
     * Gets industryId
     *
     * @return string|null
     */
    public function getIndustryId()
    {
        return $this->container['industryId'];
    }

    /**
     * Sets industryId
     *
     * @param string|null $industryId Entry ID in the client specializations list
     *
     * @return self
     */
    public function setIndustryId($industryId)
    {
        if (is_null($industryId)) {
            array_push($this->openAPINullablesSetToNull, 'industryId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('industryId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['industryId'] = $industryId;

        return $this;
    }

    /**
     * Gets legalName
     *
     * @return string|null
     */
    public function getLegalName()
    {
        return $this->container['legalName'];
    }

    /**
     * Sets legalName
     *
     * @param string|null $legalName Legal name
     *
     * @return self
     */
    public function setLegalName($legalName)
    {
        if (is_null($legalName)) {
            array_push($this->openAPINullablesSetToNull, 'legalName');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('legalName', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['legalName'] = $legalName;

        return $this;
    }

    /**
     * Gets address
     *
     * @return string|null
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param string|null $address Address
     *
     * @return self
     */
    public function setAddress($address)
    {
        if (is_null($address)) {
            array_push($this->openAPINullablesSetToNull, 'address');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('address', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets languageId
     *
     * @return int|null
     */
    public function getLanguageId()
    {
        return $this->container['languageId'];
    }

    /**
     * Sets languageId
     *
     * @param int|null $languageId Language
     *
     * @return self
     */
    public function setLanguageId($languageId)
    {
        if (is_null($languageId)) {
            array_push($this->openAPINullablesSetToNull, 'languageId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('languageId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['languageId'] = $languageId;

        return $this;
    }

    /**
     * Gets vendorManager
     *
     * @return string|null
     */
    public function getVendorManager()
    {
        return $this->container['vendorManager'];
    }

    /**
     * Sets vendorManager
     *
     * @param string|null $vendorManager Manager
     *
     * @return self
     */
    public function setVendorManager($vendorManager)
    {
        if (is_null($vendorManager)) {
            array_push($this->openAPINullablesSetToNull, 'vendorManager');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('vendorManager', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['vendorManager'] = $vendorManager;

        return $this;
    }

    /**
     * Gets customFieldValues
     *
     * @return array<string,string>|null
     */
    public function getCustomFieldValues()
    {
        return $this->container['customFieldValues'];
    }

    /**
     * Sets customFieldValues
     *
     * @param array<string,string>|null $customFieldValues Customized field values
     *
     * @return self
     */
    public function setCustomFieldValues($customFieldValues)
    {
        if (is_null($customFieldValues)) {
            array_push($this->openAPINullablesSetToNull, 'customFieldValues');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('customFieldValues', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['customFieldValues'] = $customFieldValues;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


