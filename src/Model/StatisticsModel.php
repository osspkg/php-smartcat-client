<?php
/**
 * StatisticsModel
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  SmartCat
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Smartcat API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SmartCat\Model;

use \ArrayAccess;
use \SmartCat\ObjectSerializer;

/**
 * StatisticsModel Class Doc Comment
 *
 * @category Class
 * @description TM matches and repeats model
 * @package  SmartCat
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class StatisticsModel implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'StatisticsModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'total' => '\SmartCat\Model\ProjectStatisticsItemModel',
        'newSegmentsVolume' => '\SmartCat\Model\ProjectStatisticsItemModel',
        'lockedVolume' => '\SmartCat\Model\ProjectStatisticsItemModel',
        'repetitionsVolume' => '\SmartCat\Model\ProjectStatisticsItemModel',
        'crossDocumentRepetitionsVolume' => '\SmartCat\Model\ProjectStatisticsItemModel',
        'tmMatchRanges' => '\SmartCat\Model\StatisticsTMMatchRangeModel[]',
        'segmentsWithZeroWordsVolume' => '\SmartCat\Model\ProjectStatisticsItemModel',
        'sourcePlaceholdersCount' => 'int',
        'translatableTotal' => '\SmartCat\Model\ProjectStatisticsItemModel'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'total' => null,
        'newSegmentsVolume' => null,
        'lockedVolume' => null,
        'repetitionsVolume' => null,
        'crossDocumentRepetitionsVolume' => null,
        'tmMatchRanges' => null,
        'segmentsWithZeroWordsVolume' => null,
        'sourcePlaceholdersCount' => 'int32',
        'translatableTotal' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'total' => false,
		'newSegmentsVolume' => false,
		'lockedVolume' => false,
		'repetitionsVolume' => false,
		'crossDocumentRepetitionsVolume' => false,
		'tmMatchRanges' => true,
		'segmentsWithZeroWordsVolume' => false,
		'sourcePlaceholdersCount' => false,
		'translatableTotal' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'total' => 'total',
        'newSegmentsVolume' => 'newSegmentsVolume',
        'lockedVolume' => 'lockedVolume',
        'repetitionsVolume' => 'repetitionsVolume',
        'crossDocumentRepetitionsVolume' => 'crossDocumentRepetitionsVolume',
        'tmMatchRanges' => 'tmMatchRanges',
        'segmentsWithZeroWordsVolume' => 'segmentsWithZeroWordsVolume',
        'sourcePlaceholdersCount' => 'sourcePlaceholdersCount',
        'translatableTotal' => 'translatableTotal'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'total' => 'setTotal',
        'newSegmentsVolume' => 'setNewSegmentsVolume',
        'lockedVolume' => 'setLockedVolume',
        'repetitionsVolume' => 'setRepetitionsVolume',
        'crossDocumentRepetitionsVolume' => 'setCrossDocumentRepetitionsVolume',
        'tmMatchRanges' => 'setTmMatchRanges',
        'segmentsWithZeroWordsVolume' => 'setSegmentsWithZeroWordsVolume',
        'sourcePlaceholdersCount' => 'setSourcePlaceholdersCount',
        'translatableTotal' => 'setTranslatableTotal'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'total' => 'getTotal',
        'newSegmentsVolume' => 'getNewSegmentsVolume',
        'lockedVolume' => 'getLockedVolume',
        'repetitionsVolume' => 'getRepetitionsVolume',
        'crossDocumentRepetitionsVolume' => 'getCrossDocumentRepetitionsVolume',
        'tmMatchRanges' => 'getTmMatchRanges',
        'segmentsWithZeroWordsVolume' => 'getSegmentsWithZeroWordsVolume',
        'sourcePlaceholdersCount' => 'getSourcePlaceholdersCount',
        'translatableTotal' => 'getTranslatableTotal'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('total', $data ?? [], null);
        $this->setIfExists('newSegmentsVolume', $data ?? [], null);
        $this->setIfExists('lockedVolume', $data ?? [], null);
        $this->setIfExists('repetitionsVolume', $data ?? [], null);
        $this->setIfExists('crossDocumentRepetitionsVolume', $data ?? [], null);
        $this->setIfExists('tmMatchRanges', $data ?? [], null);
        $this->setIfExists('segmentsWithZeroWordsVolume', $data ?? [], null);
        $this->setIfExists('sourcePlaceholdersCount', $data ?? [], null);
        $this->setIfExists('translatableTotal', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets total
     *
     * @return \SmartCat\Model\ProjectStatisticsItemModel|null
     */
    public function getTotal()
    {
        return $this->container['total'];
    }

    /**
     * Sets total
     *
     * @param \SmartCat\Model\ProjectStatisticsItemModel|null $total total
     *
     * @return self
     */
    public function setTotal($total)
    {
        if (is_null($total)) {
            throw new \InvalidArgumentException('non-nullable total cannot be null');
        }
        $this->container['total'] = $total;

        return $this;
    }

    /**
     * Gets newSegmentsVolume
     *
     * @return \SmartCat\Model\ProjectStatisticsItemModel|null
     */
    public function getNewSegmentsVolume()
    {
        return $this->container['newSegmentsVolume'];
    }

    /**
     * Sets newSegmentsVolume
     *
     * @param \SmartCat\Model\ProjectStatisticsItemModel|null $newSegmentsVolume newSegmentsVolume
     *
     * @return self
     */
    public function setNewSegmentsVolume($newSegmentsVolume)
    {
        if (is_null($newSegmentsVolume)) {
            throw new \InvalidArgumentException('non-nullable newSegmentsVolume cannot be null');
        }
        $this->container['newSegmentsVolume'] = $newSegmentsVolume;

        return $this;
    }

    /**
     * Gets lockedVolume
     *
     * @return \SmartCat\Model\ProjectStatisticsItemModel|null
     */
    public function getLockedVolume()
    {
        return $this->container['lockedVolume'];
    }

    /**
     * Sets lockedVolume
     *
     * @param \SmartCat\Model\ProjectStatisticsItemModel|null $lockedVolume lockedVolume
     *
     * @return self
     */
    public function setLockedVolume($lockedVolume)
    {
        if (is_null($lockedVolume)) {
            throw new \InvalidArgumentException('non-nullable lockedVolume cannot be null');
        }
        $this->container['lockedVolume'] = $lockedVolume;

        return $this;
    }

    /**
     * Gets repetitionsVolume
     *
     * @return \SmartCat\Model\ProjectStatisticsItemModel|null
     */
    public function getRepetitionsVolume()
    {
        return $this->container['repetitionsVolume'];
    }

    /**
     * Sets repetitionsVolume
     *
     * @param \SmartCat\Model\ProjectStatisticsItemModel|null $repetitionsVolume repetitionsVolume
     *
     * @return self
     */
    public function setRepetitionsVolume($repetitionsVolume)
    {
        if (is_null($repetitionsVolume)) {
            throw new \InvalidArgumentException('non-nullable repetitionsVolume cannot be null');
        }
        $this->container['repetitionsVolume'] = $repetitionsVolume;

        return $this;
    }

    /**
     * Gets crossDocumentRepetitionsVolume
     *
     * @return \SmartCat\Model\ProjectStatisticsItemModel|null
     */
    public function getCrossDocumentRepetitionsVolume()
    {
        return $this->container['crossDocumentRepetitionsVolume'];
    }

    /**
     * Sets crossDocumentRepetitionsVolume
     *
     * @param \SmartCat\Model\ProjectStatisticsItemModel|null $crossDocumentRepetitionsVolume crossDocumentRepetitionsVolume
     *
     * @return self
     */
    public function setCrossDocumentRepetitionsVolume($crossDocumentRepetitionsVolume)
    {
        if (is_null($crossDocumentRepetitionsVolume)) {
            throw new \InvalidArgumentException('non-nullable crossDocumentRepetitionsVolume cannot be null');
        }
        $this->container['crossDocumentRepetitionsVolume'] = $crossDocumentRepetitionsVolume;

        return $this;
    }

    /**
     * Gets tmMatchRanges
     *
     * @return \SmartCat\Model\StatisticsTMMatchRangeModel[]|null
     */
    public function getTmMatchRanges()
    {
        return $this->container['tmMatchRanges'];
    }

    /**
     * Sets tmMatchRanges
     *
     * @param \SmartCat\Model\StatisticsTMMatchRangeModel[]|null $tmMatchRanges Information about the number of TM matches in different translation quality ranges
     *
     * @return self
     */
    public function setTmMatchRanges($tmMatchRanges)
    {
        if (is_null($tmMatchRanges)) {
            array_push($this->openAPINullablesSetToNull, 'tmMatchRanges');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tmMatchRanges', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['tmMatchRanges'] = $tmMatchRanges;

        return $this;
    }

    /**
     * Gets segmentsWithZeroWordsVolume
     *
     * @return \SmartCat\Model\ProjectStatisticsItemModel|null
     */
    public function getSegmentsWithZeroWordsVolume()
    {
        return $this->container['segmentsWithZeroWordsVolume'];
    }

    /**
     * Sets segmentsWithZeroWordsVolume
     *
     * @param \SmartCat\Model\ProjectStatisticsItemModel|null $segmentsWithZeroWordsVolume segmentsWithZeroWordsVolume
     *
     * @return self
     */
    public function setSegmentsWithZeroWordsVolume($segmentsWithZeroWordsVolume)
    {
        if (is_null($segmentsWithZeroWordsVolume)) {
            throw new \InvalidArgumentException('non-nullable segmentsWithZeroWordsVolume cannot be null');
        }
        $this->container['segmentsWithZeroWordsVolume'] = $segmentsWithZeroWordsVolume;

        return $this;
    }

    /**
     * Gets sourcePlaceholdersCount
     *
     * @return int|null
     */
    public function getSourcePlaceholdersCount()
    {
        return $this->container['sourcePlaceholdersCount'];
    }

    /**
     * Sets sourcePlaceholdersCount
     *
     * @param int|null $sourcePlaceholdersCount The count of placeholders in the source text
     *
     * @return self
     */
    public function setSourcePlaceholdersCount($sourcePlaceholdersCount)
    {
        if (is_null($sourcePlaceholdersCount)) {
            throw new \InvalidArgumentException('non-nullable sourcePlaceholdersCount cannot be null');
        }
        $this->container['sourcePlaceholdersCount'] = $sourcePlaceholdersCount;

        return $this;
    }

    /**
     * Gets translatableTotal
     *
     * @return \SmartCat\Model\ProjectStatisticsItemModel|null
     */
    public function getTranslatableTotal()
    {
        return $this->container['translatableTotal'];
    }

    /**
     * Sets translatableTotal
     *
     * @param \SmartCat\Model\ProjectStatisticsItemModel|null $translatableTotal translatableTotal
     *
     * @return self
     */
    public function setTranslatableTotal($translatableTotal)
    {
        if (is_null($translatableTotal)) {
            throw new \InvalidArgumentException('non-nullable translatableTotal cannot be null');
        }
        $this->container['translatableTotal'] = $translatableTotal;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


