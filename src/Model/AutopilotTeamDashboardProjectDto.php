<?php
/**
 * AutopilotTeamDashboardProjectDto
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  SmartCat
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Smartcat API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SmartCat\Model;

use \ArrayAccess;
use \SmartCat\ObjectSerializer;

/**
 * AutopilotTeamDashboardProjectDto Class Doc Comment
 *
 * @category Class
 * @package  SmartCat
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class AutopilotTeamDashboardProjectDto implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'AutopilotTeamDashboardProjectDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'name' => 'string',
        'status' => '\SmartCat\Model\ProjectStatus',
        'createdBy' => '\SmartCat\Model\AutopilotTeamDashboardProjectCreatorDto',
        'managers' => '\SmartCat\Model\AutopilotTeamDashboardProjectManagerDto[]',
        'sourceLanguage' => 'string',
        'targetsLanguages' => 'string[]',
        'creationDate' => '\DateTime',
        'deadline' => '\DateTime',
        'documentsCount' => 'int',
        'totalWordsCount' => 'int',
        'leftWordsCount' => 'int',
        'totalProgress' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'uuid',
        'name' => null,
        'status' => null,
        'createdBy' => null,
        'managers' => null,
        'sourceLanguage' => null,
        'targetsLanguages' => null,
        'creationDate' => 'date-time',
        'deadline' => 'date-time',
        'documentsCount' => 'int32',
        'totalWordsCount' => 'int32',
        'leftWordsCount' => 'int32',
        'totalProgress' => 'double'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
		'name' => true,
		'status' => false,
		'createdBy' => false,
		'managers' => true,
		'sourceLanguage' => true,
		'targetsLanguages' => true,
		'creationDate' => false,
		'deadline' => true,
		'documentsCount' => false,
		'totalWordsCount' => false,
		'leftWordsCount' => false,
		'totalProgress' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'status' => 'status',
        'createdBy' => 'createdBy',
        'managers' => 'managers',
        'sourceLanguage' => 'sourceLanguage',
        'targetsLanguages' => 'targetsLanguages',
        'creationDate' => 'creationDate',
        'deadline' => 'deadline',
        'documentsCount' => 'documentsCount',
        'totalWordsCount' => 'totalWordsCount',
        'leftWordsCount' => 'leftWordsCount',
        'totalProgress' => 'totalProgress'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'status' => 'setStatus',
        'createdBy' => 'setCreatedBy',
        'managers' => 'setManagers',
        'sourceLanguage' => 'setSourceLanguage',
        'targetsLanguages' => 'setTargetsLanguages',
        'creationDate' => 'setCreationDate',
        'deadline' => 'setDeadline',
        'documentsCount' => 'setDocumentsCount',
        'totalWordsCount' => 'setTotalWordsCount',
        'leftWordsCount' => 'setLeftWordsCount',
        'totalProgress' => 'setTotalProgress'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'status' => 'getStatus',
        'createdBy' => 'getCreatedBy',
        'managers' => 'getManagers',
        'sourceLanguage' => 'getSourceLanguage',
        'targetsLanguages' => 'getTargetsLanguages',
        'creationDate' => 'getCreationDate',
        'deadline' => 'getDeadline',
        'documentsCount' => 'getDocumentsCount',
        'totalWordsCount' => 'getTotalWordsCount',
        'leftWordsCount' => 'getLeftWordsCount',
        'totalProgress' => 'getTotalProgress'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('createdBy', $data ?? [], null);
        $this->setIfExists('managers', $data ?? [], null);
        $this->setIfExists('sourceLanguage', $data ?? [], null);
        $this->setIfExists('targetsLanguages', $data ?? [], null);
        $this->setIfExists('creationDate', $data ?? [], null);
        $this->setIfExists('deadline', $data ?? [], null);
        $this->setIfExists('documentsCount', $data ?? [], null);
        $this->setIfExists('totalWordsCount', $data ?? [], null);
        $this->setIfExists('leftWordsCount', $data ?? [], null);
        $this->setIfExists('totalProgress', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            array_push($this->openAPINullablesSetToNull, 'name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \SmartCat\Model\ProjectStatus|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \SmartCat\Model\ProjectStatus|null $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets createdBy
     *
     * @return \SmartCat\Model\AutopilotTeamDashboardProjectCreatorDto|null
     */
    public function getCreatedBy()
    {
        return $this->container['createdBy'];
    }

    /**
     * Sets createdBy
     *
     * @param \SmartCat\Model\AutopilotTeamDashboardProjectCreatorDto|null $createdBy createdBy
     *
     * @return self
     */
    public function setCreatedBy($createdBy)
    {
        if (is_null($createdBy)) {
            throw new \InvalidArgumentException('non-nullable createdBy cannot be null');
        }
        $this->container['createdBy'] = $createdBy;

        return $this;
    }

    /**
     * Gets managers
     *
     * @return \SmartCat\Model\AutopilotTeamDashboardProjectManagerDto[]|null
     */
    public function getManagers()
    {
        return $this->container['managers'];
    }

    /**
     * Sets managers
     *
     * @param \SmartCat\Model\AutopilotTeamDashboardProjectManagerDto[]|null $managers managers
     *
     * @return self
     */
    public function setManagers($managers)
    {
        if (is_null($managers)) {
            array_push($this->openAPINullablesSetToNull, 'managers');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('managers', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['managers'] = $managers;

        return $this;
    }

    /**
     * Gets sourceLanguage
     *
     * @return string|null
     */
    public function getSourceLanguage()
    {
        return $this->container['sourceLanguage'];
    }

    /**
     * Sets sourceLanguage
     *
     * @param string|null $sourceLanguage sourceLanguage
     *
     * @return self
     */
    public function setSourceLanguage($sourceLanguage)
    {
        if (is_null($sourceLanguage)) {
            array_push($this->openAPINullablesSetToNull, 'sourceLanguage');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sourceLanguage', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['sourceLanguage'] = $sourceLanguage;

        return $this;
    }

    /**
     * Gets targetsLanguages
     *
     * @return string[]|null
     */
    public function getTargetsLanguages()
    {
        return $this->container['targetsLanguages'];
    }

    /**
     * Sets targetsLanguages
     *
     * @param string[]|null $targetsLanguages targetsLanguages
     *
     * @return self
     */
    public function setTargetsLanguages($targetsLanguages)
    {
        if (is_null($targetsLanguages)) {
            array_push($this->openAPINullablesSetToNull, 'targetsLanguages');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('targetsLanguages', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['targetsLanguages'] = $targetsLanguages;

        return $this;
    }

    /**
     * Gets creationDate
     *
     * @return \DateTime|null
     */
    public function getCreationDate()
    {
        return $this->container['creationDate'];
    }

    /**
     * Sets creationDate
     *
     * @param \DateTime|null $creationDate creationDate
     *
     * @return self
     */
    public function setCreationDate($creationDate)
    {
        if (is_null($creationDate)) {
            throw new \InvalidArgumentException('non-nullable creationDate cannot be null');
        }
        $this->container['creationDate'] = $creationDate;

        return $this;
    }

    /**
     * Gets deadline
     *
     * @return \DateTime|null
     */
    public function getDeadline()
    {
        return $this->container['deadline'];
    }

    /**
     * Sets deadline
     *
     * @param \DateTime|null $deadline deadline
     *
     * @return self
     */
    public function setDeadline($deadline)
    {
        if (is_null($deadline)) {
            array_push($this->openAPINullablesSetToNull, 'deadline');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('deadline', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['deadline'] = $deadline;

        return $this;
    }

    /**
     * Gets documentsCount
     *
     * @return int|null
     */
    public function getDocumentsCount()
    {
        return $this->container['documentsCount'];
    }

    /**
     * Sets documentsCount
     *
     * @param int|null $documentsCount documentsCount
     *
     * @return self
     */
    public function setDocumentsCount($documentsCount)
    {
        if (is_null($documentsCount)) {
            throw new \InvalidArgumentException('non-nullable documentsCount cannot be null');
        }
        $this->container['documentsCount'] = $documentsCount;

        return $this;
    }

    /**
     * Gets totalWordsCount
     *
     * @return int|null
     */
    public function getTotalWordsCount()
    {
        return $this->container['totalWordsCount'];
    }

    /**
     * Sets totalWordsCount
     *
     * @param int|null $totalWordsCount totalWordsCount
     *
     * @return self
     */
    public function setTotalWordsCount($totalWordsCount)
    {
        if (is_null($totalWordsCount)) {
            throw new \InvalidArgumentException('non-nullable totalWordsCount cannot be null');
        }
        $this->container['totalWordsCount'] = $totalWordsCount;

        return $this;
    }

    /**
     * Gets leftWordsCount
     *
     * @return int|null
     */
    public function getLeftWordsCount()
    {
        return $this->container['leftWordsCount'];
    }

    /**
     * Sets leftWordsCount
     *
     * @param int|null $leftWordsCount leftWordsCount
     *
     * @return self
     */
    public function setLeftWordsCount($leftWordsCount)
    {
        if (is_null($leftWordsCount)) {
            throw new \InvalidArgumentException('non-nullable leftWordsCount cannot be null');
        }
        $this->container['leftWordsCount'] = $leftWordsCount;

        return $this;
    }

    /**
     * Gets totalProgress
     *
     * @return float|null
     */
    public function getTotalProgress()
    {
        return $this->container['totalProgress'];
    }

    /**
     * Sets totalProgress
     *
     * @param float|null $totalProgress totalProgress
     *
     * @return self
     */
    public function setTotalProgress($totalProgress)
    {
        if (is_null($totalProgress)) {
            throw new \InvalidArgumentException('non-nullable totalProgress cannot be null');
        }
        $this->container['totalProgress'] = $totalProgress;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


