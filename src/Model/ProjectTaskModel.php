<?php
/**
 * ProjectTaskModel
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  SmartCat
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Smartcat API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SmartCat\Model;

use \ArrayAccess;
use \SmartCat\ObjectSerializer;

/**
 * ProjectTaskModel Class Doc Comment
 *
 * @category Class
 * @description Project task
 * @package  SmartCat
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ProjectTaskModel implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ProjectTaskModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'number' => 'string',
        'status' => '\SmartCat\Model\ProjectTaskStatus',
        'progressPercentage' => 'float',
        'sourceLanguage' => 'string',
        'targetLanguage' => 'string',
        'stageType' => '\SmartCat\Model\StageType',
        'stageId' => 'string',
        'deadline' => '\DateTime',
        'cost' => 'float',
        'approximateCost' => 'float',
        'documentIds' => 'string[]',
        'createDate' => '\DateTime',
        'lastUpdateScopeDate' => '\DateTime',
        'individualAssignments' => '\SmartCat\Model\IndividualAssignmentModel[]',
        'vendorAssignments' => '\SmartCat\Model\VendorAssignmentModel[]',
        'invitationStrategyType' => '\SmartCat\Model\ProjectTaskIndividualInvitationStrategyType'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'uuid',
        'number' => null,
        'status' => null,
        'progressPercentage' => 'double',
        'sourceLanguage' => null,
        'targetLanguage' => null,
        'stageType' => null,
        'stageId' => 'uuid',
        'deadline' => 'date-time',
        'cost' => 'double',
        'approximateCost' => 'double',
        'documentIds' => null,
        'createDate' => 'date-time',
        'lastUpdateScopeDate' => 'date-time',
        'individualAssignments' => null,
        'vendorAssignments' => null,
        'invitationStrategyType' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
		'number' => true,
		'status' => false,
		'progressPercentage' => true,
		'sourceLanguage' => true,
		'targetLanguage' => true,
		'stageType' => false,
		'stageId' => false,
		'deadline' => true,
		'cost' => true,
		'approximateCost' => true,
		'documentIds' => true,
		'createDate' => false,
		'lastUpdateScopeDate' => true,
		'individualAssignments' => true,
		'vendorAssignments' => true,
		'invitationStrategyType' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'number' => 'number',
        'status' => 'status',
        'progressPercentage' => 'progressPercentage',
        'sourceLanguage' => 'sourceLanguage',
        'targetLanguage' => 'targetLanguage',
        'stageType' => 'stageType',
        'stageId' => 'stageId',
        'deadline' => 'deadline',
        'cost' => 'cost',
        'approximateCost' => 'approximateCost',
        'documentIds' => 'documentIds',
        'createDate' => 'createDate',
        'lastUpdateScopeDate' => 'lastUpdateScopeDate',
        'individualAssignments' => 'individualAssignments',
        'vendorAssignments' => 'vendorAssignments',
        'invitationStrategyType' => 'invitationStrategyType'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'number' => 'setNumber',
        'status' => 'setStatus',
        'progressPercentage' => 'setProgressPercentage',
        'sourceLanguage' => 'setSourceLanguage',
        'targetLanguage' => 'setTargetLanguage',
        'stageType' => 'setStageType',
        'stageId' => 'setStageId',
        'deadline' => 'setDeadline',
        'cost' => 'setCost',
        'approximateCost' => 'setApproximateCost',
        'documentIds' => 'setDocumentIds',
        'createDate' => 'setCreateDate',
        'lastUpdateScopeDate' => 'setLastUpdateScopeDate',
        'individualAssignments' => 'setIndividualAssignments',
        'vendorAssignments' => 'setVendorAssignments',
        'invitationStrategyType' => 'setInvitationStrategyType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'number' => 'getNumber',
        'status' => 'getStatus',
        'progressPercentage' => 'getProgressPercentage',
        'sourceLanguage' => 'getSourceLanguage',
        'targetLanguage' => 'getTargetLanguage',
        'stageType' => 'getStageType',
        'stageId' => 'getStageId',
        'deadline' => 'getDeadline',
        'cost' => 'getCost',
        'approximateCost' => 'getApproximateCost',
        'documentIds' => 'getDocumentIds',
        'createDate' => 'getCreateDate',
        'lastUpdateScopeDate' => 'getLastUpdateScopeDate',
        'individualAssignments' => 'getIndividualAssignments',
        'vendorAssignments' => 'getVendorAssignments',
        'invitationStrategyType' => 'getInvitationStrategyType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('number', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('progressPercentage', $data ?? [], null);
        $this->setIfExists('sourceLanguage', $data ?? [], null);
        $this->setIfExists('targetLanguage', $data ?? [], null);
        $this->setIfExists('stageType', $data ?? [], null);
        $this->setIfExists('stageId', $data ?? [], null);
        $this->setIfExists('deadline', $data ?? [], null);
        $this->setIfExists('cost', $data ?? [], null);
        $this->setIfExists('approximateCost', $data ?? [], null);
        $this->setIfExists('documentIds', $data ?? [], null);
        $this->setIfExists('createDate', $data ?? [], null);
        $this->setIfExists('lastUpdateScopeDate', $data ?? [], null);
        $this->setIfExists('individualAssignments', $data ?? [], null);
        $this->setIfExists('vendorAssignments', $data ?? [], null);
        $this->setIfExists('invitationStrategyType', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id Task ID
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets number
     *
     * @return string|null
     */
    public function getNumber()
    {
        return $this->container['number'];
    }

    /**
     * Sets number
     *
     * @param string|null $number Task number
     *
     * @return self
     */
    public function setNumber($number)
    {
        if (is_null($number)) {
            array_push($this->openAPINullablesSetToNull, 'number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['number'] = $number;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \SmartCat\Model\ProjectTaskStatus|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \SmartCat\Model\ProjectTaskStatus|null $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets progressPercentage
     *
     * @return float|null
     */
    public function getProgressPercentage()
    {
        return $this->container['progressPercentage'];
    }

    /**
     * Sets progressPercentage
     *
     * @param float|null $progressPercentage Task progress (in percent)
     *
     * @return self
     */
    public function setProgressPercentage($progressPercentage)
    {
        if (is_null($progressPercentage)) {
            array_push($this->openAPINullablesSetToNull, 'progressPercentage');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('progressPercentage', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['progressPercentage'] = $progressPercentage;

        return $this;
    }

    /**
     * Gets sourceLanguage
     *
     * @return string|null
     */
    public function getSourceLanguage()
    {
        return $this->container['sourceLanguage'];
    }

    /**
     * Sets sourceLanguage
     *
     * @param string|null $sourceLanguage Source language of the task
     *
     * @return self
     */
    public function setSourceLanguage($sourceLanguage)
    {
        if (is_null($sourceLanguage)) {
            array_push($this->openAPINullablesSetToNull, 'sourceLanguage');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sourceLanguage', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['sourceLanguage'] = $sourceLanguage;

        return $this;
    }

    /**
     * Gets targetLanguage
     *
     * @return string|null
     */
    public function getTargetLanguage()
    {
        return $this->container['targetLanguage'];
    }

    /**
     * Sets targetLanguage
     *
     * @param string|null $targetLanguage Target language of the task
     *
     * @return self
     */
    public function setTargetLanguage($targetLanguage)
    {
        if (is_null($targetLanguage)) {
            array_push($this->openAPINullablesSetToNull, 'targetLanguage');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('targetLanguage', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['targetLanguage'] = $targetLanguage;

        return $this;
    }

    /**
     * Gets stageType
     *
     * @return \SmartCat\Model\StageType|null
     */
    public function getStageType()
    {
        return $this->container['stageType'];
    }

    /**
     * Sets stageType
     *
     * @param \SmartCat\Model\StageType|null $stageType stageType
     *
     * @return self
     */
    public function setStageType($stageType)
    {
        if (is_null($stageType)) {
            throw new \InvalidArgumentException('non-nullable stageType cannot be null');
        }
        $this->container['stageType'] = $stageType;

        return $this;
    }

    /**
     * Gets stageId
     *
     * @return string|null
     */
    public function getStageId()
    {
        return $this->container['stageId'];
    }

    /**
     * Sets stageId
     *
     * @param string|null $stageId Stage ID
     *
     * @return self
     */
    public function setStageId($stageId)
    {
        if (is_null($stageId)) {
            throw new \InvalidArgumentException('non-nullable stageId cannot be null');
        }
        $this->container['stageId'] = $stageId;

        return $this;
    }

    /**
     * Gets deadline
     *
     * @return \DateTime|null
     */
    public function getDeadline()
    {
        return $this->container['deadline'];
    }

    /**
     * Sets deadline
     *
     * @param \DateTime|null $deadline Task deadline
     *
     * @return self
     */
    public function setDeadline($deadline)
    {
        if (is_null($deadline)) {
            array_push($this->openAPINullablesSetToNull, 'deadline');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('deadline', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['deadline'] = $deadline;

        return $this;
    }

    /**
     * Gets cost
     *
     * @return float|null
     */
    public function getCost()
    {
        return $this->container['cost'];
    }

    /**
     * Sets cost
     *
     * @param float|null $cost Actual cost of the work performed within the task
     *
     * @return self
     */
    public function setCost($cost)
    {
        if (is_null($cost)) {
            array_push($this->openAPINullablesSetToNull, 'cost');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cost', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['cost'] = $cost;

        return $this;
    }

    /**
     * Gets approximateCost
     *
     * @return float|null
     */
    public function getApproximateCost()
    {
        return $this->container['approximateCost'];
    }

    /**
     * Sets approximateCost
     *
     * @param float|null $approximateCost Estimated cost of the work, taking into account the assigned suppliers
     *
     * @return self
     */
    public function setApproximateCost($approximateCost)
    {
        if (is_null($approximateCost)) {
            array_push($this->openAPINullablesSetToNull, 'approximateCost');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('approximateCost', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['approximateCost'] = $approximateCost;

        return $this;
    }

    /**
     * Gets documentIds
     *
     * @return string[]|null
     */
    public function getDocumentIds()
    {
        return $this->container['documentIds'];
    }

    /**
     * Sets documentIds
     *
     * @param string[]|null $documentIds IDs of the documents included in the task
     *
     * @return self
     */
    public function setDocumentIds($documentIds)
    {
        if (is_null($documentIds)) {
            array_push($this->openAPINullablesSetToNull, 'documentIds');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('documentIds', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['documentIds'] = $documentIds;

        return $this;
    }

    /**
     * Gets createDate
     *
     * @return \DateTime|null
     */
    public function getCreateDate()
    {
        return $this->container['createDate'];
    }

    /**
     * Sets createDate
     *
     * @param \DateTime|null $createDate Creation date
     *
     * @return self
     */
    public function setCreateDate($createDate)
    {
        if (is_null($createDate)) {
            throw new \InvalidArgumentException('non-nullable createDate cannot be null');
        }
        $this->container['createDate'] = $createDate;

        return $this;
    }

    /**
     * Gets lastUpdateScopeDate
     *
     * @return \DateTime|null
     */
    public function getLastUpdateScopeDate()
    {
        return $this->container['lastUpdateScopeDate'];
    }

    /**
     * Sets lastUpdateScopeDate
     *
     * @param \DateTime|null $lastUpdateScopeDate Last volume modification date (documents updated/added)
     *
     * @return self
     */
    public function setLastUpdateScopeDate($lastUpdateScopeDate)
    {
        if (is_null($lastUpdateScopeDate)) {
            array_push($this->openAPINullablesSetToNull, 'lastUpdateScopeDate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('lastUpdateScopeDate', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['lastUpdateScopeDate'] = $lastUpdateScopeDate;

        return $this;
    }

    /**
     * Gets individualAssignments
     *
     * @return \SmartCat\Model\IndividualAssignmentModel[]|null
     */
    public function getIndividualAssignments()
    {
        return $this->container['individualAssignments'];
    }

    /**
     * Sets individualAssignments
     *
     * @param \SmartCat\Model\IndividualAssignmentModel[]|null $individualAssignments User assignments to the task
     *
     * @return self
     */
    public function setIndividualAssignments($individualAssignments)
    {
        if (is_null($individualAssignments)) {
            array_push($this->openAPINullablesSetToNull, 'individualAssignments');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('individualAssignments', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['individualAssignments'] = $individualAssignments;

        return $this;
    }

    /**
     * Gets vendorAssignments
     *
     * @return \SmartCat\Model\VendorAssignmentModel[]|null
     */
    public function getVendorAssignments()
    {
        return $this->container['vendorAssignments'];
    }

    /**
     * Sets vendorAssignments
     *
     * @param \SmartCat\Model\VendorAssignmentModel[]|null $vendorAssignments Agency assignments to the task
     *
     * @return self
     */
    public function setVendorAssignments($vendorAssignments)
    {
        if (is_null($vendorAssignments)) {
            array_push($this->openAPINullablesSetToNull, 'vendorAssignments');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('vendorAssignments', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['vendorAssignments'] = $vendorAssignments;

        return $this;
    }

    /**
     * Gets invitationStrategyType
     *
     * @return \SmartCat\Model\ProjectTaskIndividualInvitationStrategyType|null
     */
    public function getInvitationStrategyType()
    {
        return $this->container['invitationStrategyType'];
    }

    /**
     * Sets invitationStrategyType
     *
     * @param \SmartCat\Model\ProjectTaskIndividualInvitationStrategyType|null $invitationStrategyType invitationStrategyType
     *
     * @return self
     */
    public function setInvitationStrategyType($invitationStrategyType)
    {
        if (is_null($invitationStrategyType)) {
            throw new \InvalidArgumentException('non-nullable invitationStrategyType cannot be null');
        }
        $this->container['invitationStrategyType'] = $invitationStrategyType;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


