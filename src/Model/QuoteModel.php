<?php
/**
 * QuoteModel
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  SmartCat
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Smartcat API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SmartCat\Model;

use \ArrayAccess;
use \SmartCat\ObjectSerializer;

/**
 * QuoteModel Class Doc Comment
 *
 * @category Class
 * @description Project quote model
 * @package  SmartCat
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class QuoteModel implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'QuoteModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'creationDate' => '\DateTime',
        'accountId' => 'string',
        'projectId' => 'string',
        'deadline' => '\DateTime',
        'clientContactName' => 'string',
        'clientContactEmail' => 'string',
        'dueDate' => '\DateTime',
        'cost' => 'float',
        'currency' => 'string',
        'approvalStatus' => '\SmartCat\Model\ApprovalStatus',
        'approvalStatusModificationDate' => '\DateTime',
        'paymentStatus' => '\SmartCat\Model\QuotePaymentStatus',
        'clientId' => 'string',
        'externalFileDetalization' => '\SmartCat\Model\ExternalFileDetalizationModel',
        'servicesDetalization' => '\SmartCat\Model\ServicesDetalizationModel'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'creationDate' => 'date-time',
        'accountId' => 'uuid',
        'projectId' => 'uuid',
        'deadline' => 'date-time',
        'clientContactName' => null,
        'clientContactEmail' => null,
        'dueDate' => 'date-time',
        'cost' => 'double',
        'currency' => null,
        'approvalStatus' => null,
        'approvalStatusModificationDate' => 'date-time',
        'paymentStatus' => null,
        'clientId' => 'uuid',
        'externalFileDetalization' => null,
        'servicesDetalization' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
		'creationDate' => false,
		'accountId' => false,
		'projectId' => false,
		'deadline' => true,
		'clientContactName' => true,
		'clientContactEmail' => true,
		'dueDate' => true,
		'cost' => true,
		'currency' => true,
		'approvalStatus' => false,
		'approvalStatusModificationDate' => true,
		'paymentStatus' => false,
		'clientId' => true,
		'externalFileDetalization' => false,
		'servicesDetalization' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'creationDate' => 'creationDate',
        'accountId' => 'accountId',
        'projectId' => 'projectId',
        'deadline' => 'deadline',
        'clientContactName' => 'clientContactName',
        'clientContactEmail' => 'clientContactEmail',
        'dueDate' => 'dueDate',
        'cost' => 'cost',
        'currency' => 'currency',
        'approvalStatus' => 'approvalStatus',
        'approvalStatusModificationDate' => 'approvalStatusModificationDate',
        'paymentStatus' => 'paymentStatus',
        'clientId' => 'clientId',
        'externalFileDetalization' => 'externalFileDetalization',
        'servicesDetalization' => 'servicesDetalization'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'creationDate' => 'setCreationDate',
        'accountId' => 'setAccountId',
        'projectId' => 'setProjectId',
        'deadline' => 'setDeadline',
        'clientContactName' => 'setClientContactName',
        'clientContactEmail' => 'setClientContactEmail',
        'dueDate' => 'setDueDate',
        'cost' => 'setCost',
        'currency' => 'setCurrency',
        'approvalStatus' => 'setApprovalStatus',
        'approvalStatusModificationDate' => 'setApprovalStatusModificationDate',
        'paymentStatus' => 'setPaymentStatus',
        'clientId' => 'setClientId',
        'externalFileDetalization' => 'setExternalFileDetalization',
        'servicesDetalization' => 'setServicesDetalization'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'creationDate' => 'getCreationDate',
        'accountId' => 'getAccountId',
        'projectId' => 'getProjectId',
        'deadline' => 'getDeadline',
        'clientContactName' => 'getClientContactName',
        'clientContactEmail' => 'getClientContactEmail',
        'dueDate' => 'getDueDate',
        'cost' => 'getCost',
        'currency' => 'getCurrency',
        'approvalStatus' => 'getApprovalStatus',
        'approvalStatusModificationDate' => 'getApprovalStatusModificationDate',
        'paymentStatus' => 'getPaymentStatus',
        'clientId' => 'getClientId',
        'externalFileDetalization' => 'getExternalFileDetalization',
        'servicesDetalization' => 'getServicesDetalization'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('creationDate', $data ?? [], null);
        $this->setIfExists('accountId', $data ?? [], null);
        $this->setIfExists('projectId', $data ?? [], null);
        $this->setIfExists('deadline', $data ?? [], null);
        $this->setIfExists('clientContactName', $data ?? [], null);
        $this->setIfExists('clientContactEmail', $data ?? [], null);
        $this->setIfExists('dueDate', $data ?? [], null);
        $this->setIfExists('cost', $data ?? [], null);
        $this->setIfExists('currency', $data ?? [], null);
        $this->setIfExists('approvalStatus', $data ?? [], null);
        $this->setIfExists('approvalStatusModificationDate', $data ?? [], null);
        $this->setIfExists('paymentStatus', $data ?? [], null);
        $this->setIfExists('clientId', $data ?? [], null);
        $this->setIfExists('externalFileDetalization', $data ?? [], null);
        $this->setIfExists('servicesDetalization', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id Quote ID
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets creationDate
     *
     * @return \DateTime|null
     */
    public function getCreationDate()
    {
        return $this->container['creationDate'];
    }

    /**
     * Sets creationDate
     *
     * @param \DateTime|null $creationDate Quote creation date
     *
     * @return self
     */
    public function setCreationDate($creationDate)
    {
        if (is_null($creationDate)) {
            throw new \InvalidArgumentException('non-nullable creationDate cannot be null');
        }
        $this->container['creationDate'] = $creationDate;

        return $this;
    }

    /**
     * Gets accountId
     *
     * @return string|null
     */
    public function getAccountId()
    {
        return $this->container['accountId'];
    }

    /**
     * Sets accountId
     *
     * @param string|null $accountId Account ID associated with the quote
     *
     * @return self
     */
    public function setAccountId($accountId)
    {
        if (is_null($accountId)) {
            throw new \InvalidArgumentException('non-nullable accountId cannot be null');
        }
        $this->container['accountId'] = $accountId;

        return $this;
    }

    /**
     * Gets projectId
     *
     * @return string|null
     */
    public function getProjectId()
    {
        return $this->container['projectId'];
    }

    /**
     * Sets projectId
     *
     * @param string|null $projectId Project ID associated with the quote
     *
     * @return self
     */
    public function setProjectId($projectId)
    {
        if (is_null($projectId)) {
            throw new \InvalidArgumentException('non-nullable projectId cannot be null');
        }
        $this->container['projectId'] = $projectId;

        return $this;
    }

    /**
     * Gets deadline
     *
     * @return \DateTime|null
     */
    public function getDeadline()
    {
        return $this->container['deadline'];
    }

    /**
     * Sets deadline
     *
     * @param \DateTime|null $deadline Project deadline
     *
     * @return self
     */
    public function setDeadline($deadline)
    {
        if (is_null($deadline)) {
            array_push($this->openAPINullablesSetToNull, 'deadline');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('deadline', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['deadline'] = $deadline;

        return $this;
    }

    /**
     * Gets clientContactName
     *
     * @return string|null
     */
    public function getClientContactName()
    {
        return $this->container['clientContactName'];
    }

    /**
     * Sets clientContactName
     *
     * @param string|null $clientContactName Client's contact person name
     *
     * @return self
     */
    public function setClientContactName($clientContactName)
    {
        if (is_null($clientContactName)) {
            array_push($this->openAPINullablesSetToNull, 'clientContactName');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('clientContactName', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['clientContactName'] = $clientContactName;

        return $this;
    }

    /**
     * Gets clientContactEmail
     *
     * @return string|null
     */
    public function getClientContactEmail()
    {
        return $this->container['clientContactEmail'];
    }

    /**
     * Sets clientContactEmail
     *
     * @param string|null $clientContactEmail Client's contact person email
     *
     * @return self
     */
    public function setClientContactEmail($clientContactEmail)
    {
        if (is_null($clientContactEmail)) {
            array_push($this->openAPINullablesSetToNull, 'clientContactEmail');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('clientContactEmail', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['clientContactEmail'] = $clientContactEmail;

        return $this;
    }

    /**
     * Gets dueDate
     *
     * @return \DateTime|null
     */
    public function getDueDate()
    {
        return $this->container['dueDate'];
    }

    /**
     * Sets dueDate
     *
     * @param \DateTime|null $dueDate Get approval by
     *
     * @return self
     */
    public function setDueDate($dueDate)
    {
        if (is_null($dueDate)) {
            array_push($this->openAPINullablesSetToNull, 'dueDate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('dueDate', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['dueDate'] = $dueDate;

        return $this;
    }

    /**
     * Gets cost
     *
     * @return float|null
     */
    public function getCost()
    {
        return $this->container['cost'];
    }

    /**
     * Sets cost
     *
     * @param float|null $cost Cost
     *
     * @return self
     */
    public function setCost($cost)
    {
        if (is_null($cost)) {
            array_push($this->openAPINullablesSetToNull, 'cost');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cost', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['cost'] = $cost;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string|null
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string|null $currency Currency
     *
     * @return self
     */
    public function setCurrency($currency)
    {
        if (is_null($currency)) {
            array_push($this->openAPINullablesSetToNull, 'currency');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('currency', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets approvalStatus
     *
     * @return \SmartCat\Model\ApprovalStatus|null
     */
    public function getApprovalStatus()
    {
        return $this->container['approvalStatus'];
    }

    /**
     * Sets approvalStatus
     *
     * @param \SmartCat\Model\ApprovalStatus|null $approvalStatus approvalStatus
     *
     * @return self
     */
    public function setApprovalStatus($approvalStatus)
    {
        if (is_null($approvalStatus)) {
            throw new \InvalidArgumentException('non-nullable approvalStatus cannot be null');
        }
        $this->container['approvalStatus'] = $approvalStatus;

        return $this;
    }

    /**
     * Gets approvalStatusModificationDate
     *
     * @return \DateTime|null
     */
    public function getApprovalStatusModificationDate()
    {
        return $this->container['approvalStatusModificationDate'];
    }

    /**
     * Sets approvalStatusModificationDate
     *
     * @param \DateTime|null $approvalStatusModificationDate Date of the quote approval status change
     *
     * @return self
     */
    public function setApprovalStatusModificationDate($approvalStatusModificationDate)
    {
        if (is_null($approvalStatusModificationDate)) {
            array_push($this->openAPINullablesSetToNull, 'approvalStatusModificationDate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('approvalStatusModificationDate', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['approvalStatusModificationDate'] = $approvalStatusModificationDate;

        return $this;
    }

    /**
     * Gets paymentStatus
     *
     * @return \SmartCat\Model\QuotePaymentStatus|null
     */
    public function getPaymentStatus()
    {
        return $this->container['paymentStatus'];
    }

    /**
     * Sets paymentStatus
     *
     * @param \SmartCat\Model\QuotePaymentStatus|null $paymentStatus paymentStatus
     *
     * @return self
     */
    public function setPaymentStatus($paymentStatus)
    {
        if (is_null($paymentStatus)) {
            throw new \InvalidArgumentException('non-nullable paymentStatus cannot be null');
        }
        $this->container['paymentStatus'] = $paymentStatus;

        return $this;
    }

    /**
     * Gets clientId
     *
     * @return string|null
     */
    public function getClientId()
    {
        return $this->container['clientId'];
    }

    /**
     * Sets clientId
     *
     * @param string|null $clientId Project client ID
     *
     * @return self
     */
    public function setClientId($clientId)
    {
        if (is_null($clientId)) {
            array_push($this->openAPINullablesSetToNull, 'clientId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('clientId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['clientId'] = $clientId;

        return $this;
    }

    /**
     * Gets externalFileDetalization
     *
     * @return \SmartCat\Model\ExternalFileDetalizationModel|null
     */
    public function getExternalFileDetalization()
    {
        return $this->container['externalFileDetalization'];
    }

    /**
     * Sets externalFileDetalization
     *
     * @param \SmartCat\Model\ExternalFileDetalizationModel|null $externalFileDetalization externalFileDetalization
     *
     * @return self
     */
    public function setExternalFileDetalization($externalFileDetalization)
    {
        if (is_null($externalFileDetalization)) {
            throw new \InvalidArgumentException('non-nullable externalFileDetalization cannot be null');
        }
        $this->container['externalFileDetalization'] = $externalFileDetalization;

        return $this;
    }

    /**
     * Gets servicesDetalization
     *
     * @return \SmartCat\Model\ServicesDetalizationModel|null
     */
    public function getServicesDetalization()
    {
        return $this->container['servicesDetalization'];
    }

    /**
     * Sets servicesDetalization
     *
     * @param \SmartCat\Model\ServicesDetalizationModel|null $servicesDetalization servicesDetalization
     *
     * @return self
     */
    public function setServicesDetalization($servicesDetalization)
    {
        if (is_null($servicesDetalization)) {
            throw new \InvalidArgumentException('non-nullable servicesDetalization cannot be null');
        }
        $this->container['servicesDetalization'] = $servicesDetalization;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


