<?php
/**
 * CreateProjectModel
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  SmartCat
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Smartcat API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SmartCat\Model;

use \ArrayAccess;
use \SmartCat\ObjectSerializer;

/**
 * CreateProjectModel Class Doc Comment
 *
 * @category Class
 * @description Project creation model
 * @package  SmartCat
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CreateProjectModel implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CreateProjectModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'type' => '\SmartCat\Model\ProjectType',
        'number' => '\SmartCat\Model\CreateProjectNumberModel',
        'description' => 'string',
        'deadline' => '\DateTime',
        'sourceLanguage' => 'string',
        'targetLanguages' => 'string[]',
        'creatorUserId' => 'string',
        'domainId' => 'int',
        'clientId' => 'string',
        'vendorAccountIds' => 'string[]',
        'assignToVendor' => 'bool',
        'useMT' => 'bool',
        'pretranslate' => 'bool',
        'translationMemoryName' => 'string',
        'useTranslationMemory' => 'bool',
        'minTranslationAssuranceLevel' => '\SmartCat\Model\IntegrationApiTMTranslationAssuranceLevel',
        'autoPropagateRepetitions' => 'bool',
        'documentProperties' => '\SmartCat\Model\CreateDocumentPropertyModel[]',
        'workflowStages' => '\SmartCat\Model\StageType[]',
        'isForTesting' => 'bool',
        'externalTag' => 'string',
        'specializations' => '\SmartCat\Model\Specialization[]',
        'customFieldValues' => 'array<string,string>'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'type' => null,
        'number' => null,
        'description' => null,
        'deadline' => 'date-time',
        'sourceLanguage' => null,
        'targetLanguages' => null,
        'creatorUserId' => null,
        'domainId' => 'int32',
        'clientId' => 'uuid',
        'vendorAccountIds' => 'uuid',
        'assignToVendor' => null,
        'useMT' => null,
        'pretranslate' => null,
        'translationMemoryName' => null,
        'useTranslationMemory' => null,
        'minTranslationAssuranceLevel' => null,
        'autoPropagateRepetitions' => null,
        'documentProperties' => null,
        'workflowStages' => null,
        'isForTesting' => null,
        'externalTag' => null,
        'specializations' => null,
        'customFieldValues' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'name' => true,
		'type' => false,
		'number' => false,
		'description' => true,
		'deadline' => true,
		'sourceLanguage' => true,
		'targetLanguages' => true,
		'creatorUserId' => true,
		'domainId' => true,
		'clientId' => true,
		'vendorAccountIds' => true,
		'assignToVendor' => false,
		'useMT' => false,
		'pretranslate' => false,
		'translationMemoryName' => true,
		'useTranslationMemory' => true,
		'minTranslationAssuranceLevel' => false,
		'autoPropagateRepetitions' => true,
		'documentProperties' => true,
		'workflowStages' => true,
		'isForTesting' => false,
		'externalTag' => true,
		'specializations' => true,
		'customFieldValues' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'type' => 'type',
        'number' => 'number',
        'description' => 'description',
        'deadline' => 'deadline',
        'sourceLanguage' => 'sourceLanguage',
        'targetLanguages' => 'targetLanguages',
        'creatorUserId' => 'creatorUserId',
        'domainId' => 'domainId',
        'clientId' => 'clientId',
        'vendorAccountIds' => 'vendorAccountIds',
        'assignToVendor' => 'assignToVendor',
        'useMT' => 'useMT',
        'pretranslate' => 'pretranslate',
        'translationMemoryName' => 'translationMemoryName',
        'useTranslationMemory' => 'useTranslationMemory',
        'minTranslationAssuranceLevel' => 'minTranslationAssuranceLevel',
        'autoPropagateRepetitions' => 'autoPropagateRepetitions',
        'documentProperties' => 'documentProperties',
        'workflowStages' => 'workflowStages',
        'isForTesting' => 'isForTesting',
        'externalTag' => 'externalTag',
        'specializations' => 'specializations',
        'customFieldValues' => 'customFieldValues'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'type' => 'setType',
        'number' => 'setNumber',
        'description' => 'setDescription',
        'deadline' => 'setDeadline',
        'sourceLanguage' => 'setSourceLanguage',
        'targetLanguages' => 'setTargetLanguages',
        'creatorUserId' => 'setCreatorUserId',
        'domainId' => 'setDomainId',
        'clientId' => 'setClientId',
        'vendorAccountIds' => 'setVendorAccountIds',
        'assignToVendor' => 'setAssignToVendor',
        'useMT' => 'setUseMT',
        'pretranslate' => 'setPretranslate',
        'translationMemoryName' => 'setTranslationMemoryName',
        'useTranslationMemory' => 'setUseTranslationMemory',
        'minTranslationAssuranceLevel' => 'setMinTranslationAssuranceLevel',
        'autoPropagateRepetitions' => 'setAutoPropagateRepetitions',
        'documentProperties' => 'setDocumentProperties',
        'workflowStages' => 'setWorkflowStages',
        'isForTesting' => 'setIsForTesting',
        'externalTag' => 'setExternalTag',
        'specializations' => 'setSpecializations',
        'customFieldValues' => 'setCustomFieldValues'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'type' => 'getType',
        'number' => 'getNumber',
        'description' => 'getDescription',
        'deadline' => 'getDeadline',
        'sourceLanguage' => 'getSourceLanguage',
        'targetLanguages' => 'getTargetLanguages',
        'creatorUserId' => 'getCreatorUserId',
        'domainId' => 'getDomainId',
        'clientId' => 'getClientId',
        'vendorAccountIds' => 'getVendorAccountIds',
        'assignToVendor' => 'getAssignToVendor',
        'useMT' => 'getUseMT',
        'pretranslate' => 'getPretranslate',
        'translationMemoryName' => 'getTranslationMemoryName',
        'useTranslationMemory' => 'getUseTranslationMemory',
        'minTranslationAssuranceLevel' => 'getMinTranslationAssuranceLevel',
        'autoPropagateRepetitions' => 'getAutoPropagateRepetitions',
        'documentProperties' => 'getDocumentProperties',
        'workflowStages' => 'getWorkflowStages',
        'isForTesting' => 'getIsForTesting',
        'externalTag' => 'getExternalTag',
        'specializations' => 'getSpecializations',
        'customFieldValues' => 'getCustomFieldValues'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('number', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('deadline', $data ?? [], null);
        $this->setIfExists('sourceLanguage', $data ?? [], null);
        $this->setIfExists('targetLanguages', $data ?? [], null);
        $this->setIfExists('creatorUserId', $data ?? [], null);
        $this->setIfExists('domainId', $data ?? [], null);
        $this->setIfExists('clientId', $data ?? [], null);
        $this->setIfExists('vendorAccountIds', $data ?? [], null);
        $this->setIfExists('assignToVendor', $data ?? [], null);
        $this->setIfExists('useMT', $data ?? [], null);
        $this->setIfExists('pretranslate', $data ?? [], null);
        $this->setIfExists('translationMemoryName', $data ?? [], null);
        $this->setIfExists('useTranslationMemory', $data ?? [], null);
        $this->setIfExists('minTranslationAssuranceLevel', $data ?? [], null);
        $this->setIfExists('autoPropagateRepetitions', $data ?? [], null);
        $this->setIfExists('documentProperties', $data ?? [], null);
        $this->setIfExists('workflowStages', $data ?? [], null);
        $this->setIfExists('isForTesting', $data ?? [], null);
        $this->setIfExists('externalTag', $data ?? [], null);
        $this->setIfExists('specializations', $data ?? [], null);
        $this->setIfExists('customFieldValues', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Project name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            array_push($this->openAPINullablesSetToNull, 'name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets type
     *
     * @return \SmartCat\Model\ProjectType|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param \SmartCat\Model\ProjectType|null $type type
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets number
     *
     * @return \SmartCat\Model\CreateProjectNumberModel|null
     */
    public function getNumber()
    {
        return $this->container['number'];
    }

    /**
     * Sets number
     *
     * @param \SmartCat\Model\CreateProjectNumberModel|null $number number
     *
     * @return self
     */
    public function setNumber($number)
    {
        if (is_null($number)) {
            throw new \InvalidArgumentException('non-nullable number cannot be null');
        }
        $this->container['number'] = $number;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description Project description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            array_push($this->openAPINullablesSetToNull, 'description');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('description', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets deadline
     *
     * @return \DateTime|null
     */
    public function getDeadline()
    {
        return $this->container['deadline'];
    }

    /**
     * Sets deadline
     *
     * @param \DateTime|null $deadline Project deadline
     *
     * @return self
     */
    public function setDeadline($deadline)
    {
        if (is_null($deadline)) {
            array_push($this->openAPINullablesSetToNull, 'deadline');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('deadline', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['deadline'] = $deadline;

        return $this;
    }

    /**
     * Gets sourceLanguage
     *
     * @return string|null
     */
    public function getSourceLanguage()
    {
        return $this->container['sourceLanguage'];
    }

    /**
     * Sets sourceLanguage
     *
     * @param string|null $sourceLanguage Project source language
     *
     * @return self
     */
    public function setSourceLanguage($sourceLanguage)
    {
        if (is_null($sourceLanguage)) {
            array_push($this->openAPINullablesSetToNull, 'sourceLanguage');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sourceLanguage', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['sourceLanguage'] = $sourceLanguage;

        return $this;
    }

    /**
     * Gets targetLanguages
     *
     * @return string[]|null
     */
    public function getTargetLanguages()
    {
        return $this->container['targetLanguages'];
    }

    /**
     * Sets targetLanguages
     *
     * @param string[]|null $targetLanguages Project target languages
     *
     * @return self
     */
    public function setTargetLanguages($targetLanguages)
    {
        if (is_null($targetLanguages)) {
            array_push($this->openAPINullablesSetToNull, 'targetLanguages');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('targetLanguages', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['targetLanguages'] = $targetLanguages;

        return $this;
    }

    /**
     * Gets creatorUserId
     *
     * @return string|null
     */
    public function getCreatorUserId()
    {
        return $this->container['creatorUserId'];
    }

    /**
     * Sets creatorUserId
     *
     * @param string|null $creatorUserId User identifier who creates the project
     *
     * @return self
     */
    public function setCreatorUserId($creatorUserId)
    {
        if (is_null($creatorUserId)) {
            array_push($this->openAPINullablesSetToNull, 'creatorUserId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('creatorUserId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['creatorUserId'] = $creatorUserId;

        return $this;
    }

    /**
     * Gets domainId
     *
     * @return int|null
     */
    public function getDomainId()
    {
        return $this->container['domainId'];
    }

    /**
     * Sets domainId
     *
     * @param int|null $domainId Project group ID
     *
     * @return self
     */
    public function setDomainId($domainId)
    {
        if (is_null($domainId)) {
            array_push($this->openAPINullablesSetToNull, 'domainId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('domainId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['domainId'] = $domainId;

        return $this;
    }

    /**
     * Gets clientId
     *
     * @return string|null
     */
    public function getClientId()
    {
        return $this->container['clientId'];
    }

    /**
     * Sets clientId
     *
     * @param string|null $clientId Client ID
     *
     * @return self
     */
    public function setClientId($clientId)
    {
        if (is_null($clientId)) {
            array_push($this->openAPINullablesSetToNull, 'clientId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('clientId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['clientId'] = $clientId;

        return $this;
    }

    /**
     * Gets vendorAccountIds
     *
     * @return string[]|null
     */
    public function getVendorAccountIds()
    {
        return $this->container['vendorAccountIds'];
    }

    /**
     * Sets vendorAccountIds
     *
     * @param string[]|null $vendorAccountIds Vendor accounts IDs
     *
     * @return self
     */
    public function setVendorAccountIds($vendorAccountIds)
    {
        if (is_null($vendorAccountIds)) {
            array_push($this->openAPINullablesSetToNull, 'vendorAccountIds');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('vendorAccountIds', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['vendorAccountIds'] = $vendorAccountIds;

        return $this;
    }

    /**
     * Gets assignToVendor
     *
     * @return bool|null
     */
    public function getAssignToVendor()
    {
        return $this->container['assignToVendor'];
    }

    /**
     * Sets assignToVendor
     *
     * @param bool|null $assignToVendor Project assigned to a vendor
     *
     * @return self
     */
    public function setAssignToVendor($assignToVendor)
    {
        if (is_null($assignToVendor)) {
            throw new \InvalidArgumentException('non-nullable assignToVendor cannot be null');
        }
        $this->container['assignToVendor'] = $assignToVendor;

        return $this;
    }

    /**
     * Gets useMT
     *
     * @return bool|null
     */
    public function getUseMT()
    {
        return $this->container['useMT'];
    }

    /**
     * Sets useMT
     *
     * @param bool|null $useMT Specifies whether the project uses MT
     *
     * @return self
     */
    public function setUseMT($useMT)
    {
        if (is_null($useMT)) {
            throw new \InvalidArgumentException('non-nullable useMT cannot be null');
        }
        $this->container['useMT'] = $useMT;

        return $this;
    }

    /**
     * Gets pretranslate
     *
     * @return bool|null
     */
    public function getPretranslate()
    {
        return $this->container['pretranslate'];
    }

    /**
     * Sets pretranslate
     *
     * @param bool|null $pretranslate Specifies whether to enable the automatic pretranslation. If yes, two pretranslation rules are applied:  1. For the TM with the Write permission  2. For the MT, if enabled
     *
     * @return self
     */
    public function setPretranslate($pretranslate)
    {
        if (is_null($pretranslate)) {
            throw new \InvalidArgumentException('non-nullable pretranslate cannot be null');
        }
        $this->container['pretranslate'] = $pretranslate;

        return $this;
    }

    /**
     * Gets translationMemoryName
     *
     * @return string|null
     */
    public function getTranslationMemoryName()
    {
        return $this->container['translationMemoryName'];
    }

    /**
     * Sets translationMemoryName
     *
     * @param string|null $translationMemoryName The name of the account TM that will have both Write and Read permissions
     *
     * @return self
     */
    public function setTranslationMemoryName($translationMemoryName)
    {
        if (is_null($translationMemoryName)) {
            array_push($this->openAPINullablesSetToNull, 'translationMemoryName');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('translationMemoryName', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['translationMemoryName'] = $translationMemoryName;

        return $this;
    }

    /**
     * Gets useTranslationMemory
     *
     * @return bool|null
     */
    public function getUseTranslationMemory()
    {
        return $this->container['useTranslationMemory'];
    }

    /**
     * Sets useTranslationMemory
     *
     * @param bool|null $useTranslationMemory Specifies whether to enable read and write TM for the project
     *
     * @return self
     */
    public function setUseTranslationMemory($useTranslationMemory)
    {
        if (is_null($useTranslationMemory)) {
            array_push($this->openAPINullablesSetToNull, 'useTranslationMemory');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('useTranslationMemory', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['useTranslationMemory'] = $useTranslationMemory;

        return $this;
    }

    /**
     * Gets minTranslationAssuranceLevel
     *
     * @return \SmartCat\Model\IntegrationApiTMTranslationAssuranceLevel|null
     */
    public function getMinTranslationAssuranceLevel()
    {
        return $this->container['minTranslationAssuranceLevel'];
    }

    /**
     * Sets minTranslationAssuranceLevel
     *
     * @param \SmartCat\Model\IntegrationApiTMTranslationAssuranceLevel|null $minTranslationAssuranceLevel minTranslationAssuranceLevel
     *
     * @return self
     */
    public function setMinTranslationAssuranceLevel($minTranslationAssuranceLevel)
    {
        if (is_null($minTranslationAssuranceLevel)) {
            throw new \InvalidArgumentException('non-nullable minTranslationAssuranceLevel cannot be null');
        }
        $this->container['minTranslationAssuranceLevel'] = $minTranslationAssuranceLevel;

        return $this;
    }

    /**
     * Gets autoPropagateRepetitions
     *
     * @return bool|null
     */
    public function getAutoPropagateRepetitions()
    {
        return $this->container['autoPropagateRepetitions'];
    }

    /**
     * Sets autoPropagateRepetitions
     *
     * @param bool|null $autoPropagateRepetitions Specifies whether to enable auto-propagation of repeated segments at the project level (default is True)
     *
     * @return self
     */
    public function setAutoPropagateRepetitions($autoPropagateRepetitions)
    {
        if (is_null($autoPropagateRepetitions)) {
            array_push($this->openAPINullablesSetToNull, 'autoPropagateRepetitions');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('autoPropagateRepetitions', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['autoPropagateRepetitions'] = $autoPropagateRepetitions;

        return $this;
    }

    /**
     * Gets documentProperties
     *
     * @return \SmartCat\Model\CreateDocumentPropertyModel[]|null
     */
    public function getDocumentProperties()
    {
        return $this->container['documentProperties'];
    }

    /**
     * Sets documentProperties
     *
     * @param \SmartCat\Model\CreateDocumentPropertyModel[]|null $documentProperties Document properties as they are ordered in a request. This parameter is optional
     *
     * @return self
     */
    public function setDocumentProperties($documentProperties)
    {
        if (is_null($documentProperties)) {
            array_push($this->openAPINullablesSetToNull, 'documentProperties');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('documentProperties', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['documentProperties'] = $documentProperties;

        return $this;
    }

    /**
     * Gets workflowStages
     *
     * @return \SmartCat\Model\StageType[]|null
     */
    public function getWorkflowStages()
    {
        return $this->container['workflowStages'];
    }

    /**
     * Sets workflowStages
     *
     * @param \SmartCat\Model\StageType[]|null $workflowStages Project workflow stages for the created project. This parameter is optional
     *
     * @return self
     */
    public function setWorkflowStages($workflowStages)
    {
        if (is_null($workflowStages)) {
            array_push($this->openAPINullablesSetToNull, 'workflowStages');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('workflowStages', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['workflowStages'] = $workflowStages;

        return $this;
    }

    /**
     * Gets isForTesting
     *
     * @return bool|null
     */
    public function getIsForTesting()
    {
        return $this->container['isForTesting'];
    }

    /**
     * Sets isForTesting
     *
     * @param bool|null $isForTesting Specifies whether the project is used for testing
     *
     * @return self
     */
    public function setIsForTesting($isForTesting)
    {
        if (is_null($isForTesting)) {
            throw new \InvalidArgumentException('non-nullable isForTesting cannot be null');
        }
        $this->container['isForTesting'] = $isForTesting;

        return $this;
    }

    /**
     * Gets externalTag
     *
     * @return string|null
     */
    public function getExternalTag()
    {
        return $this->container['externalTag'];
    }

    /**
     * Sets externalTag
     *
     * @param string|null $externalTag External system tag
     *
     * @return self
     */
    public function setExternalTag($externalTag)
    {
        if (is_null($externalTag)) {
            array_push($this->openAPINullablesSetToNull, 'externalTag');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('externalTag', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['externalTag'] = $externalTag;

        return $this;
    }

    /**
     * Gets specializations
     *
     * @return \SmartCat\Model\Specialization[]|null
     */
    public function getSpecializations()
    {
        return $this->container['specializations'];
    }

    /**
     * Sets specializations
     *
     * @param \SmartCat\Model\Specialization[]|null $specializations Specializations
     *
     * @return self
     */
    public function setSpecializations($specializations)
    {
        if (is_null($specializations)) {
            array_push($this->openAPINullablesSetToNull, 'specializations');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('specializations', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['specializations'] = $specializations;

        return $this;
    }

    /**
     * Gets customFieldValues
     *
     * @return array<string,string>|null
     */
    public function getCustomFieldValues()
    {
        return $this->container['customFieldValues'];
    }

    /**
     * Sets customFieldValues
     *
     * @param array<string,string>|null $customFieldValues Custom field values
     *
     * @return self
     */
    public function setCustomFieldValues($customFieldValues)
    {
        if (is_null($customFieldValues)) {
            array_push($this->openAPINullablesSetToNull, 'customFieldValues');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('customFieldValues', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['customFieldValues'] = $customFieldValues;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


