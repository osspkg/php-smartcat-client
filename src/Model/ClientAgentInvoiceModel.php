<?php
/**
 * ClientAgentInvoiceModel
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  SmartCat
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Smartcat API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SmartCat\Model;

use \ArrayAccess;
use \SmartCat\ObjectSerializer;

/**
 * ClientAgentInvoiceModel Class Doc Comment
 *
 * @category Class
 * @package  SmartCat
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ClientAgentInvoiceModel implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ClientAgentInvoiceModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'number' => 'string',
        'externalNumber' => 'string',
        'payerLegalName' => 'string',
        'payerVat' => 'string',
        'payerKpp' => 'string',
        'status' => 'string',
        'dateCreated' => '\DateTime',
        'datePaid' => '\DateTime',
        'dueDate' => '\DateTime',
        'jobs' => '\SmartCat\Model\ClientAgentInvoiceJobModel[]',
        'currency' => 'string',
        'totalCost' => 'float',
        'isInternalClient' => 'bool',
        'paymentDestination' => '\SmartCat\Model\InvoicePaymentReceiveDestination',
        'bankRequisites' => '\SmartCat\Model\BankRequisitesModel'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'number' => null,
        'externalNumber' => null,
        'payerLegalName' => null,
        'payerVat' => null,
        'payerKpp' => null,
        'status' => null,
        'dateCreated' => 'date-time',
        'datePaid' => 'date-time',
        'dueDate' => 'date-time',
        'jobs' => null,
        'currency' => null,
        'totalCost' => 'double',
        'isInternalClient' => null,
        'paymentDestination' => null,
        'bankRequisites' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => true,
		'number' => true,
		'externalNumber' => true,
		'payerLegalName' => true,
		'payerVat' => true,
		'payerKpp' => true,
		'status' => true,
		'dateCreated' => false,
		'datePaid' => true,
		'dueDate' => true,
		'jobs' => true,
		'currency' => true,
		'totalCost' => false,
		'isInternalClient' => false,
		'paymentDestination' => false,
		'bankRequisites' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'number' => 'number',
        'externalNumber' => 'externalNumber',
        'payerLegalName' => 'payerLegalName',
        'payerVat' => 'payerVat',
        'payerKpp' => 'payerKpp',
        'status' => 'status',
        'dateCreated' => 'dateCreated',
        'datePaid' => 'datePaid',
        'dueDate' => 'dueDate',
        'jobs' => 'jobs',
        'currency' => 'currency',
        'totalCost' => 'totalCost',
        'isInternalClient' => 'isInternalClient',
        'paymentDestination' => 'paymentDestination',
        'bankRequisites' => 'bankRequisites'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'number' => 'setNumber',
        'externalNumber' => 'setExternalNumber',
        'payerLegalName' => 'setPayerLegalName',
        'payerVat' => 'setPayerVat',
        'payerKpp' => 'setPayerKpp',
        'status' => 'setStatus',
        'dateCreated' => 'setDateCreated',
        'datePaid' => 'setDatePaid',
        'dueDate' => 'setDueDate',
        'jobs' => 'setJobs',
        'currency' => 'setCurrency',
        'totalCost' => 'setTotalCost',
        'isInternalClient' => 'setIsInternalClient',
        'paymentDestination' => 'setPaymentDestination',
        'bankRequisites' => 'setBankRequisites'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'number' => 'getNumber',
        'externalNumber' => 'getExternalNumber',
        'payerLegalName' => 'getPayerLegalName',
        'payerVat' => 'getPayerVat',
        'payerKpp' => 'getPayerKpp',
        'status' => 'getStatus',
        'dateCreated' => 'getDateCreated',
        'datePaid' => 'getDatePaid',
        'dueDate' => 'getDueDate',
        'jobs' => 'getJobs',
        'currency' => 'getCurrency',
        'totalCost' => 'getTotalCost',
        'isInternalClient' => 'getIsInternalClient',
        'paymentDestination' => 'getPaymentDestination',
        'bankRequisites' => 'getBankRequisites'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('number', $data ?? [], null);
        $this->setIfExists('externalNumber', $data ?? [], null);
        $this->setIfExists('payerLegalName', $data ?? [], null);
        $this->setIfExists('payerVat', $data ?? [], null);
        $this->setIfExists('payerKpp', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('dateCreated', $data ?? [], null);
        $this->setIfExists('datePaid', $data ?? [], null);
        $this->setIfExists('dueDate', $data ?? [], null);
        $this->setIfExists('jobs', $data ?? [], null);
        $this->setIfExists('currency', $data ?? [], null);
        $this->setIfExists('totalCost', $data ?? [], null);
        $this->setIfExists('isInternalClient', $data ?? [], null);
        $this->setIfExists('paymentDestination', $data ?? [], null);
        $this->setIfExists('bankRequisites', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            array_push($this->openAPINullablesSetToNull, 'id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets number
     *
     * @return string|null
     */
    public function getNumber()
    {
        return $this->container['number'];
    }

    /**
     * Sets number
     *
     * @param string|null $number number
     *
     * @return self
     */
    public function setNumber($number)
    {
        if (is_null($number)) {
            array_push($this->openAPINullablesSetToNull, 'number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['number'] = $number;

        return $this;
    }

    /**
     * Gets externalNumber
     *
     * @return string|null
     */
    public function getExternalNumber()
    {
        return $this->container['externalNumber'];
    }

    /**
     * Sets externalNumber
     *
     * @param string|null $externalNumber externalNumber
     *
     * @return self
     */
    public function setExternalNumber($externalNumber)
    {
        if (is_null($externalNumber)) {
            array_push($this->openAPINullablesSetToNull, 'externalNumber');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('externalNumber', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['externalNumber'] = $externalNumber;

        return $this;
    }

    /**
     * Gets payerLegalName
     *
     * @return string|null
     */
    public function getPayerLegalName()
    {
        return $this->container['payerLegalName'];
    }

    /**
     * Sets payerLegalName
     *
     * @param string|null $payerLegalName payerLegalName
     *
     * @return self
     */
    public function setPayerLegalName($payerLegalName)
    {
        if (is_null($payerLegalName)) {
            array_push($this->openAPINullablesSetToNull, 'payerLegalName');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('payerLegalName', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['payerLegalName'] = $payerLegalName;

        return $this;
    }

    /**
     * Gets payerVat
     *
     * @return string|null
     */
    public function getPayerVat()
    {
        return $this->container['payerVat'];
    }

    /**
     * Sets payerVat
     *
     * @param string|null $payerVat payerVat
     *
     * @return self
     */
    public function setPayerVat($payerVat)
    {
        if (is_null($payerVat)) {
            array_push($this->openAPINullablesSetToNull, 'payerVat');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('payerVat', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['payerVat'] = $payerVat;

        return $this;
    }

    /**
     * Gets payerKpp
     *
     * @return string|null
     */
    public function getPayerKpp()
    {
        return $this->container['payerKpp'];
    }

    /**
     * Sets payerKpp
     *
     * @param string|null $payerKpp payerKpp
     *
     * @return self
     */
    public function setPayerKpp($payerKpp)
    {
        if (is_null($payerKpp)) {
            array_push($this->openAPINullablesSetToNull, 'payerKpp');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('payerKpp', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['payerKpp'] = $payerKpp;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            array_push($this->openAPINullablesSetToNull, 'status');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('status', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets dateCreated
     *
     * @return \DateTime|null
     */
    public function getDateCreated()
    {
        return $this->container['dateCreated'];
    }

    /**
     * Sets dateCreated
     *
     * @param \DateTime|null $dateCreated dateCreated
     *
     * @return self
     */
    public function setDateCreated($dateCreated)
    {
        if (is_null($dateCreated)) {
            throw new \InvalidArgumentException('non-nullable dateCreated cannot be null');
        }
        $this->container['dateCreated'] = $dateCreated;

        return $this;
    }

    /**
     * Gets datePaid
     *
     * @return \DateTime|null
     */
    public function getDatePaid()
    {
        return $this->container['datePaid'];
    }

    /**
     * Sets datePaid
     *
     * @param \DateTime|null $datePaid datePaid
     *
     * @return self
     */
    public function setDatePaid($datePaid)
    {
        if (is_null($datePaid)) {
            array_push($this->openAPINullablesSetToNull, 'datePaid');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('datePaid', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['datePaid'] = $datePaid;

        return $this;
    }

    /**
     * Gets dueDate
     *
     * @return \DateTime|null
     */
    public function getDueDate()
    {
        return $this->container['dueDate'];
    }

    /**
     * Sets dueDate
     *
     * @param \DateTime|null $dueDate dueDate
     *
     * @return self
     */
    public function setDueDate($dueDate)
    {
        if (is_null($dueDate)) {
            array_push($this->openAPINullablesSetToNull, 'dueDate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('dueDate', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['dueDate'] = $dueDate;

        return $this;
    }

    /**
     * Gets jobs
     *
     * @return \SmartCat\Model\ClientAgentInvoiceJobModel[]|null
     */
    public function getJobs()
    {
        return $this->container['jobs'];
    }

    /**
     * Sets jobs
     *
     * @param \SmartCat\Model\ClientAgentInvoiceJobModel[]|null $jobs jobs
     *
     * @return self
     */
    public function setJobs($jobs)
    {
        if (is_null($jobs)) {
            array_push($this->openAPINullablesSetToNull, 'jobs');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('jobs', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['jobs'] = $jobs;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string|null
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string|null $currency currency
     *
     * @return self
     */
    public function setCurrency($currency)
    {
        if (is_null($currency)) {
            array_push($this->openAPINullablesSetToNull, 'currency');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('currency', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets totalCost
     *
     * @return float|null
     */
    public function getTotalCost()
    {
        return $this->container['totalCost'];
    }

    /**
     * Sets totalCost
     *
     * @param float|null $totalCost totalCost
     *
     * @return self
     */
    public function setTotalCost($totalCost)
    {
        if (is_null($totalCost)) {
            throw new \InvalidArgumentException('non-nullable totalCost cannot be null');
        }
        $this->container['totalCost'] = $totalCost;

        return $this;
    }

    /**
     * Gets isInternalClient
     *
     * @return bool|null
     */
    public function getIsInternalClient()
    {
        return $this->container['isInternalClient'];
    }

    /**
     * Sets isInternalClient
     *
     * @param bool|null $isInternalClient isInternalClient
     *
     * @return self
     */
    public function setIsInternalClient($isInternalClient)
    {
        if (is_null($isInternalClient)) {
            throw new \InvalidArgumentException('non-nullable isInternalClient cannot be null');
        }
        $this->container['isInternalClient'] = $isInternalClient;

        return $this;
    }

    /**
     * Gets paymentDestination
     *
     * @return \SmartCat\Model\InvoicePaymentReceiveDestination|null
     */
    public function getPaymentDestination()
    {
        return $this->container['paymentDestination'];
    }

    /**
     * Sets paymentDestination
     *
     * @param \SmartCat\Model\InvoicePaymentReceiveDestination|null $paymentDestination paymentDestination
     *
     * @return self
     */
    public function setPaymentDestination($paymentDestination)
    {
        if (is_null($paymentDestination)) {
            throw new \InvalidArgumentException('non-nullable paymentDestination cannot be null');
        }
        $this->container['paymentDestination'] = $paymentDestination;

        return $this;
    }

    /**
     * Gets bankRequisites
     *
     * @return \SmartCat\Model\BankRequisitesModel|null
     */
    public function getBankRequisites()
    {
        return $this->container['bankRequisites'];
    }

    /**
     * Sets bankRequisites
     *
     * @param \SmartCat\Model\BankRequisitesModel|null $bankRequisites bankRequisites
     *
     * @return self
     */
    public function setBankRequisites($bankRequisites)
    {
        if (is_null($bankRequisites)) {
            throw new \InvalidArgumentException('non-nullable bankRequisites cannot be null');
        }
        $this->container['bankRequisites'] = $bankRequisites;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


