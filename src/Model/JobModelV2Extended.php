<?php
/**
 * JobModelV2Extended
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  SmartCat
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Smartcat API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SmartCat\Model;

use \ArrayAccess;
use \SmartCat\ObjectSerializer;

/**
 * JobModelV2Extended Class Doc Comment
 *
 * @category Class
 * @description Payment model
 * @package  SmartCat
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class JobModelV2Extended implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'JobModelV2Extended';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'invoiceNumber' => 'string',
        'supplierEmail' => 'string',
        'supplierName' => 'string',
        'supplierType' => '\SmartCat\Model\SupplierType',
        'serviceType' => 'string',
        'jobDescription' => 'string',
        'unitsType' => 'string',
        'unitsAmount' => 'float',
        'customerPricePerUnit' => 'float',
        'executivePricePerUnit' => 'float',
        'customerCurrency' => 'string',
        'executiveCurrency' => 'string',
        'customerCost' => 'float',
        'executiveCost' => 'float',
        'externalNumber' => 'string',
        'supplierId' => 'string',
        'status' => '\SmartCat\Model\JobStatus',
        'projectId' => 'string',
        'deadline' => '\DateTime',
        'sourceLanguage' => 'int',
        'targetLanguage' => 'int',
        'isPaidExternally' => 'bool',
        'documentId' => 'string',
        'stageId' => 'string',
        'verifiedDate' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'invoiceNumber' => null,
        'supplierEmail' => null,
        'supplierName' => null,
        'supplierType' => null,
        'serviceType' => null,
        'jobDescription' => null,
        'unitsType' => null,
        'unitsAmount' => 'double',
        'customerPricePerUnit' => 'double',
        'executivePricePerUnit' => 'double',
        'customerCurrency' => null,
        'executiveCurrency' => null,
        'customerCost' => 'double',
        'executiveCost' => 'double',
        'externalNumber' => null,
        'supplierId' => 'uuid',
        'status' => null,
        'projectId' => 'uuid',
        'deadline' => 'date-time',
        'sourceLanguage' => 'int32',
        'targetLanguage' => 'int32',
        'isPaidExternally' => null,
        'documentId' => null,
        'stageId' => null,
        'verifiedDate' => 'date-time'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => true,
		'invoiceNumber' => true,
		'supplierEmail' => true,
		'supplierName' => true,
		'supplierType' => false,
		'serviceType' => true,
		'jobDescription' => true,
		'unitsType' => true,
		'unitsAmount' => false,
		'customerPricePerUnit' => false,
		'executivePricePerUnit' => false,
		'customerCurrency' => true,
		'executiveCurrency' => true,
		'customerCost' => false,
		'executiveCost' => false,
		'externalNumber' => true,
		'supplierId' => true,
		'status' => false,
		'projectId' => true,
		'deadline' => true,
		'sourceLanguage' => true,
		'targetLanguage' => true,
		'isPaidExternally' => false,
		'documentId' => true,
		'stageId' => true,
		'verifiedDate' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'invoiceNumber' => 'invoiceNumber',
        'supplierEmail' => 'supplierEmail',
        'supplierName' => 'supplierName',
        'supplierType' => 'supplierType',
        'serviceType' => 'serviceType',
        'jobDescription' => 'jobDescription',
        'unitsType' => 'unitsType',
        'unitsAmount' => 'unitsAmount',
        'customerPricePerUnit' => 'customerPricePerUnit',
        'executivePricePerUnit' => 'executivePricePerUnit',
        'customerCurrency' => 'customerCurrency',
        'executiveCurrency' => 'executiveCurrency',
        'customerCost' => 'customerCost',
        'executiveCost' => 'executiveCost',
        'externalNumber' => 'externalNumber',
        'supplierId' => 'supplierId',
        'status' => 'status',
        'projectId' => 'projectId',
        'deadline' => 'deadline',
        'sourceLanguage' => 'sourceLanguage',
        'targetLanguage' => 'targetLanguage',
        'isPaidExternally' => 'isPaidExternally',
        'documentId' => 'documentId',
        'stageId' => 'stageId',
        'verifiedDate' => 'verifiedDate'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'invoiceNumber' => 'setInvoiceNumber',
        'supplierEmail' => 'setSupplierEmail',
        'supplierName' => 'setSupplierName',
        'supplierType' => 'setSupplierType',
        'serviceType' => 'setServiceType',
        'jobDescription' => 'setJobDescription',
        'unitsType' => 'setUnitsType',
        'unitsAmount' => 'setUnitsAmount',
        'customerPricePerUnit' => 'setCustomerPricePerUnit',
        'executivePricePerUnit' => 'setExecutivePricePerUnit',
        'customerCurrency' => 'setCustomerCurrency',
        'executiveCurrency' => 'setExecutiveCurrency',
        'customerCost' => 'setCustomerCost',
        'executiveCost' => 'setExecutiveCost',
        'externalNumber' => 'setExternalNumber',
        'supplierId' => 'setSupplierId',
        'status' => 'setStatus',
        'projectId' => 'setProjectId',
        'deadline' => 'setDeadline',
        'sourceLanguage' => 'setSourceLanguage',
        'targetLanguage' => 'setTargetLanguage',
        'isPaidExternally' => 'setIsPaidExternally',
        'documentId' => 'setDocumentId',
        'stageId' => 'setStageId',
        'verifiedDate' => 'setVerifiedDate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'invoiceNumber' => 'getInvoiceNumber',
        'supplierEmail' => 'getSupplierEmail',
        'supplierName' => 'getSupplierName',
        'supplierType' => 'getSupplierType',
        'serviceType' => 'getServiceType',
        'jobDescription' => 'getJobDescription',
        'unitsType' => 'getUnitsType',
        'unitsAmount' => 'getUnitsAmount',
        'customerPricePerUnit' => 'getCustomerPricePerUnit',
        'executivePricePerUnit' => 'getExecutivePricePerUnit',
        'customerCurrency' => 'getCustomerCurrency',
        'executiveCurrency' => 'getExecutiveCurrency',
        'customerCost' => 'getCustomerCost',
        'executiveCost' => 'getExecutiveCost',
        'externalNumber' => 'getExternalNumber',
        'supplierId' => 'getSupplierId',
        'status' => 'getStatus',
        'projectId' => 'getProjectId',
        'deadline' => 'getDeadline',
        'sourceLanguage' => 'getSourceLanguage',
        'targetLanguage' => 'getTargetLanguage',
        'isPaidExternally' => 'getIsPaidExternally',
        'documentId' => 'getDocumentId',
        'stageId' => 'getStageId',
        'verifiedDate' => 'getVerifiedDate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('invoiceNumber', $data ?? [], null);
        $this->setIfExists('supplierEmail', $data ?? [], null);
        $this->setIfExists('supplierName', $data ?? [], null);
        $this->setIfExists('supplierType', $data ?? [], null);
        $this->setIfExists('serviceType', $data ?? [], null);
        $this->setIfExists('jobDescription', $data ?? [], null);
        $this->setIfExists('unitsType', $data ?? [], null);
        $this->setIfExists('unitsAmount', $data ?? [], null);
        $this->setIfExists('customerPricePerUnit', $data ?? [], null);
        $this->setIfExists('executivePricePerUnit', $data ?? [], null);
        $this->setIfExists('customerCurrency', $data ?? [], null);
        $this->setIfExists('executiveCurrency', $data ?? [], null);
        $this->setIfExists('customerCost', $data ?? [], null);
        $this->setIfExists('executiveCost', $data ?? [], null);
        $this->setIfExists('externalNumber', $data ?? [], null);
        $this->setIfExists('supplierId', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('projectId', $data ?? [], null);
        $this->setIfExists('deadline', $data ?? [], null);
        $this->setIfExists('sourceLanguage', $data ?? [], null);
        $this->setIfExists('targetLanguage', $data ?? [], null);
        $this->setIfExists('isPaidExternally', $data ?? [], null);
        $this->setIfExists('documentId', $data ?? [], null);
        $this->setIfExists('stageId', $data ?? [], null);
        $this->setIfExists('verifiedDate', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id Task ID
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            array_push($this->openAPINullablesSetToNull, 'id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets invoiceNumber
     *
     * @return string|null
     */
    public function getInvoiceNumber()
    {
        return $this->container['invoiceNumber'];
    }

    /**
     * Sets invoiceNumber
     *
     * @param string|null $invoiceNumber Bank account number
     *
     * @return self
     */
    public function setInvoiceNumber($invoiceNumber)
    {
        if (is_null($invoiceNumber)) {
            array_push($this->openAPINullablesSetToNull, 'invoiceNumber');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('invoiceNumber', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['invoiceNumber'] = $invoiceNumber;

        return $this;
    }

    /**
     * Gets supplierEmail
     *
     * @return string|null
     */
    public function getSupplierEmail()
    {
        return $this->container['supplierEmail'];
    }

    /**
     * Sets supplierEmail
     *
     * @param string|null $supplierEmail Vendor email address
     *
     * @return self
     */
    public function setSupplierEmail($supplierEmail)
    {
        if (is_null($supplierEmail)) {
            array_push($this->openAPINullablesSetToNull, 'supplierEmail');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('supplierEmail', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['supplierEmail'] = $supplierEmail;

        return $this;
    }

    /**
     * Gets supplierName
     *
     * @return string|null
     */
    public function getSupplierName()
    {
        return $this->container['supplierName'];
    }

    /**
     * Sets supplierName
     *
     * @param string|null $supplierName Vendor name
     *
     * @return self
     */
    public function setSupplierName($supplierName)
    {
        if (is_null($supplierName)) {
            array_push($this->openAPINullablesSetToNull, 'supplierName');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('supplierName', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['supplierName'] = $supplierName;

        return $this;
    }

    /**
     * Gets supplierType
     *
     * @return \SmartCat\Model\SupplierType|null
     */
    public function getSupplierType()
    {
        return $this->container['supplierType'];
    }

    /**
     * Sets supplierType
     *
     * @param \SmartCat\Model\SupplierType|null $supplierType supplierType
     *
     * @return self
     */
    public function setSupplierType($supplierType)
    {
        if (is_null($supplierType)) {
            throw new \InvalidArgumentException('non-nullable supplierType cannot be null');
        }
        $this->container['supplierType'] = $supplierType;

        return $this;
    }

    /**
     * Gets serviceType
     *
     * @return string|null
     */
    public function getServiceType()
    {
        return $this->container['serviceType'];
    }

    /**
     * Sets serviceType
     *
     * @param string|null $serviceType Service type
     *
     * @return self
     */
    public function setServiceType($serviceType)
    {
        if (is_null($serviceType)) {
            array_push($this->openAPINullablesSetToNull, 'serviceType');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('serviceType', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['serviceType'] = $serviceType;

        return $this;
    }

    /**
     * Gets jobDescription
     *
     * @return string|null
     */
    public function getJobDescription()
    {
        return $this->container['jobDescription'];
    }

    /**
     * Sets jobDescription
     *
     * @param string|null $jobDescription Description: the name of a document or project
     *
     * @return self
     */
    public function setJobDescription($jobDescription)
    {
        if (is_null($jobDescription)) {
            array_push($this->openAPINullablesSetToNull, 'jobDescription');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('jobDescription', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['jobDescription'] = $jobDescription;

        return $this;
    }

    /**
     * Gets unitsType
     *
     * @return string|null
     */
    public function getUnitsType()
    {
        return $this->container['unitsType'];
    }

    /**
     * Sets unitsType
     *
     * @param string|null $unitsType Job unit type
     *
     * @return self
     */
    public function setUnitsType($unitsType)
    {
        if (is_null($unitsType)) {
            array_push($this->openAPINullablesSetToNull, 'unitsType');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('unitsType', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['unitsType'] = $unitsType;

        return $this;
    }

    /**
     * Gets unitsAmount
     *
     * @return float|null
     */
    public function getUnitsAmount()
    {
        return $this->container['unitsAmount'];
    }

    /**
     * Sets unitsAmount
     *
     * @param float|null $unitsAmount Job unit count
     *
     * @return self
     */
    public function setUnitsAmount($unitsAmount)
    {
        if (is_null($unitsAmount)) {
            throw new \InvalidArgumentException('non-nullable unitsAmount cannot be null');
        }
        $this->container['unitsAmount'] = $unitsAmount;

        return $this;
    }

    /**
     * Gets customerPricePerUnit
     *
     * @return float|null
     */
    public function getCustomerPricePerUnit()
    {
        return $this->container['customerPricePerUnit'];
    }

    /**
     * Sets customerPricePerUnit
     *
     * @param float|null $customerPricePerUnit Job unit price
     *
     * @return self
     */
    public function setCustomerPricePerUnit($customerPricePerUnit)
    {
        if (is_null($customerPricePerUnit)) {
            throw new \InvalidArgumentException('non-nullable customerPricePerUnit cannot be null');
        }
        $this->container['customerPricePerUnit'] = $customerPricePerUnit;

        return $this;
    }

    /**
     * Gets executivePricePerUnit
     *
     * @return float|null
     */
    public function getExecutivePricePerUnit()
    {
        return $this->container['executivePricePerUnit'];
    }

    /**
     * Sets executivePricePerUnit
     *
     * @param float|null $executivePricePerUnit Job unit price without commission
     *
     * @return self
     */
    public function setExecutivePricePerUnit($executivePricePerUnit)
    {
        if (is_null($executivePricePerUnit)) {
            throw new \InvalidArgumentException('non-nullable executivePricePerUnit cannot be null');
        }
        $this->container['executivePricePerUnit'] = $executivePricePerUnit;

        return $this;
    }

    /**
     * Gets customerCurrency
     *
     * @return string|null
     */
    public function getCustomerCurrency()
    {
        return $this->container['customerCurrency'];
    }

    /**
     * Sets customerCurrency
     *
     * @param string|null $customerCurrency Price and cost currency
     *
     * @return self
     */
    public function setCustomerCurrency($customerCurrency)
    {
        if (is_null($customerCurrency)) {
            array_push($this->openAPINullablesSetToNull, 'customerCurrency');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('customerCurrency', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['customerCurrency'] = $customerCurrency;

        return $this;
    }

    /**
     * Gets executiveCurrency
     *
     * @return string|null
     */
    public function getExecutiveCurrency()
    {
        return $this->container['executiveCurrency'];
    }

    /**
     * Sets executiveCurrency
     *
     * @param string|null $executiveCurrency Linguist's price and cost currency
     *
     * @return self
     */
    public function setExecutiveCurrency($executiveCurrency)
    {
        if (is_null($executiveCurrency)) {
            array_push($this->openAPINullablesSetToNull, 'executiveCurrency');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('executiveCurrency', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['executiveCurrency'] = $executiveCurrency;

        return $this;
    }

    /**
     * Gets customerCost
     *
     * @return float|null
     */
    public function getCustomerCost()
    {
        return $this->container['customerCost'];
    }

    /**
     * Sets customerCost
     *
     * @param float|null $customerCost Total job cost
     *
     * @return self
     */
    public function setCustomerCost($customerCost)
    {
        if (is_null($customerCost)) {
            throw new \InvalidArgumentException('non-nullable customerCost cannot be null');
        }
        $this->container['customerCost'] = $customerCost;

        return $this;
    }

    /**
     * Gets executiveCost
     *
     * @return float|null
     */
    public function getExecutiveCost()
    {
        return $this->container['executiveCost'];
    }

    /**
     * Sets executiveCost
     *
     * @param float|null $executiveCost Total job cost without commission
     *
     * @return self
     */
    public function setExecutiveCost($executiveCost)
    {
        if (is_null($executiveCost)) {
            throw new \InvalidArgumentException('non-nullable executiveCost cannot be null');
        }
        $this->container['executiveCost'] = $executiveCost;

        return $this;
    }

    /**
     * Gets externalNumber
     *
     * @return string|null
     */
    public function getExternalNumber()
    {
        return $this->container['externalNumber'];
    }

    /**
     * Sets externalNumber
     *
     * @param string|null $externalNumber External payment ID
     *
     * @return self
     */
    public function setExternalNumber($externalNumber)
    {
        if (is_null($externalNumber)) {
            array_push($this->openAPINullablesSetToNull, 'externalNumber');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('externalNumber', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['externalNumber'] = $externalNumber;

        return $this;
    }

    /**
     * Gets supplierId
     *
     * @return string|null
     */
    public function getSupplierId()
    {
        return $this->container['supplierId'];
    }

    /**
     * Sets supplierId
     *
     * @param string|null $supplierId Supplier ID
     *
     * @return self
     */
    public function setSupplierId($supplierId)
    {
        if (is_null($supplierId)) {
            array_push($this->openAPINullablesSetToNull, 'supplierId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('supplierId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['supplierId'] = $supplierId;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \SmartCat\Model\JobStatus|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \SmartCat\Model\JobStatus|null $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets projectId
     *
     * @return string|null
     */
    public function getProjectId()
    {
        return $this->container['projectId'];
    }

    /**
     * Sets projectId
     *
     * @param string|null $projectId Project ID
     *
     * @return self
     */
    public function setProjectId($projectId)
    {
        if (is_null($projectId)) {
            array_push($this->openAPINullablesSetToNull, 'projectId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('projectId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['projectId'] = $projectId;

        return $this;
    }

    /**
     * Gets deadline
     *
     * @return \DateTime|null
     */
    public function getDeadline()
    {
        return $this->container['deadline'];
    }

    /**
     * Sets deadline
     *
     * @param \DateTime|null $deadline Project deadline
     *
     * @return self
     */
    public function setDeadline($deadline)
    {
        if (is_null($deadline)) {
            array_push($this->openAPINullablesSetToNull, 'deadline');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('deadline', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['deadline'] = $deadline;

        return $this;
    }

    /**
     * Gets sourceLanguage
     *
     * @return int|null
     */
    public function getSourceLanguage()
    {
        return $this->container['sourceLanguage'];
    }

    /**
     * Sets sourceLanguage
     *
     * @param int|null $sourceLanguage Source language
     *
     * @return self
     */
    public function setSourceLanguage($sourceLanguage)
    {
        if (is_null($sourceLanguage)) {
            array_push($this->openAPINullablesSetToNull, 'sourceLanguage');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sourceLanguage', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['sourceLanguage'] = $sourceLanguage;

        return $this;
    }

    /**
     * Gets targetLanguage
     *
     * @return int|null
     */
    public function getTargetLanguage()
    {
        return $this->container['targetLanguage'];
    }

    /**
     * Sets targetLanguage
     *
     * @param int|null $targetLanguage Target language
     *
     * @return self
     */
    public function setTargetLanguage($targetLanguage)
    {
        if (is_null($targetLanguage)) {
            array_push($this->openAPINullablesSetToNull, 'targetLanguage');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('targetLanguage', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['targetLanguage'] = $targetLanguage;

        return $this;
    }

    /**
     * Gets isPaidExternally
     *
     * @return bool|null
     */
    public function getIsPaidExternally()
    {
        return $this->container['isPaidExternally'];
    }

    /**
     * Sets isPaidExternally
     *
     * @param bool|null $isPaidExternally Paid externally
     *
     * @return self
     */
    public function setIsPaidExternally($isPaidExternally)
    {
        if (is_null($isPaidExternally)) {
            throw new \InvalidArgumentException('non-nullable isPaidExternally cannot be null');
        }
        $this->container['isPaidExternally'] = $isPaidExternally;

        return $this;
    }

    /**
     * Gets documentId
     *
     * @return string|null
     */
    public function getDocumentId()
    {
        return $this->container['documentId'];
    }

    /**
     * Sets documentId
     *
     * @param string|null $documentId Document ID
     *
     * @return self
     */
    public function setDocumentId($documentId)
    {
        if (is_null($documentId)) {
            array_push($this->openAPINullablesSetToNull, 'documentId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('documentId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['documentId'] = $documentId;

        return $this;
    }

    /**
     * Gets stageId
     *
     * @return string|null
     */
    public function getStageId()
    {
        return $this->container['stageId'];
    }

    /**
     * Sets stageId
     *
     * @param string|null $stageId Workflow stage ID
     *
     * @return self
     */
    public function setStageId($stageId)
    {
        if (is_null($stageId)) {
            array_push($this->openAPINullablesSetToNull, 'stageId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('stageId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['stageId'] = $stageId;

        return $this;
    }

    /**
     * Gets verifiedDate
     *
     * @return \DateTime|null
     */
    public function getVerifiedDate()
    {
        return $this->container['verifiedDate'];
    }

    /**
     * Sets verifiedDate
     *
     * @param \DateTime|null $verifiedDate The date the job status was set to VERIFIED.
     *
     * @return self
     */
    public function setVerifiedDate($verifiedDate)
    {
        if (is_null($verifiedDate)) {
            array_push($this->openAPINullablesSetToNull, 'verifiedDate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('verifiedDate', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['verifiedDate'] = $verifiedDate;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


