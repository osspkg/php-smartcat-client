<?php
/**
 * LineItemExportData
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  SmartCat
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Smartcat API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SmartCat\Model;

use \ArrayAccess;
use \SmartCat\ObjectSerializer;

/**
 * LineItemExportData Class Doc Comment
 *
 * @category Class
 * @package  SmartCat
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class LineItemExportData implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'LineItemExportData';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'invoiceId' => 'string',
        'invoiceCreatedDate' => '\DateTime',
        'invoicePaidDate' => '\DateTime',
        'invoiceNumber' => 'string',
        'lineItemId' => 'string',
        'type' => 'string',
        'total' => 'float',
        'totalWithVat' => 'float',
        'vatPercent' => 'float',
        'vatValue' => 'float',
        'currency' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'invoiceId' => null,
        'invoiceCreatedDate' => 'date-time',
        'invoicePaidDate' => 'date-time',
        'invoiceNumber' => null,
        'lineItemId' => null,
        'type' => null,
        'total' => 'double',
        'totalWithVat' => 'double',
        'vatPercent' => 'double',
        'vatValue' => 'double',
        'currency' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'invoiceId' => false,
		'invoiceCreatedDate' => false,
		'invoicePaidDate' => true,
		'invoiceNumber' => true,
		'lineItemId' => true,
		'type' => true,
		'total' => false,
		'totalWithVat' => false,
		'vatPercent' => true,
		'vatValue' => true,
		'currency' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'invoiceId' => 'invoiceId',
        'invoiceCreatedDate' => 'invoiceCreatedDate',
        'invoicePaidDate' => 'invoicePaidDate',
        'invoiceNumber' => 'invoiceNumber',
        'lineItemId' => 'lineItemId',
        'type' => 'type',
        'total' => 'total',
        'totalWithVat' => 'totalWithVat',
        'vatPercent' => 'vatPercent',
        'vatValue' => 'vatValue',
        'currency' => 'currency'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'invoiceId' => 'setInvoiceId',
        'invoiceCreatedDate' => 'setInvoiceCreatedDate',
        'invoicePaidDate' => 'setInvoicePaidDate',
        'invoiceNumber' => 'setInvoiceNumber',
        'lineItemId' => 'setLineItemId',
        'type' => 'setType',
        'total' => 'setTotal',
        'totalWithVat' => 'setTotalWithVat',
        'vatPercent' => 'setVatPercent',
        'vatValue' => 'setVatValue',
        'currency' => 'setCurrency'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'invoiceId' => 'getInvoiceId',
        'invoiceCreatedDate' => 'getInvoiceCreatedDate',
        'invoicePaidDate' => 'getInvoicePaidDate',
        'invoiceNumber' => 'getInvoiceNumber',
        'lineItemId' => 'getLineItemId',
        'type' => 'getType',
        'total' => 'getTotal',
        'totalWithVat' => 'getTotalWithVat',
        'vatPercent' => 'getVatPercent',
        'vatValue' => 'getVatValue',
        'currency' => 'getCurrency'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('invoiceId', $data ?? [], null);
        $this->setIfExists('invoiceCreatedDate', $data ?? [], null);
        $this->setIfExists('invoicePaidDate', $data ?? [], null);
        $this->setIfExists('invoiceNumber', $data ?? [], null);
        $this->setIfExists('lineItemId', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('total', $data ?? [], null);
        $this->setIfExists('totalWithVat', $data ?? [], null);
        $this->setIfExists('vatPercent', $data ?? [], null);
        $this->setIfExists('vatValue', $data ?? [], null);
        $this->setIfExists('currency', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets invoiceId
     *
     * @return string|null
     */
    public function getInvoiceId()
    {
        return $this->container['invoiceId'];
    }

    /**
     * Sets invoiceId
     *
     * @param string|null $invoiceId invoiceId
     *
     * @return self
     */
    public function setInvoiceId($invoiceId)
    {
        if (is_null($invoiceId)) {
            throw new \InvalidArgumentException('non-nullable invoiceId cannot be null');
        }
        $this->container['invoiceId'] = $invoiceId;

        return $this;
    }

    /**
     * Gets invoiceCreatedDate
     *
     * @return \DateTime|null
     */
    public function getInvoiceCreatedDate()
    {
        return $this->container['invoiceCreatedDate'];
    }

    /**
     * Sets invoiceCreatedDate
     *
     * @param \DateTime|null $invoiceCreatedDate invoiceCreatedDate
     *
     * @return self
     */
    public function setInvoiceCreatedDate($invoiceCreatedDate)
    {
        if (is_null($invoiceCreatedDate)) {
            throw new \InvalidArgumentException('non-nullable invoiceCreatedDate cannot be null');
        }
        $this->container['invoiceCreatedDate'] = $invoiceCreatedDate;

        return $this;
    }

    /**
     * Gets invoicePaidDate
     *
     * @return \DateTime|null
     */
    public function getInvoicePaidDate()
    {
        return $this->container['invoicePaidDate'];
    }

    /**
     * Sets invoicePaidDate
     *
     * @param \DateTime|null $invoicePaidDate invoicePaidDate
     *
     * @return self
     */
    public function setInvoicePaidDate($invoicePaidDate)
    {
        if (is_null($invoicePaidDate)) {
            array_push($this->openAPINullablesSetToNull, 'invoicePaidDate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('invoicePaidDate', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['invoicePaidDate'] = $invoicePaidDate;

        return $this;
    }

    /**
     * Gets invoiceNumber
     *
     * @return string|null
     */
    public function getInvoiceNumber()
    {
        return $this->container['invoiceNumber'];
    }

    /**
     * Sets invoiceNumber
     *
     * @param string|null $invoiceNumber invoiceNumber
     *
     * @return self
     */
    public function setInvoiceNumber($invoiceNumber)
    {
        if (is_null($invoiceNumber)) {
            array_push($this->openAPINullablesSetToNull, 'invoiceNumber');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('invoiceNumber', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['invoiceNumber'] = $invoiceNumber;

        return $this;
    }

    /**
     * Gets lineItemId
     *
     * @return string|null
     */
    public function getLineItemId()
    {
        return $this->container['lineItemId'];
    }

    /**
     * Sets lineItemId
     *
     * @param string|null $lineItemId lineItemId
     *
     * @return self
     */
    public function setLineItemId($lineItemId)
    {
        if (is_null($lineItemId)) {
            array_push($this->openAPINullablesSetToNull, 'lineItemId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('lineItemId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['lineItemId'] = $lineItemId;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type type
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            array_push($this->openAPINullablesSetToNull, 'type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets total
     *
     * @return float|null
     */
    public function getTotal()
    {
        return $this->container['total'];
    }

    /**
     * Sets total
     *
     * @param float|null $total total
     *
     * @return self
     */
    public function setTotal($total)
    {
        if (is_null($total)) {
            throw new \InvalidArgumentException('non-nullable total cannot be null');
        }
        $this->container['total'] = $total;

        return $this;
    }

    /**
     * Gets totalWithVat
     *
     * @return float|null
     */
    public function getTotalWithVat()
    {
        return $this->container['totalWithVat'];
    }

    /**
     * Sets totalWithVat
     *
     * @param float|null $totalWithVat totalWithVat
     *
     * @return self
     */
    public function setTotalWithVat($totalWithVat)
    {
        if (is_null($totalWithVat)) {
            throw new \InvalidArgumentException('non-nullable totalWithVat cannot be null');
        }
        $this->container['totalWithVat'] = $totalWithVat;

        return $this;
    }

    /**
     * Gets vatPercent
     *
     * @return float|null
     */
    public function getVatPercent()
    {
        return $this->container['vatPercent'];
    }

    /**
     * Sets vatPercent
     *
     * @param float|null $vatPercent vatPercent
     *
     * @return self
     */
    public function setVatPercent($vatPercent)
    {
        if (is_null($vatPercent)) {
            array_push($this->openAPINullablesSetToNull, 'vatPercent');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('vatPercent', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['vatPercent'] = $vatPercent;

        return $this;
    }

    /**
     * Gets vatValue
     *
     * @return float|null
     */
    public function getVatValue()
    {
        return $this->container['vatValue'];
    }

    /**
     * Sets vatValue
     *
     * @param float|null $vatValue vatValue
     *
     * @return self
     */
    public function setVatValue($vatValue)
    {
        if (is_null($vatValue)) {
            array_push($this->openAPINullablesSetToNull, 'vatValue');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('vatValue', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['vatValue'] = $vatValue;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string|null
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string|null $currency currency
     *
     * @return self
     */
    public function setCurrency($currency)
    {
        if (is_null($currency)) {
            array_push($this->openAPINullablesSetToNull, 'currency');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('currency', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['currency'] = $currency;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


