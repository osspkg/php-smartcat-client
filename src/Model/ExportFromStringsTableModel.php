<?php
/**
 * ExportFromStringsTableModel
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  SmartCat
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Smartcat API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SmartCat\Model;

use \ArrayAccess;
use \SmartCat\ObjectSerializer;

/**
 * ExportFromStringsTableModel Class Doc Comment
 *
 * @category Class
 * @description Model for export from Software Localization Project
 * @package  SmartCat
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ExportFromStringsTableModel implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ExportFromStringsTableModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'branch' => 'string',
        'format' => '\SmartCat\Model\ExportingDocumentFormat',
        'exportIncompleteTranslationsMode' => '\SmartCat\Model\ExportIncompleteTranslationsMode',
        'includeSourceLanguage' => 'bool',
        'outputFileName' => 'string',
        'outputFilePathTemplate' => 'string',
        'pathSeparator' => 'string',
        'languages' => 'string[]',
        'segmentExportMode' => '\SmartCat\Model\SegmentExportMode'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'branch' => null,
        'format' => null,
        'exportIncompleteTranslationsMode' => null,
        'includeSourceLanguage' => null,
        'outputFileName' => null,
        'outputFilePathTemplate' => null,
        'pathSeparator' => null,
        'languages' => null,
        'segmentExportMode' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'branch' => true,
		'format' => false,
		'exportIncompleteTranslationsMode' => false,
		'includeSourceLanguage' => false,
		'outputFileName' => true,
		'outputFilePathTemplate' => true,
		'pathSeparator' => true,
		'languages' => true,
		'segmentExportMode' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'branch' => 'branch',
        'format' => 'format',
        'exportIncompleteTranslationsMode' => 'exportIncompleteTranslationsMode',
        'includeSourceLanguage' => 'includeSourceLanguage',
        'outputFileName' => 'outputFileName',
        'outputFilePathTemplate' => 'outputFilePathTemplate',
        'pathSeparator' => 'pathSeparator',
        'languages' => 'languages',
        'segmentExportMode' => 'segmentExportMode'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'branch' => 'setBranch',
        'format' => 'setFormat',
        'exportIncompleteTranslationsMode' => 'setExportIncompleteTranslationsMode',
        'includeSourceLanguage' => 'setIncludeSourceLanguage',
        'outputFileName' => 'setOutputFileName',
        'outputFilePathTemplate' => 'setOutputFilePathTemplate',
        'pathSeparator' => 'setPathSeparator',
        'languages' => 'setLanguages',
        'segmentExportMode' => 'setSegmentExportMode'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'branch' => 'getBranch',
        'format' => 'getFormat',
        'exportIncompleteTranslationsMode' => 'getExportIncompleteTranslationsMode',
        'includeSourceLanguage' => 'getIncludeSourceLanguage',
        'outputFileName' => 'getOutputFileName',
        'outputFilePathTemplate' => 'getOutputFilePathTemplate',
        'pathSeparator' => 'getPathSeparator',
        'languages' => 'getLanguages',
        'segmentExportMode' => 'getSegmentExportMode'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('branch', $data ?? [], null);
        $this->setIfExists('format', $data ?? [], null);
        $this->setIfExists('exportIncompleteTranslationsMode', $data ?? [], null);
        $this->setIfExists('includeSourceLanguage', $data ?? [], null);
        $this->setIfExists('outputFileName', $data ?? [], null);
        $this->setIfExists('outputFilePathTemplate', $data ?? [], null);
        $this->setIfExists('pathSeparator', $data ?? [], null);
        $this->setIfExists('languages', $data ?? [], null);
        $this->setIfExists('segmentExportMode', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets branch
     *
     * @return string|null
     */
    public function getBranch()
    {
        return $this->container['branch'];
    }

    /**
     * Sets branch
     *
     * @param string|null $branch Exporting branch
     *
     * @return self
     */
    public function setBranch($branch)
    {
        if (is_null($branch)) {
            array_push($this->openAPINullablesSetToNull, 'branch');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('branch', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['branch'] = $branch;

        return $this;
    }

    /**
     * Gets format
     *
     * @return \SmartCat\Model\ExportingDocumentFormat|null
     */
    public function getFormat()
    {
        return $this->container['format'];
    }

    /**
     * Sets format
     *
     * @param \SmartCat\Model\ExportingDocumentFormat|null $format format
     *
     * @return self
     */
    public function setFormat($format)
    {
        if (is_null($format)) {
            throw new \InvalidArgumentException('non-nullable format cannot be null');
        }
        $this->container['format'] = $format;

        return $this;
    }

    /**
     * Gets exportIncompleteTranslationsMode
     *
     * @return \SmartCat\Model\ExportIncompleteTranslationsMode|null
     */
    public function getExportIncompleteTranslationsMode()
    {
        return $this->container['exportIncompleteTranslationsMode'];
    }

    /**
     * Sets exportIncompleteTranslationsMode
     *
     * @param \SmartCat\Model\ExportIncompleteTranslationsMode|null $exportIncompleteTranslationsMode exportIncompleteTranslationsMode
     *
     * @return self
     */
    public function setExportIncompleteTranslationsMode($exportIncompleteTranslationsMode)
    {
        if (is_null($exportIncompleteTranslationsMode)) {
            throw new \InvalidArgumentException('non-nullable exportIncompleteTranslationsMode cannot be null');
        }
        $this->container['exportIncompleteTranslationsMode'] = $exportIncompleteTranslationsMode;

        return $this;
    }

    /**
     * Gets includeSourceLanguage
     *
     * @return bool|null
     */
    public function getIncludeSourceLanguage()
    {
        return $this->container['includeSourceLanguage'];
    }

    /**
     * Sets includeSourceLanguage
     *
     * @param bool|null $includeSourceLanguage Include source language to export
     *
     * @return self
     */
    public function setIncludeSourceLanguage($includeSourceLanguage)
    {
        if (is_null($includeSourceLanguage)) {
            throw new \InvalidArgumentException('non-nullable includeSourceLanguage cannot be null');
        }
        $this->container['includeSourceLanguage'] = $includeSourceLanguage;

        return $this;
    }

    /**
     * Gets outputFileName
     *
     * @return string|null
     */
    public function getOutputFileName()
    {
        return $this->container['outputFileName'];
    }

    /**
     * Sets outputFileName
     *
     * @param string|null $outputFileName Output file or zip bundle name template.  For zip bundle the default name will be \"export-YYYY-MM-DD-hhmmss-{PROJECT}-{COLLECTION}.zip\".
     *
     * @return self
     */
    public function setOutputFileName($outputFileName)
    {
        if (is_null($outputFileName)) {
            array_push($this->openAPINullablesSetToNull, 'outputFileName');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('outputFileName', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['outputFileName'] = $outputFileName;

        return $this;
    }

    /**
     * Gets outputFilePathTemplate
     *
     * @return string|null
     */
    public function getOutputFilePathTemplate()
    {
        return $this->container['outputFilePathTemplate'];
    }

    /**
     * Sets outputFilePathTemplate
     *
     * @param string|null $outputFilePathTemplate Specifies how to name the output file in zip archive when exporting multiple languages at once.  A reasonable default value will be used depending on the chosen file format.
     *
     * @return self
     */
    public function setOutputFilePathTemplate($outputFilePathTemplate)
    {
        if (is_null($outputFilePathTemplate)) {
            array_push($this->openAPINullablesSetToNull, 'outputFilePathTemplate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('outputFilePathTemplate', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['outputFilePathTemplate'] = $outputFilePathTemplate;

        return $this;
    }

    /**
     * Gets pathSeparator
     *
     * @return string|null
     */
    public function getPathSeparator()
    {
        return $this->container['pathSeparator'];
    }

    /**
     * Sets pathSeparator
     *
     * @param string|null $pathSeparator Keys path separator for structurable file formats
     *
     * @return self
     */
    public function setPathSeparator($pathSeparator)
    {
        if (is_null($pathSeparator)) {
            array_push($this->openAPINullablesSetToNull, 'pathSeparator');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('pathSeparator', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['pathSeparator'] = $pathSeparator;

        return $this;
    }

    /**
     * Gets languages
     *
     * @return string[]|null
     */
    public function getLanguages()
    {
        return $this->container['languages'];
    }

    /**
     * Sets languages
     *
     * @param string[]|null $languages Exporting translation languages
     *
     * @return self
     */
    public function setLanguages($languages)
    {
        if (is_null($languages)) {
            array_push($this->openAPINullablesSetToNull, 'languages');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('languages', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['languages'] = $languages;

        return $this;
    }

    /**
     * Gets segmentExportMode
     *
     * @return \SmartCat\Model\SegmentExportMode|null
     */
    public function getSegmentExportMode()
    {
        return $this->container['segmentExportMode'];
    }

    /**
     * Sets segmentExportMode
     *
     * @param \SmartCat\Model\SegmentExportMode|null $segmentExportMode segmentExportMode
     *
     * @return self
     */
    public function setSegmentExportMode($segmentExportMode)
    {
        if (is_null($segmentExportMode)) {
            throw new \InvalidArgumentException('non-nullable segmentExportMode cannot be null');
        }
        $this->container['segmentExportMode'] = $segmentExportMode;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


