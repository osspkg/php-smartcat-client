<?php
/**
 * MyTeamSearchRequestModel
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  SmartCat
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Smartcat API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SmartCat\Model;

use \ArrayAccess;
use \SmartCat\ObjectSerializer;

/**
 * MyTeamSearchRequestModel Class Doc Comment
 *
 * @category Class
 * @description MyTeam member search request
 * @package  SmartCat
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class MyTeamSearchRequestModel implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'MyTeamSearchRequestModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'skip' => 'int',
        'limit' => 'int',
        'serviceType' => '\SmartCat\Model\FreelancerServiceType',
        'sourceLanguage' => 'string',
        'targetLanguage' => 'string',
        'onlyNativeSpeakers' => 'bool',
        'allDialects' => 'bool',
        'minRate' => 'float',
        'maxRate' => 'float',
        'rateRangeCurrency' => 'string',
        'specializations' => '\SmartCat\Model\Specialization[]',
        'specializationKnowledgeLevel' => '\SmartCat\Model\SpecializationKnowledgeLevel[]',
        'searchString' => 'string',
        'daytime' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'skip' => 'int32',
        'limit' => 'int32',
        'serviceType' => null,
        'sourceLanguage' => null,
        'targetLanguage' => null,
        'onlyNativeSpeakers' => null,
        'allDialects' => null,
        'minRate' => 'double',
        'maxRate' => 'double',
        'rateRangeCurrency' => null,
        'specializations' => null,
        'specializationKnowledgeLevel' => null,
        'searchString' => null,
        'daytime' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'skip' => true,
		'limit' => true,
		'serviceType' => false,
		'sourceLanguage' => true,
		'targetLanguage' => true,
		'onlyNativeSpeakers' => false,
		'allDialects' => false,
		'minRate' => true,
		'maxRate' => true,
		'rateRangeCurrency' => true,
		'specializations' => true,
		'specializationKnowledgeLevel' => true,
		'searchString' => true,
		'daytime' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'skip' => 'skip',
        'limit' => 'limit',
        'serviceType' => 'serviceType',
        'sourceLanguage' => 'sourceLanguage',
        'targetLanguage' => 'targetLanguage',
        'onlyNativeSpeakers' => 'onlyNativeSpeakers',
        'allDialects' => 'allDialects',
        'minRate' => 'minRate',
        'maxRate' => 'maxRate',
        'rateRangeCurrency' => 'rateRangeCurrency',
        'specializations' => 'specializations',
        'specializationKnowledgeLevel' => 'specializationKnowledgeLevel',
        'searchString' => 'searchString',
        'daytime' => 'daytime'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'skip' => 'setSkip',
        'limit' => 'setLimit',
        'serviceType' => 'setServiceType',
        'sourceLanguage' => 'setSourceLanguage',
        'targetLanguage' => 'setTargetLanguage',
        'onlyNativeSpeakers' => 'setOnlyNativeSpeakers',
        'allDialects' => 'setAllDialects',
        'minRate' => 'setMinRate',
        'maxRate' => 'setMaxRate',
        'rateRangeCurrency' => 'setRateRangeCurrency',
        'specializations' => 'setSpecializations',
        'specializationKnowledgeLevel' => 'setSpecializationKnowledgeLevel',
        'searchString' => 'setSearchString',
        'daytime' => 'setDaytime'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'skip' => 'getSkip',
        'limit' => 'getLimit',
        'serviceType' => 'getServiceType',
        'sourceLanguage' => 'getSourceLanguage',
        'targetLanguage' => 'getTargetLanguage',
        'onlyNativeSpeakers' => 'getOnlyNativeSpeakers',
        'allDialects' => 'getAllDialects',
        'minRate' => 'getMinRate',
        'maxRate' => 'getMaxRate',
        'rateRangeCurrency' => 'getRateRangeCurrency',
        'specializations' => 'getSpecializations',
        'specializationKnowledgeLevel' => 'getSpecializationKnowledgeLevel',
        'searchString' => 'getSearchString',
        'daytime' => 'getDaytime'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('skip', $data ?? [], null);
        $this->setIfExists('limit', $data ?? [], null);
        $this->setIfExists('serviceType', $data ?? [], null);
        $this->setIfExists('sourceLanguage', $data ?? [], null);
        $this->setIfExists('targetLanguage', $data ?? [], null);
        $this->setIfExists('onlyNativeSpeakers', $data ?? [], null);
        $this->setIfExists('allDialects', $data ?? [], null);
        $this->setIfExists('minRate', $data ?? [], null);
        $this->setIfExists('maxRate', $data ?? [], null);
        $this->setIfExists('rateRangeCurrency', $data ?? [], null);
        $this->setIfExists('specializations', $data ?? [], null);
        $this->setIfExists('specializationKnowledgeLevel', $data ?? [], null);
        $this->setIfExists('searchString', $data ?? [], null);
        $this->setIfExists('daytime', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets skip
     *
     * @return int|null
     */
    public function getSkip()
    {
        return $this->container['skip'];
    }

    /**
     * Sets skip
     *
     * @param int|null $skip Number of search request results to be skipped (mandatory parameter)
     *
     * @return self
     */
    public function setSkip($skip)
    {
        if (is_null($skip)) {
            array_push($this->openAPINullablesSetToNull, 'skip');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('skip', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['skip'] = $skip;

        return $this;
    }

    /**
     * Gets limit
     *
     * @return int|null
     */
    public function getLimit()
    {
        return $this->container['limit'];
    }

    /**
     * Sets limit
     *
     * @param int|null $limit Maximum number of search request results (mandatory parameter, cannot exceed 500)
     *
     * @return self
     */
    public function setLimit($limit)
    {
        if (is_null($limit)) {
            array_push($this->openAPINullablesSetToNull, 'limit');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('limit', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['limit'] = $limit;

        return $this;
    }

    /**
     * Gets serviceType
     *
     * @return \SmartCat\Model\FreelancerServiceType|null
     */
    public function getServiceType()
    {
        return $this->container['serviceType'];
    }

    /**
     * Sets serviceType
     *
     * @param \SmartCat\Model\FreelancerServiceType|null $serviceType serviceType
     *
     * @return self
     */
    public function setServiceType($serviceType)
    {
        if (is_null($serviceType)) {
            throw new \InvalidArgumentException('non-nullable serviceType cannot be null');
        }
        $this->container['serviceType'] = $serviceType;

        return $this;
    }

    /**
     * Gets sourceLanguage
     *
     * @return string|null
     */
    public function getSourceLanguage()
    {
        return $this->container['sourceLanguage'];
    }

    /**
     * Sets sourceLanguage
     *
     * @param string|null $sourceLanguage Source language
     *
     * @return self
     */
    public function setSourceLanguage($sourceLanguage)
    {
        if (is_null($sourceLanguage)) {
            array_push($this->openAPINullablesSetToNull, 'sourceLanguage');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sourceLanguage', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['sourceLanguage'] = $sourceLanguage;

        return $this;
    }

    /**
     * Gets targetLanguage
     *
     * @return string|null
     */
    public function getTargetLanguage()
    {
        return $this->container['targetLanguage'];
    }

    /**
     * Sets targetLanguage
     *
     * @param string|null $targetLanguage Target language
     *
     * @return self
     */
    public function setTargetLanguage($targetLanguage)
    {
        if (is_null($targetLanguage)) {
            array_push($this->openAPINullablesSetToNull, 'targetLanguage');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('targetLanguage', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['targetLanguage'] = $targetLanguage;

        return $this;
    }

    /**
     * Gets onlyNativeSpeakers
     *
     * @return bool|null
     */
    public function getOnlyNativeSpeakers()
    {
        return $this->container['onlyNativeSpeakers'];
    }

    /**
     * Sets onlyNativeSpeakers
     *
     * @param bool|null $onlyNativeSpeakers Linguist's native language
     *
     * @return self
     */
    public function setOnlyNativeSpeakers($onlyNativeSpeakers)
    {
        if (is_null($onlyNativeSpeakers)) {
            throw new \InvalidArgumentException('non-nullable onlyNativeSpeakers cannot be null');
        }
        $this->container['onlyNativeSpeakers'] = $onlyNativeSpeakers;

        return $this;
    }

    /**
     * Gets allDialects
     *
     * @return bool|null
     */
    public function getAllDialects()
    {
        return $this->container['allDialects'];
    }

    /**
     * Sets allDialects
     *
     * @param bool|null $allDialects Search linguists in all dialects for the language pair
     *
     * @return self
     */
    public function setAllDialects($allDialects)
    {
        if (is_null($allDialects)) {
            throw new \InvalidArgumentException('non-nullable allDialects cannot be null');
        }
        $this->container['allDialects'] = $allDialects;

        return $this;
    }

    /**
     * Gets minRate
     *
     * @return float|null
     */
    public function getMinRate()
    {
        return $this->container['minRate'];
    }

    /**
     * Sets minRate
     *
     * @param float|null $minRate Minimum translation unit rate
     *
     * @return self
     */
    public function setMinRate($minRate)
    {
        if (is_null($minRate)) {
            array_push($this->openAPINullablesSetToNull, 'minRate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('minRate', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['minRate'] = $minRate;

        return $this;
    }

    /**
     * Gets maxRate
     *
     * @return float|null
     */
    public function getMaxRate()
    {
        return $this->container['maxRate'];
    }

    /**
     * Sets maxRate
     *
     * @param float|null $maxRate Maximum translation unit rate
     *
     * @return self
     */
    public function setMaxRate($maxRate)
    {
        if (is_null($maxRate)) {
            array_push($this->openAPINullablesSetToNull, 'maxRate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('maxRate', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['maxRate'] = $maxRate;

        return $this;
    }

    /**
     * Gets rateRangeCurrency
     *
     * @return string|null
     */
    public function getRateRangeCurrency()
    {
        return $this->container['rateRangeCurrency'];
    }

    /**
     * Sets rateRangeCurrency
     *
     * @param string|null $rateRangeCurrency Rate range currency
     *
     * @return self
     */
    public function setRateRangeCurrency($rateRangeCurrency)
    {
        if (is_null($rateRangeCurrency)) {
            array_push($this->openAPINullablesSetToNull, 'rateRangeCurrency');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('rateRangeCurrency', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['rateRangeCurrency'] = $rateRangeCurrency;

        return $this;
    }

    /**
     * Gets specializations
     *
     * @return \SmartCat\Model\Specialization[]|null
     */
    public function getSpecializations()
    {
        return $this->container['specializations'];
    }

    /**
     * Sets specializations
     *
     * @param \SmartCat\Model\Specialization[]|null $specializations Specializations
     *
     * @return self
     */
    public function setSpecializations($specializations)
    {
        if (is_null($specializations)) {
            array_push($this->openAPINullablesSetToNull, 'specializations');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('specializations', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['specializations'] = $specializations;

        return $this;
    }

    /**
     * Gets specializationKnowledgeLevel
     *
     * @return \SmartCat\Model\SpecializationKnowledgeLevel[]|null
     */
    public function getSpecializationKnowledgeLevel()
    {
        return $this->container['specializationKnowledgeLevel'];
    }

    /**
     * Sets specializationKnowledgeLevel
     *
     * @param \SmartCat\Model\SpecializationKnowledgeLevel[]|null $specializationKnowledgeLevel Required level of expertise in the specified (or any other if undefined) specialization
     *
     * @return self
     */
    public function setSpecializationKnowledgeLevel($specializationKnowledgeLevel)
    {
        if (is_null($specializationKnowledgeLevel)) {
            array_push($this->openAPINullablesSetToNull, 'specializationKnowledgeLevel');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('specializationKnowledgeLevel', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['specializationKnowledgeLevel'] = $specializationKnowledgeLevel;

        return $this;
    }

    /**
     * Gets searchString
     *
     * @return string|null
     */
    public function getSearchString()
    {
        return $this->container['searchString'];
    }

    /**
     * Sets searchString
     *
     * @param string|null $searchString Full-text search string
     *
     * @return self
     */
    public function setSearchString($searchString)
    {
        if (is_null($searchString)) {
            array_push($this->openAPINullablesSetToNull, 'searchString');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('searchString', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['searchString'] = $searchString;

        return $this;
    }

    /**
     * Gets daytime
     *
     * @return bool|null
     */
    public function getDaytime()
    {
        return $this->container['daytime'];
    }

    /**
     * Sets daytime
     *
     * @param bool|null $daytime It is daytime now in the linguist's time zone
     *
     * @return self
     */
    public function setDaytime($daytime)
    {
        if (is_null($daytime)) {
            throw new \InvalidArgumentException('non-nullable daytime cannot be null');
        }
        $this->container['daytime'] = $daytime;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


