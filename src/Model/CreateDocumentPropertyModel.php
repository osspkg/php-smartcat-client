<?php
/**
 * CreateDocumentPropertyModel
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  SmartCat
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Smartcat API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SmartCat\Model;

use \ArrayAccess;
use \SmartCat\ObjectSerializer;

/**
 * CreateDocumentPropertyModel Class Doc Comment
 *
 * @category Class
 * @description Created document properties
 * @package  SmartCat
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CreateDocumentPropertyModel implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CreateDocumentPropertyModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'externalId' => 'string',
        'metaInfo' => 'string',
        'disassembleAlgorithmName' => 'string',
        'presetDisassembleAlgorithm' => 'string',
        'disassembleSettings' => 'mixed',
        'bilingualFileImportSetings' => '\SmartCat\Model\BilingualFileImportSetingsModel',
        'targetLanguages' => 'string[]',
        'enablePlaceholders' => 'bool',
        'enableOcr' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'externalId' => null,
        'metaInfo' => null,
        'disassembleAlgorithmName' => null,
        'presetDisassembleAlgorithm' => null,
        'disassembleSettings' => null,
        'bilingualFileImportSetings' => null,
        'targetLanguages' => null,
        'enablePlaceholders' => null,
        'enableOcr' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'externalId' => true,
		'metaInfo' => true,
		'disassembleAlgorithmName' => true,
		'presetDisassembleAlgorithm' => true,
		'disassembleSettings' => true,
		'bilingualFileImportSetings' => false,
		'targetLanguages' => true,
		'enablePlaceholders' => true,
		'enableOcr' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'externalId' => 'externalId',
        'metaInfo' => 'metaInfo',
        'disassembleAlgorithmName' => 'disassembleAlgorithmName',
        'presetDisassembleAlgorithm' => 'presetDisassembleAlgorithm',
        'disassembleSettings' => 'disassembleSettings',
        'bilingualFileImportSetings' => 'bilingualFileImportSetings',
        'targetLanguages' => 'targetLanguages',
        'enablePlaceholders' => 'enablePlaceholders',
        'enableOcr' => 'enableOcr'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'externalId' => 'setExternalId',
        'metaInfo' => 'setMetaInfo',
        'disassembleAlgorithmName' => 'setDisassembleAlgorithmName',
        'presetDisassembleAlgorithm' => 'setPresetDisassembleAlgorithm',
        'disassembleSettings' => 'setDisassembleSettings',
        'bilingualFileImportSetings' => 'setBilingualFileImportSetings',
        'targetLanguages' => 'setTargetLanguages',
        'enablePlaceholders' => 'setEnablePlaceholders',
        'enableOcr' => 'setEnableOcr'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'externalId' => 'getExternalId',
        'metaInfo' => 'getMetaInfo',
        'disassembleAlgorithmName' => 'getDisassembleAlgorithmName',
        'presetDisassembleAlgorithm' => 'getPresetDisassembleAlgorithm',
        'disassembleSettings' => 'getDisassembleSettings',
        'bilingualFileImportSetings' => 'getBilingualFileImportSetings',
        'targetLanguages' => 'getTargetLanguages',
        'enablePlaceholders' => 'getEnablePlaceholders',
        'enableOcr' => 'getEnableOcr'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('externalId', $data ?? [], null);
        $this->setIfExists('metaInfo', $data ?? [], null);
        $this->setIfExists('disassembleAlgorithmName', $data ?? [], null);
        $this->setIfExists('presetDisassembleAlgorithm', $data ?? [], null);
        $this->setIfExists('disassembleSettings', $data ?? [], null);
        $this->setIfExists('bilingualFileImportSetings', $data ?? [], null);
        $this->setIfExists('targetLanguages', $data ?? [], null);
        $this->setIfExists('enablePlaceholders', $data ?? [], null);
        $this->setIfExists('enableOcr', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets externalId
     *
     * @return string|null
     */
    public function getExternalId()
    {
        return $this->container['externalId'];
    }

    /**
     * Sets externalId
     *
     * @param string|null $externalId Optional external ID provided by a client
     *
     * @return self
     */
    public function setExternalId($externalId)
    {
        if (is_null($externalId)) {
            array_push($this->openAPINullablesSetToNull, 'externalId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('externalId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['externalId'] = $externalId;

        return $this;
    }

    /**
     * Gets metaInfo
     *
     * @return string|null
     */
    public function getMetaInfo()
    {
        return $this->container['metaInfo'];
    }

    /**
     * Sets metaInfo
     *
     * @param string|null $metaInfo Additional document-related user information (for integration)
     *
     * @return self
     */
    public function setMetaInfo($metaInfo)
    {
        if (is_null($metaInfo)) {
            array_push($this->openAPINullablesSetToNull, 'metaInfo');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('metaInfo', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['metaInfo'] = $metaInfo;

        return $this;
    }

    /**
     * Gets disassembleAlgorithmName
     *
     * @return string|null
     */
    public function getDisassembleAlgorithmName()
    {
        return $this->container['disassembleAlgorithmName'];
    }

    /**
     * Sets disassembleAlgorithmName
     *
     * @param string|null $disassembleAlgorithmName Optional algorithm of file disassembling
     *
     * @return self
     */
    public function setDisassembleAlgorithmName($disassembleAlgorithmName)
    {
        if (is_null($disassembleAlgorithmName)) {
            array_push($this->openAPINullablesSetToNull, 'disassembleAlgorithmName');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('disassembleAlgorithmName', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['disassembleAlgorithmName'] = $disassembleAlgorithmName;

        return $this;
    }

    /**
     * Gets presetDisassembleAlgorithm
     *
     * @return string|null
     */
    public function getPresetDisassembleAlgorithm()
    {
        return $this->container['presetDisassembleAlgorithm'];
    }

    /**
     * Sets presetDisassembleAlgorithm
     *
     * @param string|null $presetDisassembleAlgorithm Optional preset for the file disassembling algorithm
     *
     * @return self
     */
    public function setPresetDisassembleAlgorithm($presetDisassembleAlgorithm)
    {
        if (is_null($presetDisassembleAlgorithm)) {
            array_push($this->openAPINullablesSetToNull, 'presetDisassembleAlgorithm');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('presetDisassembleAlgorithm', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['presetDisassembleAlgorithm'] = $presetDisassembleAlgorithm;

        return $this;
    }

    /**
     * Gets disassembleSettings
     *
     * @return mixed|null
     */
    public function getDisassembleSettings()
    {
        return $this->container['disassembleSettings'];
    }

    /**
     * Sets disassembleSettings
     *
     * @param mixed|null $disassembleSettings Additional disassemble settings
     *
     * @return self
     */
    public function setDisassembleSettings($disassembleSettings)
    {
        if (is_null($disassembleSettings)) {
            array_push($this->openAPINullablesSetToNull, 'disassembleSettings');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('disassembleSettings', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['disassembleSettings'] = $disassembleSettings;

        return $this;
    }

    /**
     * Gets bilingualFileImportSetings
     *
     * @return \SmartCat\Model\BilingualFileImportSetingsModel|null
     */
    public function getBilingualFileImportSetings()
    {
        return $this->container['bilingualFileImportSetings'];
    }

    /**
     * Sets bilingualFileImportSetings
     *
     * @param \SmartCat\Model\BilingualFileImportSetingsModel|null $bilingualFileImportSetings bilingualFileImportSetings
     *
     * @return self
     */
    public function setBilingualFileImportSetings($bilingualFileImportSetings)
    {
        if (is_null($bilingualFileImportSetings)) {
            throw new \InvalidArgumentException('non-nullable bilingualFileImportSetings cannot be null');
        }
        $this->container['bilingualFileImportSetings'] = $bilingualFileImportSetings;

        return $this;
    }

    /**
     * Gets targetLanguages
     *
     * @return string[]|null
     */
    public function getTargetLanguages()
    {
        return $this->container['targetLanguages'];
    }

    /**
     * Sets targetLanguages
     *
     * @param string[]|null $targetLanguages Optional array of target languages. Project languages are applied by default
     *
     * @return self
     */
    public function setTargetLanguages($targetLanguages)
    {
        if (is_null($targetLanguages)) {
            array_push($this->openAPINullablesSetToNull, 'targetLanguages');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('targetLanguages', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['targetLanguages'] = $targetLanguages;

        return $this;
    }

    /**
     * Gets enablePlaceholders
     *
     * @return bool|null
     */
    public function getEnablePlaceholders()
    {
        return $this->container['enablePlaceholders'];
    }

    /**
     * Sets enablePlaceholders
     *
     * @param bool|null $enablePlaceholders Specifies whether to enable placeholders in the document body
     *
     * @return self
     */
    public function setEnablePlaceholders($enablePlaceholders)
    {
        if (is_null($enablePlaceholders)) {
            array_push($this->openAPINullablesSetToNull, 'enablePlaceholders');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('enablePlaceholders', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['enablePlaceholders'] = $enablePlaceholders;

        return $this;
    }

    /**
     * Gets enableOcr
     *
     * @return bool|null
     */
    public function getEnableOcr()
    {
        return $this->container['enableOcr'];
    }

    /**
     * Sets enableOcr
     *
     * @param bool|null $enableOcr Optional parameter for enabling OCR
     *
     * @return self
     */
    public function setEnableOcr($enableOcr)
    {
        if (is_null($enableOcr)) {
            array_push($this->openAPINullablesSetToNull, 'enableOcr');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('enableOcr', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['enableOcr'] = $enableOcr;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


